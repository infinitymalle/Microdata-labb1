
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00000392  00000406  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000392  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000041a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000044c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  0000048c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cdf  00000000  00000000  00000504  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009d2  00000000  00000000  000011e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006b9  00000000  00000000  00001bb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000180  00000000  00000000  00002270  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004a4  00000000  00000000  000023f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000927  00000000  00000000  00002894  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000178  00000000  00000000  000031bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
   8:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
   c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  10:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  14:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  18:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  1c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  20:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  24:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  28:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  2c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  30:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  34:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  38:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  3c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  40:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  44:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  48:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  4c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  50:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  54:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  58:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	e2 e9       	ldi	r30, 0x92	; 146
  70:	f3 e0       	ldi	r31, 0x03	; 3
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	a4 31       	cpi	r26, 0x14	; 20
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>
  7e:	0e 94 45 00 	call	0x8a	; 0x8a <main>
  82:	0c 94 c7 01 	jmp	0x38e	; 0x38e <_exit>

00000086 <__bad_interrupt>:
  86:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008a <main>:
#include "myFunctionsInclude.h"
#include <math.h>

int main(void)
{
    CLKPR = 0x80;
  8a:	e1 e6       	ldi	r30, 0x61	; 97
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	80 e8       	ldi	r24, 0x80	; 128
  90:	80 83       	st	Z, r24
	CLKPR = 0x00;
  92:	10 82       	st	Z, r1
	LCD_Init();
  94:	0e 94 51 00 	call	0xa2	; 0xa2 <LCD_Init>
	//writeChar('6', 3);
	//writeLong(1111800815);
	//prime();
	//blink();
	//button();
	part4();
  98:	0e 94 ae 00 	call	0x15c	; 0x15c <part4>

}
  9c:	80 e0       	ldi	r24, 0x00	; 0
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	08 95       	ret

000000a2 <LCD_Init>:
	
	while(1){
		if (PINB >> 7 == 0 && !buttonPushed && LCDDR13 == 0x1){
			buttonPushed = true;
			LCDDR13 = 0;
			LCDDR8 = 1;
  a2:	87 eb       	ldi	r24, 0xB7	; 183
  a4:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
  a8:	87 e0       	ldi	r24, 0x07	; 7
  aa:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>
  ae:	8f e0       	ldi	r24, 0x0F	; 15
  b0:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
  b4:	80 ec       	ldi	r24, 0xC0	; 192
  b6:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
  ba:	08 95       	ret

000000bc <writeChar>:
  bc:	cf 93       	push	r28
  be:	df 93       	push	r29
  c0:	cd b7       	in	r28, 0x3d	; 61
  c2:	de b7       	in	r29, 0x3e	; 62
  c4:	64 97       	sbiw	r28, 0x14	; 20
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	f8 94       	cli
  ca:	de bf       	out	0x3e, r29	; 62
  cc:	0f be       	out	0x3f, r0	; 63
  ce:	cd bf       	out	0x3d, r28	; 61
  d0:	94 e1       	ldi	r25, 0x14	; 20
  d2:	e0 e0       	ldi	r30, 0x00	; 0
  d4:	f1 e0       	ldi	r31, 0x01	; 1
  d6:	de 01       	movw	r26, r28
  d8:	11 96       	adiw	r26, 0x01	; 1
  da:	01 90       	ld	r0, Z+
  dc:	0d 92       	st	X+, r0
  de:	9a 95       	dec	r25
  e0:	e1 f7       	brne	.-8      	; 0xda <writeChar+0x1e>
  e2:	66 30       	cpi	r22, 0x06	; 6
  e4:	71 05       	cpc	r23, r1
  e6:	50 f5       	brcc	.+84     	; 0x13c <writeChar+0x80>
  e8:	fb 01       	movw	r30, r22
  ea:	f5 95       	asr	r31
  ec:	e7 95       	ror	r30
  ee:	e4 51       	subi	r30, 0x14	; 20
  f0:	ff 4f       	sbci	r31, 0xFF	; 255
  f2:	a8 2f       	mov	r26, r24
  f4:	b0 e0       	ldi	r27, 0x00	; 0
  f6:	d0 97       	sbiw	r26, 0x30	; 48
  f8:	aa 0f       	add	r26, r26
  fa:	bb 1f       	adc	r27, r27
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	8c 0f       	add	r24, r28
 102:	9d 1f       	adc	r25, r29
 104:	a8 0f       	add	r26, r24
 106:	b9 1f       	adc	r27, r25
 108:	2d 91       	ld	r18, X+
 10a:	3c 91       	ld	r19, X
 10c:	61 70       	andi	r22, 0x01	; 1
 10e:	77 27       	eor	r23, r23
 110:	af 01       	movw	r20, r30
 112:	4c 5e       	subi	r20, 0xEC	; 236
 114:	5f 4f       	sbci	r21, 0xFF	; 255
 116:	c9 01       	movw	r24, r18
 118:	8f 70       	andi	r24, 0x0F	; 15
 11a:	99 27       	eor	r25, r25
 11c:	61 30       	cpi	r22, 0x01	; 1
 11e:	71 05       	cpc	r23, r1
 120:	b1 f0       	breq	.+44     	; 0x14e <writeChar+0x92>
 122:	90 81       	ld	r25, Z
 124:	89 2b       	or	r24, r25
 126:	80 83       	st	Z, r24
 128:	35 96       	adiw	r30, 0x05	; 5
 12a:	32 95       	swap	r19
 12c:	22 95       	swap	r18
 12e:	2f 70       	andi	r18, 0x0F	; 15
 130:	23 27       	eor	r18, r19
 132:	3f 70       	andi	r19, 0x0F	; 15
 134:	23 27       	eor	r18, r19
 136:	e4 17       	cp	r30, r20
 138:	f5 07       	cpc	r31, r21
 13a:	69 f7       	brne	.-38     	; 0x116 <writeChar+0x5a>
 13c:	64 96       	adiw	r28, 0x14	; 20
 13e:	0f b6       	in	r0, 0x3f	; 63
 140:	f8 94       	cli
 142:	de bf       	out	0x3e, r29	; 62
 144:	0f be       	out	0x3f, r0	; 63
 146:	cd bf       	out	0x3d, r28	; 61
 148:	df 91       	pop	r29
 14a:	cf 91       	pop	r28
 14c:	08 95       	ret
 14e:	82 95       	swap	r24
 150:	92 95       	swap	r25
 152:	90 7f       	andi	r25, 0xF0	; 240
 154:	98 27       	eor	r25, r24
 156:	80 7f       	andi	r24, 0xF0	; 240
 158:	98 27       	eor	r25, r24
 15a:	e3 cf       	rjmp	.-58     	; 0x122 <writeChar+0x66>

0000015c <part4>:
			buttonPushed = false;
		}
	}
}

void part4() {
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
 160:	00 d0       	rcall	.+0      	; 0x162 <part4+0x6>
 162:	00 d0       	rcall	.+0      	; 0x164 <part4+0x8>
 164:	cd b7       	in	r28, 0x3d	; 61
 166:	de b7       	in	r29, 0x3e	; 62
	
	PORTB = 0x80;   //0b10000000
 168:	80 e8       	ldi	r24, 0x80	; 128
 16a:	85 b9       	out	0x05, r24	; 5
	LCDDR8 = 1;
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7fc0f4>
	LCDDR13 = 0;
 172:	10 92 f9 00 	sts	0x00F9, r1	; 0x8000f9 <__TEXT_REGION_LENGTH__+0x7fc0f9>
	TCCR1B = (1 << CS12);
 176:	84 e0       	ldi	r24, 0x04	; 4
 178:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
	
	uint16_t clk = 0;
	uint16_t interval = 1000000/256;
	int on = 0;
	bool overflowflag = false;
	bool buttonPushed = false;
 17c:	21 2c       	mov	r2, r1
	TCCR1B = (1 << CS12);
	
	uint16_t clk = 0;
	uint16_t interval = 1000000/256;
	int on = 0;
	bool overflowflag = false;
 17e:	31 2c       	mov	r3, r1
	LCDDR13 = 0;
	TCCR1B = (1 << CS12);
	
	uint16_t clk = 0;
	uint16_t interval = 1000000/256;
	int on = 0;
 180:	1a 82       	std	Y+2, r1	; 0x02
 182:	19 82       	std	Y+1, r1	; 0x01
	PORTB = 0x80;   //0b10000000
	LCDDR8 = 1;
	LCDDR13 = 0;
	TCCR1B = (1 << CS12);
	
	uint16_t clk = 0;
 184:	00 e0       	ldi	r16, 0x00	; 0
 186:	10 e0       	ldi	r17, 0x00	; 0
	}
}

void writeLong(long i){
	for (int n = 5; n >= 0; n--) {
		char ch = (i % 10) + '0';
 188:	2a e0       	ldi	r18, 0x0A	; 10
 18a:	82 2e       	mov	r8, r18
 18c:	91 2c       	mov	r9, r1
 18e:	a1 2c       	mov	r10, r1
 190:	b1 2c       	mov	r11, r1
	int on = 0;
	bool overflowflag = false;
	bool buttonPushed = false;
	
	while(1){
		for(long i = 25000; i <= 30000; i++){
 192:	98 ea       	ldi	r25, 0xA8	; 168
 194:	49 2e       	mov	r4, r25
 196:	91 e6       	ldi	r25, 0x61	; 97
 198:	59 2e       	mov	r5, r25
 19a:	61 2c       	mov	r6, r1
 19c:	71 2c       	mov	r7, r1
	}
}

int is_prime(long i){
	for(int n = 2; n < i; n++){
		if(i % n == 0){
 19e:	40 fe       	sbrs	r4, 0
 1a0:	35 c0       	rjmp	.+106    	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
 1a2:	83 e0       	ldi	r24, 0x03	; 3
 1a4:	c8 2e       	mov	r12, r24
 1a6:	d1 2c       	mov	r13, r1
 1a8:	e1 2c       	mov	r14, r1
 1aa:	f1 2c       	mov	r15, r1
 1ac:	0d c0       	rjmp	.+26     	; 0x1c8 <part4+0x6c>
 1ae:	9f ef       	ldi	r25, 0xFF	; 255
 1b0:	c9 1a       	sub	r12, r25
 1b2:	d9 0a       	sbc	r13, r25
 1b4:	e9 0a       	sbc	r14, r25
 1b6:	f9 0a       	sbc	r15, r25
 1b8:	c3 01       	movw	r24, r6
 1ba:	b2 01       	movw	r22, r4
 1bc:	0e 94 86 01 	call	0x30c	; 0x30c <__divmodsi4>
 1c0:	67 2b       	or	r22, r23
 1c2:	68 2b       	or	r22, r24
 1c4:	69 2b       	or	r22, r25
 1c6:	11 f1       	breq	.+68     	; 0x20c <__EEPROM_REGION_LENGTH__+0xc>
		}
	}
}

int is_prime(long i){
	for(int n = 2; n < i; n++){
 1c8:	96 01       	movw	r18, r12
 1ca:	a7 01       	movw	r20, r14
 1cc:	c4 14       	cp	r12, r4
 1ce:	d5 04       	cpc	r13, r5
 1d0:	e6 04       	cpc	r14, r6
 1d2:	f7 04       	cpc	r15, r7
 1d4:	61 f7       	brne	.-40     	; 0x1ae <part4+0x52>
 1d6:	62 01       	movw	r12, r4
 1d8:	73 01       	movw	r14, r6
 1da:	85 e0       	ldi	r24, 0x05	; 5
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	9c 83       	std	Y+4, r25	; 0x04
 1e0:	8b 83       	std	Y+3, r24	; 0x03
	}
}

void writeLong(long i){
	for (int n = 5; n >= 0; n--) {
		char ch = (i % 10) + '0';
 1e2:	b6 01       	movw	r22, r12
 1e4:	c7 01       	movw	r24, r14
 1e6:	a5 01       	movw	r20, r10
 1e8:	94 01       	movw	r18, r8
 1ea:	0e 94 86 01 	call	0x30c	; 0x30c <__divmodsi4>
 1ee:	86 2f       	mov	r24, r22
		i /= 10;
 1f0:	69 01       	movw	r12, r18
 1f2:	7a 01       	movw	r14, r20
		writeChar(ch, n);
 1f4:	6b 81       	ldd	r22, Y+3	; 0x03
 1f6:	7c 81       	ldd	r23, Y+4	; 0x04
 1f8:	80 5d       	subi	r24, 0xD0	; 208
 1fa:	0e 94 5e 00 	call	0xbc	; 0xbc <writeChar>
		return;
	}
}

void writeLong(long i){
	for (int n = 5; n >= 0; n--) {
 1fe:	8b 81       	ldd	r24, Y+3	; 0x03
 200:	9c 81       	ldd	r25, Y+4	; 0x04
 202:	01 97       	sbiw	r24, 0x01	; 1
 204:	9c 83       	std	Y+4, r25	; 0x04
 206:	8b 83       	std	Y+3, r24	; 0x03
 208:	01 96       	adiw	r24, 0x01	; 1
 20a:	59 f7       	brne	.-42     	; 0x1e2 <part4+0x86>
			if(is_prime(i)){
				writeLong(i);
				
			}
			
			if(TCNT1 >= clk && !overflowflag){
 20c:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
 210:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
 214:	80 17       	cp	r24, r16
 216:	91 07       	cpc	r25, r17
 218:	80 f0       	brcs	.+32     	; 0x23a <__EEPROM_REGION_LENGTH__+0x3a>
 21a:	31 10       	cpse	r3, r1
 21c:	0e c0       	rjmp	.+28     	; 0x23a <__EEPROM_REGION_LENGTH__+0x3a>
				clk = TCNT1 + interval;
 21e:	00 91 84 00 	lds	r16, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
 222:	10 91 85 00 	lds	r17, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
 226:	0e 5b       	subi	r16, 0xBE	; 190
 228:	10 4f       	sbci	r17, 0xF0	; 240
				if(on == 0){
 22a:	89 81       	ldd	r24, Y+1	; 0x01
 22c:	9a 81       	ldd	r25, Y+2	; 0x02
 22e:	89 2b       	or	r24, r25
 230:	09 f0       	breq	.+2      	; 0x234 <__EEPROM_REGION_LENGTH__+0x34>
 232:	59 c0       	rjmp	.+178    	; 0x2e6 <__EEPROM_REGION_LENGTH__+0xe6>
					LCDDR3 = 0x1;
 234:	91 e0       	ldi	r25, 0x01	; 1
 236:	90 93 ef 00 	sts	0x00EF, r25	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7fc0ef>
					LCDDR3 = 0x0;
					on = 0;
				}
			}
		
			if (TCNT1 < 0xFFFF){
 23a:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
 23e:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
 242:	01 96       	adiw	r24, 0x01	; 1
 244:	b9 f1       	breq	.+110    	; 0x2b4 <__EEPROM_REGION_LENGTH__+0xb4>
				overflowflag = false;
 246:	31 2c       	mov	r3, r1
				overflowflag = true;
			
				clk = TCNT1 + interval;
			}
	
			if (PINB >> 7 == 0 && !buttonPushed && LCDDR13 == 0x1){
 248:	1f 99       	sbic	0x03, 7	; 3
 24a:	3e c0       	rjmp	.+124    	; 0x2c8 <__EEPROM_REGION_LENGTH__+0xc8>
 24c:	21 10       	cpse	r2, r1
 24e:	2d c0       	rjmp	.+90     	; 0x2aa <__EEPROM_REGION_LENGTH__+0xaa>
 250:	80 91 f9 00 	lds	r24, 0x00F9	; 0x8000f9 <__TEXT_REGION_LENGTH__+0x7fc0f9>
 254:	81 30       	cpi	r24, 0x01	; 1
 256:	09 f4       	brne	.+2      	; 0x25a <__EEPROM_REGION_LENGTH__+0x5a>
 258:	49 c0       	rjmp	.+146    	; 0x2ec <__EEPROM_REGION_LENGTH__+0xec>
				buttonPushed = true;
				LCDDR13 = 0;
				LCDDR8 = 1;
			}
		
			else if (PINB >> 7 == 0 && !buttonPushed && LCDDR8 == 0x1) {
 25a:	1f 99       	sbic	0x03, 7	; 3
 25c:	04 c0       	rjmp	.+8      	; 0x266 <__EEPROM_REGION_LENGTH__+0x66>
 25e:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7fc0f4>
 262:	81 30       	cpi	r24, 0x01	; 1
 264:	c9 f1       	breq	.+114    	; 0x2d8 <__EEPROM_REGION_LENGTH__+0xd8>
				buttonPushed = true;
				LCDDR13 = 1;
				LCDDR8 = 0;
			}
		
			else if (PINB >> 7 == 1){
 266:	1f 99       	sbic	0x03, 7	; 3
 268:	23 c0       	rjmp	.+70     	; 0x2b0 <__EEPROM_REGION_LENGTH__+0xb0>
				buttonPushed = false;
			}
				LCDDR0 = 0x2;
 26a:	82 e0       	ldi	r24, 0x02	; 2
 26c:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
	int on = 0;
	bool overflowflag = false;
	bool buttonPushed = false;
	
	while(1){
		for(long i = 25000; i <= 30000; i++){
 270:	9f ef       	ldi	r25, 0xFF	; 255
 272:	49 1a       	sub	r4, r25
 274:	59 0a       	sbc	r5, r25
 276:	69 0a       	sbc	r6, r25
 278:	79 0a       	sbc	r7, r25
		
			else if (PINB >> 7 == 1){
				buttonPushed = false;
			}
				LCDDR0 = 0x2;
				on = 1;
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	9a 83       	std	Y+2, r25	; 0x02
 280:	89 83       	std	Y+1, r24	; 0x01
	int on = 0;
	bool overflowflag = false;
	bool buttonPushed = false;
	
	while(1){
		for(long i = 25000; i <= 30000; i++){
 282:	91 e3       	ldi	r25, 0x31	; 49
 284:	49 16       	cp	r4, r25
 286:	95 e7       	ldi	r25, 0x75	; 117
 288:	59 06       	cpc	r5, r25
 28a:	61 04       	cpc	r6, r1
 28c:	71 04       	cpc	r7, r1
 28e:	09 f0       	breq	.+2      	; 0x292 <__EEPROM_REGION_LENGTH__+0x92>
 290:	86 cf       	rjmp	.-244    	; 0x19e <part4+0x42>
			}
				LCDDR0 = 0x2;
				on = 1;
		}
			
		if (TCNT1 < 0xFFFF){
 292:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
 296:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
 29a:	01 96       	adiw	r24, 0x01	; 1
 29c:	71 f1       	breq	.+92     	; 0x2fa <__EEPROM_REGION_LENGTH__+0xfa>
				overflowflag = false;
 29e:	31 2c       	mov	r3, r1
 2a0:	81 e0       	ldi	r24, 0x01	; 1
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	9a 83       	std	Y+2, r25	; 0x02
 2a6:	89 83       	std	Y+1, r24	; 0x01
 2a8:	74 cf       	rjmp	.-280    	; 0x192 <part4+0x36>
				buttonPushed = true;
				LCDDR13 = 0;
				LCDDR8 = 1;
			}
		
			else if (PINB >> 7 == 0 && !buttonPushed && LCDDR8 == 0x1) {
 2aa:	83 b1       	in	r24, 0x03	; 3
				buttonPushed = true;
				LCDDR13 = 1;
				LCDDR8 = 0;
			}
		
			else if (PINB >> 7 == 1){
 2ac:	1f 9b       	sbis	0x03, 7	; 3
 2ae:	dd cf       	rjmp	.-70     	; 0x26a <__EEPROM_REGION_LENGTH__+0x6a>
				buttonPushed = false;
 2b0:	21 2c       	mov	r2, r1
 2b2:	db cf       	rjmp	.-74     	; 0x26a <__EEPROM_REGION_LENGTH__+0x6a>
			}
			
			else{
				overflowflag = true;
			
				clk = TCNT1 + interval;
 2b4:	00 91 84 00 	lds	r16, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
 2b8:	10 91 85 00 	lds	r17, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
 2bc:	0e 5b       	subi	r16, 0xBE	; 190
 2be:	10 4f       	sbci	r17, 0xF0	; 240
			if (TCNT1 < 0xFFFF){
				overflowflag = false;
			}
			
			else{
				overflowflag = true;
 2c0:	33 24       	eor	r3, r3
 2c2:	33 94       	inc	r3
			
				clk = TCNT1 + interval;
			}
	
			if (PINB >> 7 == 0 && !buttonPushed && LCDDR13 == 0x1){
 2c4:	1f 9b       	sbis	0x03, 7	; 3
 2c6:	c2 cf       	rjmp	.-124    	; 0x24c <__EEPROM_REGION_LENGTH__+0x4c>
				buttonPushed = true;
				LCDDR13 = 0;
				LCDDR8 = 1;
			}
		
			else if (PINB >> 7 == 0 && !buttonPushed && LCDDR8 == 0x1) {
 2c8:	1f 99       	sbic	0x03, 7	; 3
 2ca:	cd cf       	rjmp	.-102    	; 0x266 <__EEPROM_REGION_LENGTH__+0x66>
 2cc:	21 10       	cpse	r2, r1
 2ce:	cb cf       	rjmp	.-106    	; 0x266 <__EEPROM_REGION_LENGTH__+0x66>
 2d0:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7fc0f4>
 2d4:	81 30       	cpi	r24, 0x01	; 1
 2d6:	39 f6       	brne	.-114    	; 0x266 <__EEPROM_REGION_LENGTH__+0x66>
				buttonPushed = true;
				LCDDR13 = 1;
 2d8:	80 93 f9 00 	sts	0x00F9, r24	; 0x8000f9 <__TEXT_REGION_LENGTH__+0x7fc0f9>
				LCDDR8 = 0;
 2dc:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7fc0f4>
				LCDDR13 = 0;
				LCDDR8 = 1;
			}
		
			else if (PINB >> 7 == 0 && !buttonPushed && LCDDR8 == 0x1) {
				buttonPushed = true;
 2e0:	22 24       	eor	r2, r2
 2e2:	23 94       	inc	r2
				LCDDR13 = 1;
				LCDDR8 = 0;
 2e4:	c2 cf       	rjmp	.-124    	; 0x26a <__EEPROM_REGION_LENGTH__+0x6a>
					LCDDR3 = 0x1;
					on = 1;
				}
				
				else{
					LCDDR3 = 0x0;
 2e6:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7fc0ef>
 2ea:	a7 cf       	rjmp	.-178    	; 0x23a <__EEPROM_REGION_LENGTH__+0x3a>
				clk = TCNT1 + interval;
			}
	
			if (PINB >> 7 == 0 && !buttonPushed && LCDDR13 == 0x1){
				buttonPushed = true;
				LCDDR13 = 0;
 2ec:	10 92 f9 00 	sts	0x00F9, r1	; 0x8000f9 <__TEXT_REGION_LENGTH__+0x7fc0f9>
				LCDDR8 = 1;
 2f0:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7fc0f4>
			
				clk = TCNT1 + interval;
			}
	
			if (PINB >> 7 == 0 && !buttonPushed && LCDDR13 == 0x1){
				buttonPushed = true;
 2f4:	22 24       	eor	r2, r2
 2f6:	23 94       	inc	r2
				LCDDR13 = 0;
				LCDDR8 = 1;
 2f8:	b8 cf       	rjmp	.-144    	; 0x26a <__EEPROM_REGION_LENGTH__+0x6a>
		if (TCNT1 < 0xFFFF){
				overflowflag = false;
		}else{
			overflowflag = true;
			
			clk = TCNT1 + interval;
 2fa:	00 91 84 00 	lds	r16, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
 2fe:	10 91 85 00 	lds	r17, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
 302:	0e 5b       	subi	r16, 0xBE	; 190
 304:	10 4f       	sbci	r17, 0xF0	; 240
		}
			
		if (TCNT1 < 0xFFFF){
				overflowflag = false;
		}else{
			overflowflag = true;
 306:	33 24       	eor	r3, r3
 308:	33 94       	inc	r3
 30a:	ca cf       	rjmp	.-108    	; 0x2a0 <__EEPROM_REGION_LENGTH__+0xa0>

0000030c <__divmodsi4>:
 30c:	05 2e       	mov	r0, r21
 30e:	97 fb       	bst	r25, 7
 310:	1e f4       	brtc	.+6      	; 0x318 <__divmodsi4+0xc>
 312:	00 94       	com	r0
 314:	0e 94 9d 01 	call	0x33a	; 0x33a <__negsi2>
 318:	57 fd       	sbrc	r21, 7
 31a:	07 d0       	rcall	.+14     	; 0x32a <__divmodsi4_neg2>
 31c:	0e 94 a5 01 	call	0x34a	; 0x34a <__udivmodsi4>
 320:	07 fc       	sbrc	r0, 7
 322:	03 d0       	rcall	.+6      	; 0x32a <__divmodsi4_neg2>
 324:	4e f4       	brtc	.+18     	; 0x338 <__divmodsi4_exit>
 326:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__negsi2>

0000032a <__divmodsi4_neg2>:
 32a:	50 95       	com	r21
 32c:	40 95       	com	r20
 32e:	30 95       	com	r19
 330:	21 95       	neg	r18
 332:	3f 4f       	sbci	r19, 0xFF	; 255
 334:	4f 4f       	sbci	r20, 0xFF	; 255
 336:	5f 4f       	sbci	r21, 0xFF	; 255

00000338 <__divmodsi4_exit>:
 338:	08 95       	ret

0000033a <__negsi2>:
 33a:	90 95       	com	r25
 33c:	80 95       	com	r24
 33e:	70 95       	com	r23
 340:	61 95       	neg	r22
 342:	7f 4f       	sbci	r23, 0xFF	; 255
 344:	8f 4f       	sbci	r24, 0xFF	; 255
 346:	9f 4f       	sbci	r25, 0xFF	; 255
 348:	08 95       	ret

0000034a <__udivmodsi4>:
 34a:	a1 e2       	ldi	r26, 0x21	; 33
 34c:	1a 2e       	mov	r1, r26
 34e:	aa 1b       	sub	r26, r26
 350:	bb 1b       	sub	r27, r27
 352:	fd 01       	movw	r30, r26
 354:	0d c0       	rjmp	.+26     	; 0x370 <__udivmodsi4_ep>

00000356 <__udivmodsi4_loop>:
 356:	aa 1f       	adc	r26, r26
 358:	bb 1f       	adc	r27, r27
 35a:	ee 1f       	adc	r30, r30
 35c:	ff 1f       	adc	r31, r31
 35e:	a2 17       	cp	r26, r18
 360:	b3 07       	cpc	r27, r19
 362:	e4 07       	cpc	r30, r20
 364:	f5 07       	cpc	r31, r21
 366:	20 f0       	brcs	.+8      	; 0x370 <__udivmodsi4_ep>
 368:	a2 1b       	sub	r26, r18
 36a:	b3 0b       	sbc	r27, r19
 36c:	e4 0b       	sbc	r30, r20
 36e:	f5 0b       	sbc	r31, r21

00000370 <__udivmodsi4_ep>:
 370:	66 1f       	adc	r22, r22
 372:	77 1f       	adc	r23, r23
 374:	88 1f       	adc	r24, r24
 376:	99 1f       	adc	r25, r25
 378:	1a 94       	dec	r1
 37a:	69 f7       	brne	.-38     	; 0x356 <__udivmodsi4_loop>
 37c:	60 95       	com	r22
 37e:	70 95       	com	r23
 380:	80 95       	com	r24
 382:	90 95       	com	r25
 384:	9b 01       	movw	r18, r22
 386:	ac 01       	movw	r20, r24
 388:	bd 01       	movw	r22, r26
 38a:	cf 01       	movw	r24, r30
 38c:	08 95       	ret

0000038e <_exit>:
 38e:	f8 94       	cli

00000390 <__stop_program>:
 390:	ff cf       	rjmp	.-2      	; 0x390 <__stop_program>
