
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000035c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000003b0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003e0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000420  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009e0  00000000  00000000  00000470  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008c1  00000000  00000000  00000e50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000402  00000000  00000000  00001711  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000009c  00000000  00000000  00001b14  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000432  00000000  00000000  00001bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003dd  00000000  00000000  00001fe2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000023bf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
   8:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
   c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  10:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  14:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  18:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  1c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  20:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  24:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  28:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  2c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  30:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  34:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  38:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  3c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  40:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  44:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  48:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  4c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  50:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  54:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  58:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  5c:	0f 01       	movw	r0, r30
  5e:	0a 01       	movw	r0, r20
  60:	f9 00       	.word	0x00f9	; ????
  62:	ef 00       	.word	0x00ef	; ????
  64:	d3 00       	.word	0x00d3	; ????
  66:	b6 00       	.word	0x00b6	; ????
  68:	aa 00       	.word	0x00aa	; ????
  6a:	78 00       	.word	0x0078	; ????
  6c:	8c 00       	.word	0x008c	; ????
  6e:	20 01       	movw	r4, r0

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61
  7c:	0e 94 44 00 	call	0x88	; 0x88 <main>
  80:	0c 94 ac 01 	jmp	0x358	; 0x358 <_exit>

00000084 <__bad_interrupt>:
  84:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000088 <main>:
#include <avr/io.h>
#include "myFunctionsInclude.h"

int main(void)
{
    CLKPR = 0x80;
  88:	e1 e6       	ldi	r30, 0x61	; 97
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	80 e8       	ldi	r24, 0x80	; 128
  8e:	80 83       	st	Z, r24
	CLKPR = 0x00;
  90:	10 82       	st	Z, r1
	LCD_Init();
  92:	0e 94 58 00 	call	0xb0	; 0xb0 <LCD_Init>
	//writeChar('6', 5);
	writeLong(11111800815);
  96:	2f ee       	ldi	r18, 0xEF	; 239
  98:	3f e9       	ldi	r19, 0x9F	; 159
  9a:	40 e5       	ldi	r20, 0x50	; 80
  9c:	56 e9       	ldi	r21, 0x96	; 150
  9e:	62 e0       	ldi	r22, 0x02	; 2
  a0:	70 e0       	ldi	r23, 0x00	; 0
  a2:	80 e0       	ldi	r24, 0x00	; 0
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	0e 94 38 01 	call	0x270	; 0x270 <writeLong>
}
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	08 95       	ret

000000b0 <LCD_Init>:
		LCDCS    - Asynchronous clock source
		LCDMUX's - Duty = 1/4, Bias = 1/3
		LCDPM's  - Number of Segments = 25
	*/
	
	LCDCRB = (1 << LCDCS) | (1 << LCDMUX1) | (1 << LCDMUX0) | (1 << LCDPM2) | (1 << LCDPM1) | (1 << LCDPM0);
  b0:	87 eb       	ldi	r24, 0xB7	; 183
  b2:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
	/*
		LCD Frame Rate Register:
		LCDCD's - Prescaler setting N = 16
	*/
	
	LCDFRR = (1 << LCDCD2) | (1 << LCDCD1) | (1 << LCDCD0);
  b6:	87 e0       	ldi	r24, 0x07	; 7
  b8:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>
		LCD Contrast Control Register
		None of the LCDDC's used = 300 microseconds
		LCDCC's = 3,35V
	*/
	
	LCDCCR = (1 << LCDCC3) | (1 << LCDCC2) | (1 << LCDCC1) | (1 << LCDCC0);
  bc:	8f e0       	ldi	r24, 0x0F	; 15
  be:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
	
	/*
		LCDEN = LCD Enabled
		LCDAB = Low Power Waveform
	*/
	LCDCRA = (1 << LCDEN) | (1 << LCDAB);
  c2:	80 ec       	ldi	r24, 0xC0	; 192
  c4:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
  c8:	08 95       	ret

000000ca <writeChar>:
}

void writeChar(char ch, int pos)
{ 
	if(pos >= 0 && pos <= 5){
  ca:	66 30       	cpi	r22, 0x06	; 6
  cc:	71 05       	cpc	r23, r1
  ce:	08 f5       	brcc	.+66     	; 0x112 <writeChar+0x48>
		int pair = pos / 2;					      // Make sure it's either pair 0,1 - 2,3 or 4,5
  d0:	9b 01       	movw	r18, r22
  d2:	35 95       	asr	r19
  d4:	27 95       	ror	r18
		int lr;								      // left or right
		
		if (pos % 2 == 0) {						  // If it's position 0, 2 or 4 - lr = 1
  d6:	60 ff       	sbrs	r22, 0
  d8:	1d c0       	rjmp	.+58     	; 0x114 <writeChar+0x4a>
			lr = 1;	
		}
		else{									  // Else - multiply the current section of a number by 16 to get the number in the right position
			lr = 16;
  da:	40 e1       	ldi	r20, 0x10	; 16
		// All the numbers
		// 0 - 0x1551 - 0x15510000, 1 - 0x0110 - 0x01100000, 2 - 0x1E11 - 0x1E110000, 3 - 0x1B11 - 0x1B110000, 4 - 0x0B50 - 0x0B500000, 5 - 0x1B41 - 0x1B410000, 6 - 0x1F41 - 0x1F410000, 7 - 0x0111 - 0x01110000, 8 - 0x1F51 - 0x1F510000, 9 - 0x0B51 - 0x0B510000
		
		if (ch >= 0 || ch <= 9){
			
			switch (ch)
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	fc 01       	movw	r30, r24
  e0:	f0 97       	sbiw	r30, 0x30	; 48
  e2:	ea 30       	cpi	r30, 0x0A	; 10
  e4:	f1 05       	cpc	r31, r1
  e6:	a8 f4       	brcc	.+42     	; 0x112 <writeChar+0x48>
  e8:	e2 5d       	subi	r30, 0xD2	; 210
  ea:	ff 4f       	sbci	r31, 0xFF	; 255
  ec:	0c 94 84 01 	jmp	0x308	; 0x308 <__tablejump2__>
					lcddr += 5;
					lcdReg = lcdReg + 0x1 * lr;
				break;
				
				case '7':
					lcdReg = lcdReg + 0x1 * lr;
  f0:	f9 01       	movw	r30, r18
  f2:	e4 51       	subi	r30, 0x14	; 20
  f4:	ff 4f       	sbci	r31, 0xFF	; 255
  f6:	80 81       	ld	r24, Z
  f8:	84 0f       	add	r24, r20
  fa:	80 83       	st	Z, r24
					lcddr += 5;
					lcdReg = lcdReg + 0x1 * lr;
  fc:	35 96       	adiw	r30, 0x05	; 5
  fe:	80 81       	ld	r24, Z
 100:	84 0f       	add	r24, r20
 102:	80 83       	st	Z, r24
					lcddr += 5;
					lcdReg = lcdReg + 0x1 * lr;
 104:	35 96       	adiw	r30, 0x05	; 5
 106:	80 81       	ld	r24, Z
				case '9':
					lcdReg = lcdReg + 0x1 * lr;
					lcddr += 5;
					lcdReg = lcdReg + 0x5 * lr;
					lcddr += 5;
					lcdReg = lcdReg + 0xB * lr;
 108:	48 0f       	add	r20, r24
 10a:	40 83       	st	Z, r20
					lcddr += 5;
					lcdReg = lcdReg + 0x0 * lr;
 10c:	35 96       	adiw	r30, 0x05	; 5
 10e:	80 81       	ld	r24, Z
 110:	80 83       	st	Z, r24
 112:	08 95       	ret
	if(pos >= 0 && pos <= 5){
		int pair = pos / 2;					      // Make sure it's either pair 0,1 - 2,3 or 4,5
		int lr;								      // left or right
		
		if (pos % 2 == 0) {						  // If it's position 0, 2 or 4 - lr = 1
			lr = 1;	
 114:	41 e0       	ldi	r20, 0x01	; 1
 116:	e2 cf       	rjmp	.-60     	; 0xdc <writeChar+0x12>
					lcddr += 5;
					lcdReg = lcdReg + 0x0 * lr;
				break;
				
				case '8':
					lcdReg = lcdReg + 0x1 * lr;
 118:	f9 01       	movw	r30, r18
 11a:	e4 51       	subi	r30, 0x14	; 20
 11c:	ff 4f       	sbci	r31, 0xFF	; 255
 11e:	80 81       	ld	r24, Z
 120:	84 0f       	add	r24, r20
 122:	80 83       	st	Z, r24
					lcddr += 5;
					lcdReg = lcdReg + 0x5 * lr;
 124:	35 96       	adiw	r30, 0x05	; 5
 126:	90 81       	ld	r25, Z
 128:	84 2f       	mov	r24, r20
 12a:	88 0f       	add	r24, r24
 12c:	88 0f       	add	r24, r24
 12e:	84 0f       	add	r24, r20
 130:	89 0f       	add	r24, r25
 132:	80 83       	st	Z, r24
					lcddr += 5;
					lcdReg = lcdReg + 0xF * lr;
 134:	35 96       	adiw	r30, 0x05	; 5
 136:	90 81       	ld	r25, Z
 138:	84 2f       	mov	r24, r20
 13a:	88 0f       	add	r24, r24
 13c:	84 0f       	add	r24, r20
 13e:	58 2f       	mov	r21, r24
 140:	55 0f       	add	r21, r21
 142:	55 0f       	add	r21, r21
 144:	85 0f       	add	r24, r21
 146:	89 0f       	add	r24, r25
 148:	80 83       	st	Z, r24
					lcddr += 5;
					lcdReg = lcdReg + 0x1 * lr;
 14a:	35 96       	adiw	r30, 0x05	; 5
 14c:	80 81       	ld	r24, Z
 14e:	48 0f       	add	r20, r24
 150:	40 83       	st	Z, r20
				break;
 152:	08 95       	ret
					lcddr += 5;
					lcdReg = lcdReg + 0x1 * lr;
				break;
				
				case '6':
					lcdReg = lcdReg + 0x1 * lr;
 154:	f9 01       	movw	r30, r18
 156:	e4 51       	subi	r30, 0x14	; 20
 158:	ff 4f       	sbci	r31, 0xFF	; 255
 15a:	80 81       	ld	r24, Z
 15c:	84 0f       	add	r24, r20
 15e:	80 83       	st	Z, r24
					lcddr += 5;
					lcdReg = lcdReg + 0x4 * lr;
 160:	35 96       	adiw	r30, 0x05	; 5
 162:	80 81       	ld	r24, Z
 164:	94 2f       	mov	r25, r20
 166:	99 0f       	add	r25, r25
 168:	99 0f       	add	r25, r25
 16a:	e2 cf       	rjmp	.-60     	; 0x130 <writeChar+0x66>
					lcddr += 5;
					lcdReg = lcdReg + 0x0 * lr;
				break;
				
				case '5':
					lcdReg = lcdReg + 0x1 * lr;
 16c:	f9 01       	movw	r30, r18
 16e:	e4 51       	subi	r30, 0x14	; 20
 170:	ff 4f       	sbci	r31, 0xFF	; 255
 172:	80 81       	ld	r24, Z
 174:	84 0f       	add	r24, r20
 176:	80 83       	st	Z, r24
					lcddr += 5;
					lcdReg = lcdReg + 0x4 * lr;
 178:	35 96       	adiw	r30, 0x05	; 5
 17a:	80 81       	ld	r24, Z
 17c:	94 2f       	mov	r25, r20
 17e:	99 0f       	add	r25, r25
 180:	99 0f       	add	r25, r25
 182:	89 0f       	add	r24, r25
 184:	80 83       	st	Z, r24
					lcddr += 5;
					lcdReg = lcdReg + 0xB * lr;
 186:	35 96       	adiw	r30, 0x05	; 5
 188:	50 81       	ld	r21, Z
 18a:	84 2f       	mov	r24, r20
 18c:	88 0f       	add	r24, r24
 18e:	98 2f       	mov	r25, r24
 190:	99 0f       	add	r25, r25
 192:	99 0f       	add	r25, r25
 194:	89 0f       	add	r24, r25
 196:	84 0f       	add	r24, r20
 198:	85 0f       	add	r24, r21
				case '8':
					lcdReg = lcdReg + 0x1 * lr;
					lcddr += 5;
					lcdReg = lcdReg + 0x5 * lr;
					lcddr += 5;
					lcdReg = lcdReg + 0xF * lr;
 19a:	80 83       	st	Z, r24
					lcddr += 5;
					lcdReg = lcdReg + 0x1 * lr;
 19c:	35 96       	adiw	r30, 0x05	; 5
 19e:	80 81       	ld	r24, Z
 1a0:	48 0f       	add	r20, r24
 1a2:	40 83       	st	Z, r20
				break;
 1a4:	08 95       	ret
					lcddr += 5;
					lcdReg = lcdReg + 0x1 * lr;
				break;
				
				case '4':
					lcdReg = lcdReg + 0x0 * lr;
 1a6:	f9 01       	movw	r30, r18
 1a8:	e4 51       	subi	r30, 0x14	; 20
 1aa:	ff 4f       	sbci	r31, 0xFF	; 255
 1ac:	80 81       	ld	r24, Z
 1ae:	80 83       	st	Z, r24
					lcddr += 5;
					lcdReg = lcdReg + 0x5 * lr;
 1b0:	35 96       	adiw	r30, 0x05	; 5
 1b2:	90 81       	ld	r25, Z
 1b4:	84 2f       	mov	r24, r20
 1b6:	88 0f       	add	r24, r24
 1b8:	88 0f       	add	r24, r24
 1ba:	84 0f       	add	r24, r20
 1bc:	89 0f       	add	r24, r25
 1be:	80 83       	st	Z, r24
					lcddr += 5;
					lcdReg = lcdReg + 0xB * lr;
 1c0:	35 96       	adiw	r30, 0x05	; 5
 1c2:	90 81       	ld	r25, Z
 1c4:	54 2f       	mov	r21, r20
 1c6:	55 0f       	add	r21, r21
 1c8:	85 2f       	mov	r24, r21
 1ca:	88 0f       	add	r24, r24
 1cc:	88 0f       	add	r24, r24
 1ce:	85 0f       	add	r24, r21
 1d0:	48 0f       	add	r20, r24
 1d2:	49 0f       	add	r20, r25
 1d4:	40 83       	st	Z, r20
					lcddr += 5;
					lcdReg = lcdReg + 0x0 * lr;
 1d6:	35 96       	adiw	r30, 0x05	; 5
 1d8:	80 81       	ld	r24, Z
 1da:	80 83       	st	Z, r24
				break;
 1dc:	08 95       	ret
					lcddr += 5;
					lcdReg = lcdReg + 0x1 * lr;
				break;
				
				case '3':
					lcdReg = lcdReg + 0x1 * lr;
 1de:	f9 01       	movw	r30, r18
 1e0:	e4 51       	subi	r30, 0x14	; 20
 1e2:	ff 4f       	sbci	r31, 0xFF	; 255
 1e4:	80 81       	ld	r24, Z
 1e6:	84 0f       	add	r24, r20
 1e8:	80 83       	st	Z, r24
					lcddr += 5;
					lcdReg = lcdReg + 0x1 * lr;
 1ea:	35 96       	adiw	r30, 0x05	; 5
 1ec:	80 81       	ld	r24, Z
 1ee:	84 0f       	add	r24, r20
 1f0:	c9 cf       	rjmp	.-110    	; 0x184 <writeChar+0xba>
					lcddr += 5;
					lcdReg = lcdReg + 0x0 * lr;
				break;
				
				case '2':
					lcdReg = lcdReg + 0x1 * lr;
 1f2:	f9 01       	movw	r30, r18
 1f4:	e4 51       	subi	r30, 0x14	; 20
 1f6:	ff 4f       	sbci	r31, 0xFF	; 255
 1f8:	80 81       	ld	r24, Z
 1fa:	84 0f       	add	r24, r20
 1fc:	80 83       	st	Z, r24
					lcddr += 5;
					lcdReg = lcdReg + 0x1 * lr;
 1fe:	35 96       	adiw	r30, 0x05	; 5
 200:	80 81       	ld	r24, Z
 202:	84 0f       	add	r24, r20
 204:	80 83       	st	Z, r24
					lcddr += 5;
					lcdReg = lcdReg + 0xE * lr;
 206:	35 96       	adiw	r30, 0x05	; 5
 208:	80 81       	ld	r24, Z
 20a:	9e e0       	ldi	r25, 0x0E	; 14
 20c:	49 9f       	mul	r20, r25
 20e:	80 0d       	add	r24, r0
 210:	11 24       	eor	r1, r1
 212:	9a cf       	rjmp	.-204    	; 0x148 <writeChar+0x7e>
					lcddr += 5;
					lcdReg = lcdReg + 0x1 * lr;
				break;
				
				case '1':
					lcdReg = lcdReg + 0x0 * lr;
 214:	f9 01       	movw	r30, r18
 216:	e4 51       	subi	r30, 0x14	; 20
 218:	ff 4f       	sbci	r31, 0xFF	; 255
 21a:	80 81       	ld	r24, Z
 21c:	6e cf       	rjmp	.-292    	; 0xfa <writeChar+0x30>
		if (ch >= 0 || ch <= 9){
			
			switch (ch)
			{
				case '0':
					lcdReg = lcdReg + 0x1 * lr;
 21e:	f9 01       	movw	r30, r18
 220:	e4 51       	subi	r30, 0x14	; 20
 222:	ff 4f       	sbci	r31, 0xFF	; 255
 224:	80 81       	ld	r24, Z
 226:	84 0f       	add	r24, r20
 228:	80 83       	st	Z, r24
					lcddr += 5;
					lcdReg = lcdReg + 0x5 * lr;
 22a:	35 96       	adiw	r30, 0x05	; 5
 22c:	90 81       	ld	r25, Z
 22e:	84 2f       	mov	r24, r20
 230:	88 0f       	add	r24, r24
 232:	88 0f       	add	r24, r24
 234:	84 0f       	add	r24, r20
 236:	98 0f       	add	r25, r24
 238:	90 83       	st	Z, r25
					lcddr += 5;
					lcdReg = lcdReg + 0x5 * lr;
 23a:	35 96       	adiw	r30, 0x05	; 5
 23c:	90 81       	ld	r25, Z
 23e:	83 cf       	rjmp	.-250    	; 0x146 <writeChar+0x7c>
					lcddr += 5;
					lcdReg = lcdReg + 0x1 * lr;
				break;
				
				case '9':
					lcdReg = lcdReg + 0x1 * lr;
 240:	f9 01       	movw	r30, r18
 242:	e4 51       	subi	r30, 0x14	; 20
 244:	ff 4f       	sbci	r31, 0xFF	; 255
 246:	80 81       	ld	r24, Z
 248:	84 0f       	add	r24, r20
 24a:	80 83       	st	Z, r24
					lcddr += 5;
					lcdReg = lcdReg + 0x5 * lr;
 24c:	35 96       	adiw	r30, 0x05	; 5
 24e:	90 81       	ld	r25, Z
 250:	84 2f       	mov	r24, r20
 252:	88 0f       	add	r24, r24
 254:	88 0f       	add	r24, r24
 256:	84 0f       	add	r24, r20
 258:	89 0f       	add	r24, r25
 25a:	80 83       	st	Z, r24
					lcddr += 5;
					lcdReg = lcdReg + 0xB * lr;
 25c:	35 96       	adiw	r30, 0x05	; 5
 25e:	80 81       	ld	r24, Z
 260:	54 2f       	mov	r21, r20
 262:	55 0f       	add	r21, r21
 264:	95 2f       	mov	r25, r21
 266:	99 0f       	add	r25, r25
 268:	99 0f       	add	r25, r25
 26a:	95 0f       	add	r25, r21
 26c:	49 0f       	add	r20, r25
 26e:	4c cf       	rjmp	.-360    	; 0x108 <writeChar+0x3e>

00000270 <writeLong>:
	else{
		return;
	}
}

void writeLong(long i){
 270:	8f 92       	push	r8
 272:	9f 92       	push	r9
 274:	af 92       	push	r10
 276:	bf 92       	push	r11
 278:	ef 92       	push	r14
 27a:	ff 92       	push	r15
 27c:	0f 93       	push	r16
 27e:	1f 93       	push	r17
 280:	cf 93       	push	r28
 282:	df 93       	push	r29
 284:	7b 01       	movw	r14, r22
 286:	8c 01       	movw	r16, r24
	for (int n = 5; n >= 0; n--) {
 288:	c5 e0       	ldi	r28, 0x05	; 5
 28a:	d0 e0       	ldi	r29, 0x00	; 0
		char ch = (i % 10) + '0';
 28c:	8a e0       	ldi	r24, 0x0A	; 10
 28e:	88 2e       	mov	r8, r24
 290:	91 2c       	mov	r9, r1
 292:	a1 2c       	mov	r10, r1
 294:	b1 2c       	mov	r11, r1
 296:	b7 01       	movw	r22, r14
 298:	c8 01       	movw	r24, r16
 29a:	a5 01       	movw	r20, r10
 29c:	94 01       	movw	r18, r8
 29e:	0e 94 65 01 	call	0x2ca	; 0x2ca <__divmodsi4>
 2a2:	86 2f       	mov	r24, r22
		i /= 10;
 2a4:	79 01       	movw	r14, r18
 2a6:	8a 01       	movw	r16, r20
		writeChar(ch, n);
 2a8:	be 01       	movw	r22, r28
 2aa:	80 5d       	subi	r24, 0xD0	; 208
 2ac:	0e 94 65 00 	call	0xca	; 0xca <writeChar>
		return;
	}
}

void writeLong(long i){
	for (int n = 5; n >= 0; n--) {
 2b0:	21 97       	sbiw	r28, 0x01	; 1
 2b2:	88 f7       	brcc	.-30     	; 0x296 <writeLong+0x26>
		char ch = (i % 10) + '0';
		i /= 10;
		writeChar(ch, n);
	}
}
 2b4:	df 91       	pop	r29
 2b6:	cf 91       	pop	r28
 2b8:	1f 91       	pop	r17
 2ba:	0f 91       	pop	r16
 2bc:	ff 90       	pop	r15
 2be:	ef 90       	pop	r14
 2c0:	bf 90       	pop	r11
 2c2:	af 90       	pop	r10
 2c4:	9f 90       	pop	r9
 2c6:	8f 90       	pop	r8
 2c8:	08 95       	ret

000002ca <__divmodsi4>:
 2ca:	05 2e       	mov	r0, r21
 2cc:	97 fb       	bst	r25, 7
 2ce:	1e f4       	brtc	.+6      	; 0x2d6 <__divmodsi4+0xc>
 2d0:	00 94       	com	r0
 2d2:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <__negsi2>
 2d6:	57 fd       	sbrc	r21, 7
 2d8:	07 d0       	rcall	.+14     	; 0x2e8 <__divmodsi4_neg2>
 2da:	0e 94 8a 01 	call	0x314	; 0x314 <__udivmodsi4>
 2de:	07 fc       	sbrc	r0, 7
 2e0:	03 d0       	rcall	.+6      	; 0x2e8 <__divmodsi4_neg2>
 2e2:	4e f4       	brtc	.+18     	; 0x2f6 <__divmodsi4_exit>
 2e4:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__negsi2>

000002e8 <__divmodsi4_neg2>:
 2e8:	50 95       	com	r21
 2ea:	40 95       	com	r20
 2ec:	30 95       	com	r19
 2ee:	21 95       	neg	r18
 2f0:	3f 4f       	sbci	r19, 0xFF	; 255
 2f2:	4f 4f       	sbci	r20, 0xFF	; 255
 2f4:	5f 4f       	sbci	r21, 0xFF	; 255

000002f6 <__divmodsi4_exit>:
 2f6:	08 95       	ret

000002f8 <__negsi2>:
 2f8:	90 95       	com	r25
 2fa:	80 95       	com	r24
 2fc:	70 95       	com	r23
 2fe:	61 95       	neg	r22
 300:	7f 4f       	sbci	r23, 0xFF	; 255
 302:	8f 4f       	sbci	r24, 0xFF	; 255
 304:	9f 4f       	sbci	r25, 0xFF	; 255
 306:	08 95       	ret

00000308 <__tablejump2__>:
 308:	ee 0f       	add	r30, r30
 30a:	ff 1f       	adc	r31, r31
 30c:	05 90       	lpm	r0, Z+
 30e:	f4 91       	lpm	r31, Z
 310:	e0 2d       	mov	r30, r0
 312:	09 94       	ijmp

00000314 <__udivmodsi4>:
 314:	a1 e2       	ldi	r26, 0x21	; 33
 316:	1a 2e       	mov	r1, r26
 318:	aa 1b       	sub	r26, r26
 31a:	bb 1b       	sub	r27, r27
 31c:	fd 01       	movw	r30, r26
 31e:	0d c0       	rjmp	.+26     	; 0x33a <__udivmodsi4_ep>

00000320 <__udivmodsi4_loop>:
 320:	aa 1f       	adc	r26, r26
 322:	bb 1f       	adc	r27, r27
 324:	ee 1f       	adc	r30, r30
 326:	ff 1f       	adc	r31, r31
 328:	a2 17       	cp	r26, r18
 32a:	b3 07       	cpc	r27, r19
 32c:	e4 07       	cpc	r30, r20
 32e:	f5 07       	cpc	r31, r21
 330:	20 f0       	brcs	.+8      	; 0x33a <__udivmodsi4_ep>
 332:	a2 1b       	sub	r26, r18
 334:	b3 0b       	sbc	r27, r19
 336:	e4 0b       	sbc	r30, r20
 338:	f5 0b       	sbc	r31, r21

0000033a <__udivmodsi4_ep>:
 33a:	66 1f       	adc	r22, r22
 33c:	77 1f       	adc	r23, r23
 33e:	88 1f       	adc	r24, r24
 340:	99 1f       	adc	r25, r25
 342:	1a 94       	dec	r1
 344:	69 f7       	brne	.-38     	; 0x320 <__udivmodsi4_loop>
 346:	60 95       	com	r22
 348:	70 95       	com	r23
 34a:	80 95       	com	r24
 34c:	90 95       	com	r25
 34e:	9b 01       	movw	r18, r22
 350:	ac 01       	movw	r20, r24
 352:	bd 01       	movw	r22, r26
 354:	cf 01       	movw	r24, r30
 356:	08 95       	ret

00000358 <_exit>:
 358:	f8 94       	cli

0000035a <__stop_program>:
 35a:	ff cf       	rjmp	.-2      	; 0x35a <__stop_program>
