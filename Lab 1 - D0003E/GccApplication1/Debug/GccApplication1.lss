
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00000250  000002c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000250  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000308  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000348  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b7e  00000000  00000000  000003a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000098d  00000000  00000000  00000f26  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003fa  00000000  00000000  000018b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000015c  00000000  00000000  00001cb0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000046d  00000000  00000000  00001e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000553  00000000  00000000  00002279  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  000027cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
   8:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
   c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  10:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  14:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  18:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  1c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  20:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  24:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  28:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  2c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  30:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  34:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  38:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  3c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  40:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  44:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  48:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  4c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  50:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  54:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  58:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	e0 e5       	ldi	r30, 0x50	; 80
  70:	f2 e0       	ldi	r31, 0x02	; 2
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	a4 31       	cpi	r26, 0x14	; 20
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>
  7e:	0e 94 45 00 	call	0x8a	; 0x8a <main>
  82:	0c 94 26 01 	jmp	0x24c	; 0x24c <_exit>

00000086 <__bad_interrupt>:
  86:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008a <main>:
#include "myFunctionsInclude.h"
#include <math.h>

int main(void)
{
    CLKPR = 0x80;
  8a:	e1 e6       	ldi	r30, 0x61	; 97
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	80 e8       	ldi	r24, 0x80	; 128
  90:	80 83       	st	Z, r24
	CLKPR = 0x00;
  92:	10 82       	st	Z, r1
	LCD_Init();
  94:	0e 94 55 00 	call	0xaa	; 0xaa <LCD_Init>
	//writeChar('6', 5);
	writeLong(1111800815);
  98:	6f ee       	ldi	r22, 0xEF	; 239
  9a:	7b eb       	ldi	r23, 0xBB	; 187
  9c:	84 e4       	ldi	r24, 0x44	; 68
  9e:	92 e4       	ldi	r25, 0x42	; 66
  a0:	0e 94 b8 00 	call	0x170	; 0x170 <writeLong>
	//prime();
}
  a4:	80 e0       	ldi	r24, 0x00	; 0
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	08 95       	ret

000000aa <LCD_Init>:
		LCDCS    - Asynchronous clock source
		LCDMUX's - Duty = 1/4, Bias = 1/3
		LCDPM's  - Number of Segments = 25
	*/
	
	LCDCRB = (1 << LCDCS) | (1 << LCDMUX1) | (1 << LCDMUX0) | (1 << LCDPM2) | (1 << LCDPM1) | (1 << LCDPM0);
  aa:	87 eb       	ldi	r24, 0xB7	; 183
  ac:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
	/*
		LCD Frame Rate Register:
		LCDCD's - Prescaler setting N = 16
	*/
	
	LCDFRR = (1 << LCDCD2) | (1 << LCDCD1) | (1 << LCDCD0);
  b0:	87 e0       	ldi	r24, 0x07	; 7
  b2:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>
		LCD Contrast Control Register
		None of the LCDDC's used = 300 microseconds
		LCDCC's = 3,35V
	*/
	
	LCDCCR = (1 << LCDCC3) | (1 << LCDCC2) | (1 << LCDCC1) | (1 << LCDCC0);
  b6:	8f e0       	ldi	r24, 0x0F	; 15
  b8:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
	
	/*
		LCDEN = LCD Enabled
		LCDAB = Low Power Waveform
	*/
	LCDCRA = (1 << LCDEN) | (1 << LCDAB);
  bc:	80 ec       	ldi	r24, 0xC0	; 192
  be:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
  c2:	08 95       	ret

000000c4 <writeChar>:
}

void writeChar(char ch, int pos)
{ 
  c4:	0f 93       	push	r16
  c6:	1f 93       	push	r17
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
  d0:	64 97       	sbiw	r28, 0x14	; 20
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	f8 94       	cli
  d6:	de bf       	out	0x3e, r29	; 62
  d8:	0f be       	out	0x3f, r0	; 63
  da:	cd bf       	out	0x3d, r28	; 61
	if(pos >= 0 && pos <= 5){
  dc:	66 30       	cpi	r22, 0x06	; 6
  de:	71 05       	cpc	r23, r1
  e0:	d0 f5       	brcc	.+116    	; 0x156 <writeChar+0x92>
		if (ch >= '0' || ch <= '9'){
			
			int pair = pos / 2;					      // Make sure it's either pair 0,1 - 2,3 or 4,5
  e2:	8b 01       	movw	r16, r22
  e4:	15 95       	asr	r17
  e6:	07 95       	ror	r16
			char lcddr = 0xEC;						  // Register position for LCDDR0 is 0xEC
			#define lcdReg _SFR_MEM8(lcddr + pair)    // Register position for LCDDR0 + 0,1 or 2 to determine whether it's LCCDR0, LCCDR1 or LCDDR2 we are going to print in
		
			// All the numbers
			// 0 - 0x1551, 1 - 0x0110, 2 - 0x1E11, 3 - 0x1B11, 4 - 0x0B50, 5 - 0x1B41, 6 - 0x1F41, 7 - 0x0111, 8 - 0x1F51, 9 - 0x0B51
			uint16_t scc[10] = {0x1551, 0x0110, 0x1E11, 0x1B11, 0x0B50, 0x1B41, 0x1F41, 0x0111, 0x1F51, 0x0B51};
  e8:	94 e1       	ldi	r25, 0x14	; 20
  ea:	e0 e0       	ldi	r30, 0x00	; 0
  ec:	f1 e0       	ldi	r31, 0x01	; 1
  ee:	de 01       	movw	r26, r28
  f0:	11 96       	adiw	r26, 0x01	; 1
  f2:	01 90       	ld	r0, Z+
  f4:	0d 92       	st	X+, r0
  f6:	9a 95       	dec	r25
  f8:	e1 f7       	brne	.-8      	; 0xf2 <writeChar+0x2e>
			
			// Check if we want 
			
			if (pos % 2 == 0){
  fa:	db 01       	movw	r26, r22
  fc:	a1 70       	andi	r26, 0x01	; 1
  fe:	bb 27       	eor	r27, r27
 100:	60 ff       	sbrs	r22, 0
 102:	34 c0       	rjmp	.+104    	; 0x16c <writeChar+0xa8>
 104:	3f e0       	ldi	r19, 0x0F	; 15
		
			else {
				lr = 0xF;
			}
			
			uint16_t num = scc[ch - '0'];
 106:	e8 2f       	mov	r30, r24
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	f0 97       	sbiw	r30, 0x30	; 48
 10c:	ee 0f       	add	r30, r30
 10e:	ff 1f       	adc	r31, r31
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	8c 0f       	add	r24, r28
 116:	9d 1f       	adc	r25, r29
 118:	e8 0f       	add	r30, r24
 11a:	f9 1f       	adc	r31, r25
 11c:	40 81       	ld	r20, Z
 11e:	51 81       	ldd	r21, Z+1	; 0x01
		if (ch >= '0' || ch <= '9'){
			
			int pair = pos / 2;					      // Make sure it's either pair 0,1 - 2,3 or 4,5
			int lr;								      // left or right
			
			char lcddr = 0xEC;						  // Register position for LCDDR0 is 0xEC
 120:	2c ee       	ldi	r18, 0xEC	; 236
			}
			
			uint16_t num = scc[ch - '0'];
			
			for (int i = 0; i < 4; i++) {
				int nibble = num & 0xF;
 122:	ca 01       	movw	r24, r20
 124:	8f 70       	andi	r24, 0x0F	; 15
 126:	99 27       	eor	r25, r25
				num = num >> 4;
 128:	52 95       	swap	r21
 12a:	42 95       	swap	r20
 12c:	4f 70       	andi	r20, 0x0F	; 15
 12e:	45 27       	eor	r20, r21
 130:	5f 70       	andi	r21, 0x0F	; 15
 132:	45 27       	eor	r20, r21
				
				if(pos % 2 != 0) {
 134:	10 97       	sbiw	r26, 0x00	; 0
 136:	31 f0       	breq	.+12     	; 0x144 <writeChar+0x80>
					nibble = nibble << 4;
 138:	82 95       	swap	r24
 13a:	92 95       	swap	r25
 13c:	90 7f       	andi	r25, 0xF0	; 240
 13e:	98 27       	eor	r25, r24
 140:	80 7f       	andi	r24, 0xF0	; 240
 142:	98 27       	eor	r25, r24
				}
				
				lcdReg = (lcdReg & lr) | nibble;
 144:	f8 01       	movw	r30, r16
 146:	e2 0f       	add	r30, r18
 148:	f1 1d       	adc	r31, r1
 14a:	90 81       	ld	r25, Z
 14c:	93 23       	and	r25, r19
 14e:	89 2b       	or	r24, r25
 150:	80 83       	st	Z, r24
				lcddr += 5;
 152:	2b 5f       	subi	r18, 0xFB	; 251
				lr = 0xF;
			}
			
			uint16_t num = scc[ch - '0'];
			
			for (int i = 0; i < 4; i++) {
 154:	31 f7       	brne	.-52     	; 0x122 <writeChar+0x5e>
	}
	
	else{
		return;
	}
}
 156:	64 96       	adiw	r28, 0x14	; 20
 158:	0f b6       	in	r0, 0x3f	; 63
 15a:	f8 94       	cli
 15c:	de bf       	out	0x3e, r29	; 62
 15e:	0f be       	out	0x3f, r0	; 63
 160:	cd bf       	out	0x3d, r28	; 61
 162:	df 91       	pop	r29
 164:	cf 91       	pop	r28
 166:	1f 91       	pop	r17
 168:	0f 91       	pop	r16
 16a:	08 95       	ret
			// 0 - 0x1551, 1 - 0x0110, 2 - 0x1E11, 3 - 0x1B11, 4 - 0x0B50, 5 - 0x1B41, 6 - 0x1F41, 7 - 0x0111, 8 - 0x1F51, 9 - 0x0B51
			uint16_t scc[10] = {0x1551, 0x0110, 0x1E11, 0x1B11, 0x0B50, 0x1B41, 0x1F41, 0x0111, 0x1F51, 0x0B51};
			
			// Check if we want 
			
			if (pos % 2 == 0){
 16c:	30 ef       	ldi	r19, 0xF0	; 240
 16e:	cb cf       	rjmp	.-106    	; 0x106 <writeChar+0x42>

00000170 <writeLong>:
	else{
		return;
	}
}

void writeLong(long i){
 170:	8f 92       	push	r8
 172:	9f 92       	push	r9
 174:	af 92       	push	r10
 176:	bf 92       	push	r11
 178:	ef 92       	push	r14
 17a:	ff 92       	push	r15
 17c:	0f 93       	push	r16
 17e:	1f 93       	push	r17
 180:	cf 93       	push	r28
 182:	df 93       	push	r29
 184:	7b 01       	movw	r14, r22
 186:	8c 01       	movw	r16, r24
	for (int n = 5; n >= 0; n--) {
 188:	c5 e0       	ldi	r28, 0x05	; 5
 18a:	d0 e0       	ldi	r29, 0x00	; 0
		char ch = (i % 10) + '0';
 18c:	8a e0       	ldi	r24, 0x0A	; 10
 18e:	88 2e       	mov	r8, r24
 190:	91 2c       	mov	r9, r1
 192:	a1 2c       	mov	r10, r1
 194:	b1 2c       	mov	r11, r1
 196:	b7 01       	movw	r22, r14
 198:	c8 01       	movw	r24, r16
 19a:	a5 01       	movw	r20, r10
 19c:	94 01       	movw	r18, r8
 19e:	0e 94 e5 00 	call	0x1ca	; 0x1ca <__divmodsi4>
 1a2:	86 2f       	mov	r24, r22
		i /= 10;
 1a4:	79 01       	movw	r14, r18
 1a6:	8a 01       	movw	r16, r20
		writeChar(ch, n);
 1a8:	be 01       	movw	r22, r28
 1aa:	80 5d       	subi	r24, 0xD0	; 208
 1ac:	0e 94 62 00 	call	0xc4	; 0xc4 <writeChar>
		return;
	}
}

void writeLong(long i){
	for (int n = 5; n >= 0; n--) {
 1b0:	21 97       	sbiw	r28, 0x01	; 1
 1b2:	88 f7       	brcc	.-30     	; 0x196 <writeLong+0x26>
		char ch = (i % 10) + '0';
		i /= 10;
		writeChar(ch, n);
	}
}
 1b4:	df 91       	pop	r29
 1b6:	cf 91       	pop	r28
 1b8:	1f 91       	pop	r17
 1ba:	0f 91       	pop	r16
 1bc:	ff 90       	pop	r15
 1be:	ef 90       	pop	r14
 1c0:	bf 90       	pop	r11
 1c2:	af 90       	pop	r10
 1c4:	9f 90       	pop	r9
 1c6:	8f 90       	pop	r8
 1c8:	08 95       	ret

000001ca <__divmodsi4>:
 1ca:	05 2e       	mov	r0, r21
 1cc:	97 fb       	bst	r25, 7
 1ce:	1e f4       	brtc	.+6      	; 0x1d6 <__divmodsi4+0xc>
 1d0:	00 94       	com	r0
 1d2:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <__negsi2>
 1d6:	57 fd       	sbrc	r21, 7
 1d8:	07 d0       	rcall	.+14     	; 0x1e8 <__divmodsi4_neg2>
 1da:	0e 94 04 01 	call	0x208	; 0x208 <__udivmodsi4>
 1de:	07 fc       	sbrc	r0, 7
 1e0:	03 d0       	rcall	.+6      	; 0x1e8 <__divmodsi4_neg2>
 1e2:	4e f4       	brtc	.+18     	; 0x1f6 <__divmodsi4_exit>
 1e4:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__negsi2>

000001e8 <__divmodsi4_neg2>:
 1e8:	50 95       	com	r21
 1ea:	40 95       	com	r20
 1ec:	30 95       	com	r19
 1ee:	21 95       	neg	r18
 1f0:	3f 4f       	sbci	r19, 0xFF	; 255
 1f2:	4f 4f       	sbci	r20, 0xFF	; 255
 1f4:	5f 4f       	sbci	r21, 0xFF	; 255

000001f6 <__divmodsi4_exit>:
 1f6:	08 95       	ret

000001f8 <__negsi2>:
 1f8:	90 95       	com	r25
 1fa:	80 95       	com	r24
 1fc:	70 95       	com	r23
 1fe:	61 95       	neg	r22
 200:	7f 4f       	sbci	r23, 0xFF	; 255
 202:	8f 4f       	sbci	r24, 0xFF	; 255
 204:	9f 4f       	sbci	r25, 0xFF	; 255
 206:	08 95       	ret

00000208 <__udivmodsi4>:
 208:	a1 e2       	ldi	r26, 0x21	; 33
 20a:	1a 2e       	mov	r1, r26
 20c:	aa 1b       	sub	r26, r26
 20e:	bb 1b       	sub	r27, r27
 210:	fd 01       	movw	r30, r26
 212:	0d c0       	rjmp	.+26     	; 0x22e <__udivmodsi4_ep>

00000214 <__udivmodsi4_loop>:
 214:	aa 1f       	adc	r26, r26
 216:	bb 1f       	adc	r27, r27
 218:	ee 1f       	adc	r30, r30
 21a:	ff 1f       	adc	r31, r31
 21c:	a2 17       	cp	r26, r18
 21e:	b3 07       	cpc	r27, r19
 220:	e4 07       	cpc	r30, r20
 222:	f5 07       	cpc	r31, r21
 224:	20 f0       	brcs	.+8      	; 0x22e <__udivmodsi4_ep>
 226:	a2 1b       	sub	r26, r18
 228:	b3 0b       	sbc	r27, r19
 22a:	e4 0b       	sbc	r30, r20
 22c:	f5 0b       	sbc	r31, r21

0000022e <__udivmodsi4_ep>:
 22e:	66 1f       	adc	r22, r22
 230:	77 1f       	adc	r23, r23
 232:	88 1f       	adc	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	1a 94       	dec	r1
 238:	69 f7       	brne	.-38     	; 0x214 <__udivmodsi4_loop>
 23a:	60 95       	com	r22
 23c:	70 95       	com	r23
 23e:	80 95       	com	r24
 240:	90 95       	com	r25
 242:	9b 01       	movw	r18, r22
 244:	ac 01       	movw	r20, r24
 246:	bd 01       	movw	r22, r26
 248:	cf 01       	movw	r24, r30
 24a:	08 95       	ret

0000024c <_exit>:
 24c:	f8 94       	cli

0000024e <__stop_program>:
 24e:	ff cf       	rjmp	.-2      	; 0x24e <__stop_program>
