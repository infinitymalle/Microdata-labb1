
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
<<<<<<< HEAD
  0 .data         00000014  00800100  00000244  000002b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000244  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002fc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ce5  00000000  00000000  000003b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009d1  00000000  00000000  00001099  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000068f  00000000  00000000  00001a6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000180  00000000  00000000  000020fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004a4  00000000  00000000  0000227c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000090d  00000000  00000000  00002720  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000160  00000000  00000000  0000302d  2**0
=======
  0 .data         00000000  00800100  00800100  0000013a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000013a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000016c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000beb  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009ba  00000000  00000000  00000e07  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004cc  00000000  00000000  000017c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000016c  00000000  00000000  00001c90  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000493  00000000  00000000  00001dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000653  00000000  00000000  0000228f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f8  00000000  00000000  000028e2  2**0
>>>>>>> 852b5caa7680a3656aa5d4ad958a6739d0634f1d
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
   8:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
   c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  10:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  14:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  18:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  1c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  20:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  24:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  28:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  2c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  30:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  34:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  38:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  3c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  40:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  44:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  48:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  4c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  50:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  54:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  58:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
<<<<<<< HEAD
  6e:	e4 e4       	ldi	r30, 0x44	; 68
  70:	f2 e0       	ldi	r31, 0x02	; 2
=======
  6e:	e6 ee       	ldi	r30, 0xE6	; 230
  70:	f0 e0       	ldi	r31, 0x00	; 0
>>>>>>> 852b5caa7680a3656aa5d4ad958a6739d0634f1d
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	a4 31       	cpi	r26, 0x14	; 20
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>
  7e:	0e 94 45 00 	call	0x8a	; 0x8a <main>
<<<<<<< HEAD
  82:	0c 94 20 01 	jmp	0x240	; 0x240 <_exit>
=======
  82:	0c 94 71 00 	jmp	0xe2	; 0xe2 <_exit>
>>>>>>> 852b5caa7680a3656aa5d4ad958a6739d0634f1d

00000086 <__bad_interrupt>:
  86:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008a <main>:
#include "myFunctionsInclude.h"
#include <math.h>

int main(void)
{
    CLKPR = 0x80;
  8a:	e1 e6       	ldi	r30, 0x61	; 97
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	80 e8       	ldi	r24, 0x80	; 128
  90:	80 83       	st	Z, r24
	CLKPR = 0x00;
  92:	10 82       	st	Z, r1
	LCD_Init();
  94:	0e 94 55 00 	call	0xaa	; 0xaa <LCD_Init>
	//writeChar('6', 3);
	writeLong(1111800815);
  98:	6f ee       	ldi	r22, 0xEF	; 239
  9a:	7b eb       	ldi	r23, 0xBB	; 187
  9c:	84 e4       	ldi	r24, 0x44	; 68
  9e:	92 e4       	ldi	r25, 0x42	; 66
  a0:	0e 94 b2 00 	call	0x164	; 0x164 <writeLong>
	//prime();
	//blink();
<<<<<<< HEAD
	//button();
	//part4();
=======
	button();
  98:	0e 94 5e 00 	call	0xbc	; 0xbc <button>
>>>>>>> 852b5caa7680a3656aa5d4ad958a6739d0634f1d
}
  a4:	80 e0       	ldi	r24, 0x00	; 0
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	08 95       	ret

<<<<<<< HEAD
000000aa <LCD_Init>:
		LCDCS    - Asynchronous clock source
		LCDMUX's - Duty = 1/4, Bias = 1/3
		LCDPM's  - Number of Segments = 25
	*/
	
	LCDCRB = (1 << LCDCS) | (1 << LCDMUX1) | (1 << LCDMUX0) | (1 << LCDPM2) | (1 << LCDPM1) | (1 << LCDPM0);
  aa:	87 eb       	ldi	r24, 0xB7	; 183
  ac:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
	/*
		LCD Frame Rate Register:
		LCDCD's - Prescaler setting N = 16
	*/
	
	LCDFRR = (1 << LCDCD2) | (1 << LCDCD1) | (1 << LCDCD0);
  b0:	87 e0       	ldi	r24, 0x07	; 7
  b2:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>
		LCD Contrast Control Register
		None of the LCDDC's used = 300 microseconds
		LCDCC's = 3,35V
	*/
	
	LCDCCR = (1 << LCDCC3) | (1 << LCDCC2) | (1 << LCDCC1) | (1 << LCDCC0);
  b6:	8f e0       	ldi	r24, 0x0F	; 15
  b8:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
	
	/*
		LCDEN = LCD Enabled
		LCDAB = Low Power Waveform
	*/
	LCDCRA = (1 << LCDEN) | (1 << LCDAB);
  bc:	80 ec       	ldi	r24, 0xC0	; 192
  be:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
  c2:	08 95       	ret

000000c4 <writeChar>:
}

void writeChar(char ch, int pos)
{ 
  c4:	cf 93       	push	r28
  c6:	df 93       	push	r29
  c8:	cd b7       	in	r28, 0x3d	; 61
  ca:	de b7       	in	r29, 0x3e	; 62
  cc:	64 97       	sbiw	r28, 0x14	; 20
  ce:	0f b6       	in	r0, 0x3f	; 63
  d0:	f8 94       	cli
  d2:	de bf       	out	0x3e, r29	; 62
  d4:	0f be       	out	0x3f, r0	; 63
  d6:	cd bf       	out	0x3d, r28	; 61
	// All the numbers
	// 0 - 0x1551, 1 - 0x0110, 2 - 0x1E11, 3 - 0x1B11, 4 - 0x0B50, 5 - 0x1B41, 6 - 0x1F41, 7 - 0x0111, 8 - 0x1F51, 9 - 0x0B51
	uint16_t scc[] = {0x1551, 0x0110, 0x1E11, 0x1B11, 0x0B50, 0x1B41, 0x1F41, 0x0111, 0x1F51, 0x0B51};
  d8:	94 e1       	ldi	r25, 0x14	; 20
  da:	e0 e0       	ldi	r30, 0x00	; 0
  dc:	f1 e0       	ldi	r31, 0x01	; 1
  de:	de 01       	movw	r26, r28
  e0:	11 96       	adiw	r26, 0x01	; 1
  e2:	01 90       	ld	r0, Z+
  e4:	0d 92       	st	X+, r0
  e6:	9a 95       	dec	r25
  e8:	e1 f7       	brne	.-8      	; 0xe2 <writeChar+0x1e>
		
	if(pos >= 0 && pos <= 5){
  ea:	66 30       	cpi	r22, 0x06	; 6
  ec:	71 05       	cpc	r23, r1
  ee:	50 f5       	brcc	.+84     	; 0x144 <writeChar+0x80>
		if (ch >= '0' || ch <= '9'){
			
			int pair = pos / 2;					      // Make sure it's either pair 0,1 - 2,3 or 4,5
			uint8_t *lcddr = (uint8_t *) 0xEC + pair; // Point to register position 0xEC which isLCDDR0 and add pair to get LCDDR0, LCDDR1 or LCDDR2 				      
  f0:	fb 01       	movw	r30, r22
  f2:	f5 95       	asr	r31
  f4:	e7 95       	ror	r30
  f6:	e4 51       	subi	r30, 0x14	; 20
  f8:	ff 4f       	sbci	r31, 0xFF	; 255
			uint16_t num = scc[ch - '0'];			  // Get the hexadecimal number from the list
  fa:	a8 2f       	mov	r26, r24
  fc:	b0 e0       	ldi	r27, 0x00	; 0
  fe:	d0 97       	sbiw	r26, 0x30	; 48
 100:	aa 0f       	add	r26, r26
 102:	bb 1f       	adc	r27, r27
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	8c 0f       	add	r24, r28
 10a:	9d 1f       	adc	r25, r29
 10c:	a8 0f       	add	r26, r24
 10e:	b9 1f       	adc	r27, r25
 110:	2d 91       	ld	r18, X+
 112:	3c 91       	ld	r19, X
 114:	61 70       	andi	r22, 0x01	; 1
 116:	77 27       	eor	r23, r23
 118:	af 01       	movw	r20, r30
 11a:	4c 5e       	subi	r20, 0xEC	; 236
 11c:	5f 4f       	sbci	r21, 0xFF	; 255
			
			for (int i = 0; i <= 3; i++) {			  // Loop through every number in the hexadecimal number
				int nibble = num & 0xF;				  // Get the least significant number in the hex
 11e:	c9 01       	movw	r24, r18
 120:	8f 70       	andi	r24, 0x0F	; 15
 122:	99 27       	eor	r25, r25
				
				if(pos % 2 == 1) {				      // Check if the nibble parts should be in the left or right number in the pair
 124:	61 30       	cpi	r22, 0x01	; 1
 126:	71 05       	cpc	r23, r1
 128:	b1 f0       	breq	.+44     	; 0x156 <writeChar+0x92>
					nibble *= 0x10;
				}
				
				*lcddr = *lcddr | nibble;			  // Write the nibble to the digit
 12a:	90 81       	ld	r25, Z
 12c:	89 2b       	or	r24, r25
 12e:	80 83       	st	Z, r24
				lcddr += 5;							  // Go to LCDDRx + 5
 130:	35 96       	adiw	r30, 0x05	; 5
				num /= 0x10;						  // Next nibble
 132:	32 95       	swap	r19
 134:	22 95       	swap	r18
 136:	2f 70       	andi	r18, 0x0F	; 15
 138:	23 27       	eor	r18, r19
 13a:	3f 70       	andi	r19, 0x0F	; 15
 13c:	23 27       	eor	r18, r19
			
			int pair = pos / 2;					      // Make sure it's either pair 0,1 - 2,3 or 4,5
			uint8_t *lcddr = (uint8_t *) 0xEC + pair; // Point to register position 0xEC which isLCDDR0 and add pair to get LCDDR0, LCDDR1 or LCDDR2 				      
			uint16_t num = scc[ch - '0'];			  // Get the hexadecimal number from the list
			
			for (int i = 0; i <= 3; i++) {			  // Loop through every number in the hexadecimal number
 13e:	e4 17       	cp	r30, r20
 140:	f5 07       	cpc	r31, r21
 142:	69 f7       	brne	.-38     	; 0x11e <writeChar+0x5a>
	}
	
	else{
		return;
=======
000000a2 <LCD_Init>:
			if(on == 0){
				LCDDR0 = 0x2;
				on = 1;
			}else{
				LCDDR0 = 0x0;
				on = 0;
  a2:	87 eb       	ldi	r24, 0xB7	; 183
  a4:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
  a8:	87 e0       	ldi	r24, 0x07	; 7
  aa:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>
  ae:	8f e0       	ldi	r24, 0x0F	; 15
  b0:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
  b4:	80 ec       	ldi	r24, 0xC0	; 192
  b6:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
  ba:	08 95       	ret

000000bc <button>:
>>>>>>> 852b5caa7680a3656aa5d4ad958a6739d0634f1d
	}
}
 144:	64 96       	adiw	r28, 0x14	; 20
 146:	0f b6       	in	r0, 0x3f	; 63
 148:	f8 94       	cli
 14a:	de bf       	out	0x3e, r29	; 62
 14c:	0f be       	out	0x3f, r0	; 63
 14e:	cd bf       	out	0x3d, r28	; 61
 150:	df 91       	pop	r29
 152:	cf 91       	pop	r28
 154:	08 95       	ret
			
			for (int i = 0; i <= 3; i++) {			  // Loop through every number in the hexadecimal number
				int nibble = num & 0xF;				  // Get the least significant number in the hex
				
				if(pos % 2 == 1) {				      // Check if the nibble parts should be in the left or right number in the pair
					nibble *= 0x10;
 156:	82 95       	swap	r24
 158:	92 95       	swap	r25
 15a:	90 7f       	andi	r25, 0xF0	; 240
 15c:	98 27       	eor	r25, r24
 15e:	80 7f       	andi	r24, 0xF0	; 240
 160:	98 27       	eor	r25, r24
 162:	e3 cf       	rjmp	.-58     	; 0x12a <writeChar+0x66>

<<<<<<< HEAD
00000164 <writeLong>:
	else{
		return;
	}
}

void writeLong(long i){
 164:	8f 92       	push	r8
 166:	9f 92       	push	r9
 168:	af 92       	push	r10
 16a:	bf 92       	push	r11
 16c:	ef 92       	push	r14
 16e:	ff 92       	push	r15
 170:	0f 93       	push	r16
 172:	1f 93       	push	r17
 174:	cf 93       	push	r28
 176:	df 93       	push	r29
 178:	7b 01       	movw	r14, r22
 17a:	8c 01       	movw	r16, r24
	for (int n = 5; n >= 0; n--) {
 17c:	c5 e0       	ldi	r28, 0x05	; 5
 17e:	d0 e0       	ldi	r29, 0x00	; 0
		char ch = (i % 10) + '0';
 180:	8a e0       	ldi	r24, 0x0A	; 10
 182:	88 2e       	mov	r8, r24
 184:	91 2c       	mov	r9, r1
 186:	a1 2c       	mov	r10, r1
 188:	b1 2c       	mov	r11, r1
 18a:	b7 01       	movw	r22, r14
 18c:	c8 01       	movw	r24, r16
 18e:	a5 01       	movw	r20, r10
 190:	94 01       	movw	r18, r8
 192:	0e 94 df 00 	call	0x1be	; 0x1be <__divmodsi4>
 196:	86 2f       	mov	r24, r22
		i /= 10;
 198:	79 01       	movw	r14, r18
 19a:	8a 01       	movw	r16, r20
		writeChar(ch, n);
 19c:	be 01       	movw	r22, r28
 19e:	80 5d       	subi	r24, 0xD0	; 208
 1a0:	0e 94 62 00 	call	0xc4	; 0xc4 <writeChar>
		return;
	}
}

void writeLong(long i){
	for (int n = 5; n >= 0; n--) {
 1a4:	21 97       	sbiw	r28, 0x01	; 1
 1a6:	88 f7       	brcc	.-30     	; 0x18a <writeLong+0x26>
		char ch = (i % 10) + '0';
		i /= 10;
		writeChar(ch, n);
	}
}
 1a8:	df 91       	pop	r29
 1aa:	cf 91       	pop	r28
 1ac:	1f 91       	pop	r17
 1ae:	0f 91       	pop	r16
 1b0:	ff 90       	pop	r15
 1b2:	ef 90       	pop	r14
 1b4:	bf 90       	pop	r11
 1b6:	af 90       	pop	r10
 1b8:	9f 90       	pop	r9
 1ba:	8f 90       	pop	r8
 1bc:	08 95       	ret

000001be <__divmodsi4>:
 1be:	05 2e       	mov	r0, r21
 1c0:	97 fb       	bst	r25, 7
 1c2:	1e f4       	brtc	.+6      	; 0x1ca <__divmodsi4+0xc>
 1c4:	00 94       	com	r0
 1c6:	0e 94 f6 00 	call	0x1ec	; 0x1ec <__negsi2>
 1ca:	57 fd       	sbrc	r21, 7
 1cc:	07 d0       	rcall	.+14     	; 0x1dc <__divmodsi4_neg2>
 1ce:	0e 94 fe 00 	call	0x1fc	; 0x1fc <__udivmodsi4>
 1d2:	07 fc       	sbrc	r0, 7
 1d4:	03 d0       	rcall	.+6      	; 0x1dc <__divmodsi4_neg2>
 1d6:	4e f4       	brtc	.+18     	; 0x1ea <__divmodsi4_exit>
 1d8:	0c 94 f6 00 	jmp	0x1ec	; 0x1ec <__negsi2>

000001dc <__divmodsi4_neg2>:
 1dc:	50 95       	com	r21
 1de:	40 95       	com	r20
 1e0:	30 95       	com	r19
 1e2:	21 95       	neg	r18
 1e4:	3f 4f       	sbci	r19, 0xFF	; 255
 1e6:	4f 4f       	sbci	r20, 0xFF	; 255
 1e8:	5f 4f       	sbci	r21, 0xFF	; 255

000001ea <__divmodsi4_exit>:
 1ea:	08 95       	ret

000001ec <__negsi2>:
 1ec:	90 95       	com	r25
 1ee:	80 95       	com	r24
 1f0:	70 95       	com	r23
 1f2:	61 95       	neg	r22
 1f4:	7f 4f       	sbci	r23, 0xFF	; 255
 1f6:	8f 4f       	sbci	r24, 0xFF	; 255
 1f8:	9f 4f       	sbci	r25, 0xFF	; 255
 1fa:	08 95       	ret

000001fc <__udivmodsi4>:
 1fc:	a1 e2       	ldi	r26, 0x21	; 33
 1fe:	1a 2e       	mov	r1, r26
 200:	aa 1b       	sub	r26, r26
 202:	bb 1b       	sub	r27, r27
 204:	fd 01       	movw	r30, r26
 206:	0d c0       	rjmp	.+26     	; 0x222 <__udivmodsi4_ep>

00000208 <__udivmodsi4_loop>:
 208:	aa 1f       	adc	r26, r26
 20a:	bb 1f       	adc	r27, r27
 20c:	ee 1f       	adc	r30, r30
 20e:	ff 1f       	adc	r31, r31
 210:	a2 17       	cp	r26, r18
 212:	b3 07       	cpc	r27, r19
 214:	e4 07       	cpc	r30, r20
 216:	f5 07       	cpc	r31, r21
 218:	20 f0       	brcs	.+8      	; 0x222 <__udivmodsi4_ep>
 21a:	a2 1b       	sub	r26, r18
 21c:	b3 0b       	sbc	r27, r19
 21e:	e4 0b       	sbc	r30, r20
 220:	f5 0b       	sbc	r31, r21

00000222 <__udivmodsi4_ep>:
 222:	66 1f       	adc	r22, r22
 224:	77 1f       	adc	r23, r23
 226:	88 1f       	adc	r24, r24
 228:	99 1f       	adc	r25, r25
 22a:	1a 94       	dec	r1
 22c:	69 f7       	brne	.-38     	; 0x208 <__udivmodsi4_loop>
 22e:	60 95       	com	r22
 230:	70 95       	com	r23
 232:	80 95       	com	r24
 234:	90 95       	com	r25
 236:	9b 01       	movw	r18, r22
 238:	ac 01       	movw	r20, r24
 23a:	bd 01       	movw	r22, r26
 23c:	cf 01       	movw	r24, r30
 23e:	08 95       	ret

00000240 <_exit>:
 240:	f8 94       	cli

00000242 <__stop_program>:
 242:	ff cf       	rjmp	.-2      	; 0x242 <__stop_program>
=======
void button(){
	
	PORTB = (1 << PB7);//0b10000000;
  bc:	80 e8       	ldi	r24, 0x80	; 128
  be:	85 b9       	out	0x05, r24	; 5
	
	LCDDR8 = 0x1;
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7fc0f4>
	LCDDR13 = 0x0;
  c6:	10 92 f9 00 	sts	0x00F9, r1	; 0x8000f9 <__TEXT_REGION_LENGTH__+0x7fc0f9>
		if(PINB == 0x0){
			LCDDR13 = 0x0;
			//pressingflag = true;
			
		}else{
			LCDDR13 = 0x1;
  ca:	91 e0       	ldi	r25, 0x01	; 1
	LCDDR8 = 0x1;
	LCDDR13 = 0x0;
	//bool pressingflag = false;
	
	while(1){
		if(PINB == 0x0){
  cc:	83 b1       	in	r24, 0x03	; 3
  ce:	81 11       	cpse	r24, r1
  d0:	05 c0       	rjmp	.+10     	; 0xdc <button+0x20>
			LCDDR13 = 0x0;
  d2:	10 92 f9 00 	sts	0x00F9, r1	; 0x8000f9 <__TEXT_REGION_LENGTH__+0x7fc0f9>
	LCDDR8 = 0x1;
	LCDDR13 = 0x0;
	//bool pressingflag = false;
	
	while(1){
		if(PINB == 0x0){
  d6:	83 b1       	in	r24, 0x03	; 3
  d8:	88 23       	and	r24, r24
  da:	d9 f3       	breq	.-10     	; 0xd2 <button+0x16>
			LCDDR13 = 0x0;
			//pressingflag = true;
			
		}else{
			LCDDR13 = 0x1;
  dc:	90 93 f9 00 	sts	0x00F9, r25	; 0x8000f9 <__TEXT_REGION_LENGTH__+0x7fc0f9>
  e0:	f5 cf       	rjmp	.-22     	; 0xcc <button+0x10>

000000e2 <_exit>:
  e2:	f8 94       	cli

000000e4 <__stop_program>:
  e4:	ff cf       	rjmp	.-2      	; 0xe4 <__stop_program>
>>>>>>> 852b5caa7680a3656aa5d4ad958a6739d0634f1d
