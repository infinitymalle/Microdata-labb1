
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  0000036a  000003de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000036a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000003f2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000424  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cea  00000000  00000000  000004dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009e1  00000000  00000000  000011c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000665  00000000  00000000  00001ba7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000180  00000000  00000000  0000220c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004a6  00000000  00000000  0000238c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000008bc  00000000  00000000  00002832  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000160  00000000  00000000  000030ee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
   8:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
   c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  10:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  14:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  18:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  1c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  20:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  24:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  28:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  2c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  30:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  34:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  38:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  3c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  40:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  44:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  48:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  4c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  50:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  54:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  58:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	ea e6       	ldi	r30, 0x6A	; 106
  70:	f3 e0       	ldi	r31, 0x03	; 3
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	a4 31       	cpi	r26, 0x14	; 20
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>
  7e:	0e 94 45 00 	call	0x8a	; 0x8a <main>
  82:	0c 94 b3 01 	jmp	0x366	; 0x366 <_exit>

00000086 <__bad_interrupt>:
  86:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008a <main>:
#include "myFunctionsInclude.h"
#include <math.h>

int main(void)
{
    CLKPR = 0x80;
  8a:	e1 e6       	ldi	r30, 0x61	; 97
  8c:	f0 e0       	ldi	r31, 0x00	; 0
  8e:	80 e8       	ldi	r24, 0x80	; 128
  90:	80 83       	st	Z, r24
	CLKPR = 0x00;
  92:	10 82       	st	Z, r1
	LCD_Init();
  94:	0e 94 51 00 	call	0xa2	; 0xa2 <LCD_Init>
	//writeChar('4', 3);
	//writeLong(123456789);
	//prime();
	//blink();
	//button();
	part4();
  98:	0e 94 b0 00 	call	0x160	; 0x160 <part4>

}
  9c:	80 e0       	ldi	r24, 0x00	; 0
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	08 95       	ret

000000a2 <LCD_Init>:
	
	while(1){
		if (PINB >> 7 == 0 && !buttonPushed && LCDDR13 == 0x1){
			buttonPushed = true;
			LCDDR13 = 0;
			LCDDR8 = 1;
  a2:	87 eb       	ldi	r24, 0xB7	; 183
  a4:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
  a8:	87 e0       	ldi	r24, 0x07	; 7
  aa:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>
  ae:	8f e0       	ldi	r24, 0x0F	; 15
  b0:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
  b4:	80 ec       	ldi	r24, 0xC0	; 192
  b6:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
  ba:	08 95       	ret

000000bc <writeChar>:
  bc:	cf 93       	push	r28
  be:	df 93       	push	r29
  c0:	cd b7       	in	r28, 0x3d	; 61
  c2:	de b7       	in	r29, 0x3e	; 62
  c4:	64 97       	sbiw	r28, 0x14	; 20
  c6:	0f b6       	in	r0, 0x3f	; 63
  c8:	f8 94       	cli
  ca:	de bf       	out	0x3e, r29	; 62
  cc:	0f be       	out	0x3f, r0	; 63
  ce:	cd bf       	out	0x3d, r28	; 61
  d0:	94 e1       	ldi	r25, 0x14	; 20
  d2:	e0 e0       	ldi	r30, 0x00	; 0
  d4:	f1 e0       	ldi	r31, 0x01	; 1
  d6:	de 01       	movw	r26, r28
  d8:	11 96       	adiw	r26, 0x01	; 1
  da:	01 90       	ld	r0, Z+
  dc:	0d 92       	st	X+, r0
  de:	9a 95       	dec	r25
  e0:	e1 f7       	brne	.-8      	; 0xda <writeChar+0x1e>
  e2:	66 30       	cpi	r22, 0x06	; 6
  e4:	71 05       	cpc	r23, r1
  e6:	50 f5       	brcc	.+84     	; 0x13c <writeChar+0x80>
  e8:	fb 01       	movw	r30, r22
  ea:	f5 95       	asr	r31
  ec:	e7 95       	ror	r30
  ee:	e4 51       	subi	r30, 0x14	; 20
  f0:	ff 4f       	sbci	r31, 0xFF	; 255
  f2:	a8 2f       	mov	r26, r24
  f4:	b0 e0       	ldi	r27, 0x00	; 0
  f6:	d0 97       	sbiw	r26, 0x30	; 48
  f8:	aa 0f       	add	r26, r26
  fa:	bb 1f       	adc	r27, r27
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	8c 0f       	add	r24, r28
 102:	9d 1f       	adc	r25, r29
 104:	a8 0f       	add	r26, r24
 106:	b9 1f       	adc	r27, r25
 108:	4d 91       	ld	r20, X+
 10a:	5c 91       	ld	r21, X
 10c:	61 70       	andi	r22, 0x01	; 1
 10e:	77 27       	eor	r23, r23
 110:	df 01       	movw	r26, r30
 112:	54 96       	adiw	r26, 0x14	; 20
 114:	ca 01       	movw	r24, r20
 116:	8f 70       	andi	r24, 0x0F	; 15
 118:	99 27       	eor	r25, r25
 11a:	61 30       	cpi	r22, 0x01	; 1
 11c:	71 05       	cpc	r23, r1
 11e:	b9 f0       	breq	.+46     	; 0x14e <writeChar+0x92>
 120:	20 81       	ld	r18, Z
 122:	20 7f       	andi	r18, 0xF0	; 240
 124:	82 2b       	or	r24, r18
 126:	80 83       	st	Z, r24
 128:	35 96       	adiw	r30, 0x05	; 5
 12a:	52 95       	swap	r21
 12c:	42 95       	swap	r20
 12e:	4f 70       	andi	r20, 0x0F	; 15
 130:	45 27       	eor	r20, r21
 132:	5f 70       	andi	r21, 0x0F	; 15
 134:	45 27       	eor	r20, r21
 136:	ea 17       	cp	r30, r26
 138:	fb 07       	cpc	r31, r27
 13a:	61 f7       	brne	.-40     	; 0x114 <writeChar+0x58>
 13c:	64 96       	adiw	r28, 0x14	; 20
 13e:	0f b6       	in	r0, 0x3f	; 63
 140:	f8 94       	cli
 142:	de bf       	out	0x3e, r29	; 62
 144:	0f be       	out	0x3f, r0	; 63
 146:	cd bf       	out	0x3d, r28	; 61
 148:	df 91       	pop	r29
 14a:	cf 91       	pop	r28
 14c:	08 95       	ret
 14e:	82 95       	swap	r24
 150:	92 95       	swap	r25
 152:	90 7f       	andi	r25, 0xF0	; 240
 154:	98 27       	eor	r25, r24
 156:	80 7f       	andi	r24, 0xF0	; 240
 158:	98 27       	eor	r25, r24
 15a:	20 81       	ld	r18, Z
 15c:	2f 70       	andi	r18, 0x0F	; 15
 15e:	e2 cf       	rjmp	.-60     	; 0x124 <writeChar+0x68>

00000160 <part4>:
			buttonPushed = false;
		}
	}
}

void part4() {
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
 164:	00 d0       	rcall	.+0      	; 0x166 <part4+0x6>
 166:	00 d0       	rcall	.+0      	; 0x168 <part4+0x8>
 168:	cd b7       	in	r28, 0x3d	; 61
 16a:	de b7       	in	r29, 0x3e	; 62
	
	PORTB = 0x80;   //0b10000000
 16c:	80 e8       	ldi	r24, 0x80	; 128
 16e:	85 b9       	out	0x05, r24	; 5
	LCDDR8 = 1;
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7fc0f4>
	LCDDR13 = 0;
 176:	10 92 f9 00 	sts	0x00F9, r1	; 0x8000f9 <__TEXT_REGION_LENGTH__+0x7fc0f9>
	TCCR1B = (1 << CS12);
 17a:	84 e0       	ldi	r24, 0x04	; 4
 17c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
	
	uint16_t clk = 0;
	uint16_t interval = 8000000/256;
	int on = 0;
	bool overflowflag = false;
	bool buttonPushed = false;
 180:	21 2c       	mov	r2, r1
	TCCR1B = (1 << CS12);
	
	uint16_t clk = 0;
	uint16_t interval = 8000000/256;
	int on = 0;
	bool overflowflag = false;
 182:	31 2c       	mov	r3, r1
	LCDDR13 = 0;
	TCCR1B = (1 << CS12);
	
	uint16_t clk = 0;
	uint16_t interval = 8000000/256;
	int on = 0;
 184:	1a 82       	std	Y+2, r1	; 0x02
 186:	19 82       	std	Y+1, r1	; 0x01
	PORTB = 0x80;   //0b10000000
	LCDDR8 = 1;
	LCDDR13 = 0;
	TCCR1B = (1 << CS12);
	
	uint16_t clk = 0;
 188:	00 e0       	ldi	r16, 0x00	; 0
 18a:	10 e0       	ldi	r17, 0x00	; 0
	}
}

void writeLong(long i){
	for (int n = 5; n >= 0; n--) {
		char ch = (i % 10) + '0';
 18c:	2a e0       	ldi	r18, 0x0A	; 10
 18e:	82 2e       	mov	r8, r18
 190:	91 2c       	mov	r9, r1
 192:	a1 2c       	mov	r10, r1
 194:	b1 2c       	mov	r11, r1
	int on = 0;
	bool overflowflag = false;
	bool buttonPushed = false;
	
	while(1){
		for(long i = 25000; i <= 30000; i++){
 196:	98 ea       	ldi	r25, 0xA8	; 168
 198:	49 2e       	mov	r4, r25
 19a:	91 e6       	ldi	r25, 0x61	; 97
 19c:	59 2e       	mov	r5, r25
 19e:	61 2c       	mov	r6, r1
 1a0:	71 2c       	mov	r7, r1
	}
}

int is_prime(long i){
	for(int n = 2; n < i; n++){
		if(i % n == 0){
 1a2:	40 fe       	sbrs	r4, 0
 1a4:	35 c0       	rjmp	.+106    	; 0x210 <__EEPROM_REGION_LENGTH__+0x10>
 1a6:	83 e0       	ldi	r24, 0x03	; 3
 1a8:	c8 2e       	mov	r12, r24
 1aa:	d1 2c       	mov	r13, r1
 1ac:	e1 2c       	mov	r14, r1
 1ae:	f1 2c       	mov	r15, r1
 1b0:	0d c0       	rjmp	.+26     	; 0x1cc <part4+0x6c>
 1b2:	8f ef       	ldi	r24, 0xFF	; 255
 1b4:	c8 1a       	sub	r12, r24
 1b6:	d8 0a       	sbc	r13, r24
 1b8:	e8 0a       	sbc	r14, r24
 1ba:	f8 0a       	sbc	r15, r24
 1bc:	c3 01       	movw	r24, r6
 1be:	b2 01       	movw	r22, r4
 1c0:	0e 94 72 01 	call	0x2e4	; 0x2e4 <__divmodsi4>
 1c4:	67 2b       	or	r22, r23
 1c6:	68 2b       	or	r22, r24
 1c8:	69 2b       	or	r22, r25
 1ca:	11 f1       	breq	.+68     	; 0x210 <__EEPROM_REGION_LENGTH__+0x10>
		}
	}
}

int is_prime(long i){
	for(int n = 2; n < i; n++){
 1cc:	96 01       	movw	r18, r12
 1ce:	a7 01       	movw	r20, r14
 1d0:	c4 14       	cp	r12, r4
 1d2:	d5 04       	cpc	r13, r5
 1d4:	e6 04       	cpc	r14, r6
 1d6:	f7 04       	cpc	r15, r7
 1d8:	61 f7       	brne	.-40     	; 0x1b2 <part4+0x52>
 1da:	62 01       	movw	r12, r4
 1dc:	73 01       	movw	r14, r6
 1de:	85 e0       	ldi	r24, 0x05	; 5
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	9c 83       	std	Y+4, r25	; 0x04
 1e4:	8b 83       	std	Y+3, r24	; 0x03
	}
}

void writeLong(long i){
	for (int n = 5; n >= 0; n--) {
		char ch = (i % 10) + '0';
 1e6:	b6 01       	movw	r22, r12
 1e8:	c7 01       	movw	r24, r14
 1ea:	a5 01       	movw	r20, r10
 1ec:	94 01       	movw	r18, r8
 1ee:	0e 94 72 01 	call	0x2e4	; 0x2e4 <__divmodsi4>
 1f2:	86 2f       	mov	r24, r22
		i /= 10;
 1f4:	69 01       	movw	r12, r18
 1f6:	7a 01       	movw	r14, r20
		writeChar(ch, n);
 1f8:	6b 81       	ldd	r22, Y+3	; 0x03
 1fa:	7c 81       	ldd	r23, Y+4	; 0x04
 1fc:	80 5d       	subi	r24, 0xD0	; 208
 1fe:	0e 94 5e 00 	call	0xbc	; 0xbc <writeChar>
		}
	}
}

void writeLong(long i){
	for (int n = 5; n >= 0; n--) {
 202:	8b 81       	ldd	r24, Y+3	; 0x03
 204:	9c 81       	ldd	r25, Y+4	; 0x04
 206:	01 97       	sbiw	r24, 0x01	; 1
 208:	9c 83       	std	Y+4, r25	; 0x04
 20a:	8b 83       	std	Y+3, r24	; 0x03
 20c:	01 96       	adiw	r24, 0x01	; 1
 20e:	59 f7       	brne	.-42     	; 0x1e6 <part4+0x86>
			if(is_prime(i)){
				writeLong(i);
				
			}
			
			if(TCNT1 >= clk && !overflowflag){
 210:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
 214:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
 218:	80 17       	cp	r24, r16
 21a:	91 07       	cpc	r25, r17
 21c:	a0 f0       	brcs	.+40     	; 0x246 <__EEPROM_REGION_LENGTH__+0x46>
 21e:	31 10       	cpse	r3, r1
 220:	12 c0       	rjmp	.+36     	; 0x246 <__EEPROM_REGION_LENGTH__+0x46>
				clk = TCNT1 + interval;
 222:	00 91 84 00 	lds	r16, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
 226:	10 91 85 00 	lds	r17, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
 22a:	0e 5e       	subi	r16, 0xEE	; 238
 22c:	15 48       	sbci	r17, 0x85	; 133
				if(on == 0){
 22e:	89 81       	ldd	r24, Y+1	; 0x01
 230:	9a 81       	ldd	r25, Y+2	; 0x02
 232:	89 2b       	or	r24, r25
 234:	09 f0       	breq	.+2      	; 0x238 <__EEPROM_REGION_LENGTH__+0x38>
 236:	4a c0       	rjmp	.+148    	; 0x2cc <__EEPROM_REGION_LENGTH__+0xcc>
					LCDDR3 = 0x1;
 238:	91 e0       	ldi	r25, 0x01	; 1
 23a:	90 93 ef 00 	sts	0x00EF, r25	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7fc0ef>
					on = 1;
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	9a 83       	std	Y+2, r25	; 0x02
 244:	89 83       	std	Y+1, r24	; 0x01
					LCDDR3 = 0x0;
					on = 0;
				}
			}
		
			if (TCNT1 < 0xFFFF){
 246:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
 24a:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
 24e:	01 96       	adiw	r24, 0x01	; 1
 250:	21 f1       	breq	.+72     	; 0x29a <__EEPROM_REGION_LENGTH__+0x9a>
				overflowflag = false;
 252:	31 2c       	mov	r3, r1
				overflowflag = true;
			
				clk = TCNT1 + interval;
			}
	
			if (PINB >> 7 == 0 && !buttonPushed && LCDDR13 == 0x1){
 254:	1f 99       	sbic	0x03, 7	; 3
 256:	2b c0       	rjmp	.+86     	; 0x2ae <__EEPROM_REGION_LENGTH__+0xae>
 258:	21 10       	cpse	r2, r1
 25a:	1a c0       	rjmp	.+52     	; 0x290 <__EEPROM_REGION_LENGTH__+0x90>
 25c:	80 91 f9 00 	lds	r24, 0x00F9	; 0x8000f9 <__TEXT_REGION_LENGTH__+0x7fc0f9>
 260:	81 30       	cpi	r24, 0x01	; 1
 262:	c9 f1       	breq	.+114    	; 0x2d6 <__EEPROM_REGION_LENGTH__+0xd6>
				buttonPushed = true;
				LCDDR13 = 0;
				LCDDR8 = 1;
			}
		
			else if (PINB >> 7 == 0 && !buttonPushed && LCDDR8 == 0x1) {
 264:	1f 99       	sbic	0x03, 7	; 3
 266:	04 c0       	rjmp	.+8      	; 0x270 <__EEPROM_REGION_LENGTH__+0x70>
 268:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7fc0f4>
 26c:	81 30       	cpi	r24, 0x01	; 1
 26e:	39 f1       	breq	.+78     	; 0x2be <__EEPROM_REGION_LENGTH__+0xbe>
				buttonPushed = true;
				LCDDR13 = 1;
				LCDDR8 = 0;
			}
		
			else if (PINB >> 7 == 1){
 270:	1f 99       	sbic	0x03, 7	; 3
 272:	11 c0       	rjmp	.+34     	; 0x296 <__EEPROM_REGION_LENGTH__+0x96>
	int on = 0;
	bool overflowflag = false;
	bool buttonPushed = false;
	
	while(1){
		for(long i = 25000; i <= 30000; i++){
 274:	8f ef       	ldi	r24, 0xFF	; 255
 276:	48 1a       	sub	r4, r24
 278:	58 0a       	sbc	r5, r24
 27a:	68 0a       	sbc	r6, r24
 27c:	78 0a       	sbc	r7, r24
 27e:	91 e3       	ldi	r25, 0x31	; 49
 280:	49 16       	cp	r4, r25
 282:	95 e7       	ldi	r25, 0x75	; 117
 284:	59 06       	cpc	r5, r25
 286:	61 04       	cpc	r6, r1
 288:	71 04       	cpc	r7, r1
 28a:	09 f0       	breq	.+2      	; 0x28e <__EEPROM_REGION_LENGTH__+0x8e>
 28c:	8a cf       	rjmp	.-236    	; 0x1a2 <part4+0x42>
 28e:	83 cf       	rjmp	.-250    	; 0x196 <part4+0x36>
				buttonPushed = true;
				LCDDR13 = 0;
				LCDDR8 = 1;
			}
		
			else if (PINB >> 7 == 0 && !buttonPushed && LCDDR8 == 0x1) {
 290:	83 b1       	in	r24, 0x03	; 3
				buttonPushed = true;
				LCDDR13 = 1;
				LCDDR8 = 0;
			}
		
			else if (PINB >> 7 == 1){
 292:	1f 9b       	sbis	0x03, 7	; 3
 294:	ef cf       	rjmp	.-34     	; 0x274 <__EEPROM_REGION_LENGTH__+0x74>
				buttonPushed = false;
 296:	21 2c       	mov	r2, r1
 298:	ed cf       	rjmp	.-38     	; 0x274 <__EEPROM_REGION_LENGTH__+0x74>
			}
			
			else{
				overflowflag = true;
			
				clk = TCNT1 + interval;
 29a:	00 91 84 00 	lds	r16, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
 29e:	10 91 85 00 	lds	r17, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
 2a2:	0e 5e       	subi	r16, 0xEE	; 238
 2a4:	15 48       	sbci	r17, 0x85	; 133
			if (TCNT1 < 0xFFFF){
				overflowflag = false;
			}
			
			else{
				overflowflag = true;
 2a6:	33 24       	eor	r3, r3
 2a8:	33 94       	inc	r3
			
				clk = TCNT1 + interval;
			}
	
			if (PINB >> 7 == 0 && !buttonPushed && LCDDR13 == 0x1){
 2aa:	1f 9b       	sbis	0x03, 7	; 3
 2ac:	d5 cf       	rjmp	.-86     	; 0x258 <__EEPROM_REGION_LENGTH__+0x58>
				buttonPushed = true;
				LCDDR13 = 0;
				LCDDR8 = 1;
			}
		
			else if (PINB >> 7 == 0 && !buttonPushed && LCDDR8 == 0x1) {
 2ae:	1f 99       	sbic	0x03, 7	; 3
 2b0:	df cf       	rjmp	.-66     	; 0x270 <__EEPROM_REGION_LENGTH__+0x70>
 2b2:	21 10       	cpse	r2, r1
 2b4:	dd cf       	rjmp	.-70     	; 0x270 <__EEPROM_REGION_LENGTH__+0x70>
 2b6:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7fc0f4>
 2ba:	81 30       	cpi	r24, 0x01	; 1
 2bc:	c9 f6       	brne	.-78     	; 0x270 <__EEPROM_REGION_LENGTH__+0x70>
				buttonPushed = true;
				LCDDR13 = 1;
 2be:	80 93 f9 00 	sts	0x00F9, r24	; 0x8000f9 <__TEXT_REGION_LENGTH__+0x7fc0f9>
				LCDDR8 = 0;
 2c2:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7fc0f4>
				LCDDR13 = 0;
				LCDDR8 = 1;
			}
		
			else if (PINB >> 7 == 0 && !buttonPushed && LCDDR8 == 0x1) {
				buttonPushed = true;
 2c6:	22 24       	eor	r2, r2
 2c8:	23 94       	inc	r2
				LCDDR13 = 1;
				LCDDR8 = 0;
 2ca:	d4 cf       	rjmp	.-88     	; 0x274 <__EEPROM_REGION_LENGTH__+0x74>
					LCDDR3 = 0x1;
					on = 1;
				}
				
				else{
					LCDDR3 = 0x0;
 2cc:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7fc0ef>
					on = 0;
 2d0:	1a 82       	std	Y+2, r1	; 0x02
 2d2:	19 82       	std	Y+1, r1	; 0x01
 2d4:	b8 cf       	rjmp	.-144    	; 0x246 <__EEPROM_REGION_LENGTH__+0x46>
				clk = TCNT1 + interval;
			}
	
			if (PINB >> 7 == 0 && !buttonPushed && LCDDR13 == 0x1){
				buttonPushed = true;
				LCDDR13 = 0;
 2d6:	10 92 f9 00 	sts	0x00F9, r1	; 0x8000f9 <__TEXT_REGION_LENGTH__+0x7fc0f9>
				LCDDR8 = 1;
 2da:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7fc0f4>
			
				clk = TCNT1 + interval;
			}
	
			if (PINB >> 7 == 0 && !buttonPushed && LCDDR13 == 0x1){
				buttonPushed = true;
 2de:	22 24       	eor	r2, r2
 2e0:	23 94       	inc	r2
				LCDDR13 = 0;
				LCDDR8 = 1;
 2e2:	c8 cf       	rjmp	.-112    	; 0x274 <__EEPROM_REGION_LENGTH__+0x74>

000002e4 <__divmodsi4>:
 2e4:	05 2e       	mov	r0, r21
 2e6:	97 fb       	bst	r25, 7
 2e8:	1e f4       	brtc	.+6      	; 0x2f0 <__divmodsi4+0xc>
 2ea:	00 94       	com	r0
 2ec:	0e 94 89 01 	call	0x312	; 0x312 <__negsi2>
 2f0:	57 fd       	sbrc	r21, 7
 2f2:	07 d0       	rcall	.+14     	; 0x302 <__divmodsi4_neg2>
 2f4:	0e 94 91 01 	call	0x322	; 0x322 <__udivmodsi4>
 2f8:	07 fc       	sbrc	r0, 7
 2fa:	03 d0       	rcall	.+6      	; 0x302 <__divmodsi4_neg2>
 2fc:	4e f4       	brtc	.+18     	; 0x310 <__divmodsi4_exit>
 2fe:	0c 94 89 01 	jmp	0x312	; 0x312 <__negsi2>

00000302 <__divmodsi4_neg2>:
 302:	50 95       	com	r21
 304:	40 95       	com	r20
 306:	30 95       	com	r19
 308:	21 95       	neg	r18
 30a:	3f 4f       	sbci	r19, 0xFF	; 255
 30c:	4f 4f       	sbci	r20, 0xFF	; 255
 30e:	5f 4f       	sbci	r21, 0xFF	; 255

00000310 <__divmodsi4_exit>:
 310:	08 95       	ret

00000312 <__negsi2>:
 312:	90 95       	com	r25
 314:	80 95       	com	r24
 316:	70 95       	com	r23
 318:	61 95       	neg	r22
 31a:	7f 4f       	sbci	r23, 0xFF	; 255
 31c:	8f 4f       	sbci	r24, 0xFF	; 255
 31e:	9f 4f       	sbci	r25, 0xFF	; 255
 320:	08 95       	ret

00000322 <__udivmodsi4>:
 322:	a1 e2       	ldi	r26, 0x21	; 33
 324:	1a 2e       	mov	r1, r26
 326:	aa 1b       	sub	r26, r26
 328:	bb 1b       	sub	r27, r27
 32a:	fd 01       	movw	r30, r26
 32c:	0d c0       	rjmp	.+26     	; 0x348 <__udivmodsi4_ep>

0000032e <__udivmodsi4_loop>:
 32e:	aa 1f       	adc	r26, r26
 330:	bb 1f       	adc	r27, r27
 332:	ee 1f       	adc	r30, r30
 334:	ff 1f       	adc	r31, r31
 336:	a2 17       	cp	r26, r18
 338:	b3 07       	cpc	r27, r19
 33a:	e4 07       	cpc	r30, r20
 33c:	f5 07       	cpc	r31, r21
 33e:	20 f0       	brcs	.+8      	; 0x348 <__udivmodsi4_ep>
 340:	a2 1b       	sub	r26, r18
 342:	b3 0b       	sbc	r27, r19
 344:	e4 0b       	sbc	r30, r20
 346:	f5 0b       	sbc	r31, r21

00000348 <__udivmodsi4_ep>:
 348:	66 1f       	adc	r22, r22
 34a:	77 1f       	adc	r23, r23
 34c:	88 1f       	adc	r24, r24
 34e:	99 1f       	adc	r25, r25
 350:	1a 94       	dec	r1
 352:	69 f7       	brne	.-38     	; 0x32e <__udivmodsi4_loop>
 354:	60 95       	com	r22
 356:	70 95       	com	r23
 358:	80 95       	com	r24
 35a:	90 95       	com	r25
 35c:	9b 01       	movw	r18, r22
 35e:	ac 01       	movw	r20, r24
 360:	bd 01       	movw	r22, r26
 362:	cf 01       	movw	r24, r30
 364:	08 95       	ret

00000366 <_exit>:
 366:	f8 94       	cli

00000368 <__stop_program>:
 368:	ff cf       	rjmp	.-2      	; 0x368 <__stop_program>
