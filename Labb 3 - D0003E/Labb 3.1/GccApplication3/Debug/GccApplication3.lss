
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  000007e2  00000876  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000022b  00800118  00800118  0000088e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000088e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000900  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012f6  00000000  00000000  000009b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000be0  00000000  00000000  00001cae  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000819  00000000  00000000  0000288e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000230  00000000  00000000  000030a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ab  00000000  00000000  000032d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b5c  00000000  00000000  00003883  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  000043df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 84 02 	jmp	0x508	; 0x508 <__vector_3>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 b9 02 	jmp	0x572	; 0x572 <__vector_7>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	e2 ee       	ldi	r30, 0xE2	; 226
  70:	f7 e0       	ldi	r31, 0x07	; 7
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	a8 31       	cpi	r26, 0x18	; 24
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
  7e:	23 e0       	ldi	r18, 0x03	; 3
  80:	a8 e1       	ldi	r26, 0x18	; 24
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	a3 34       	cpi	r26, 0x43	; 67
  8a:	b2 07       	cpc	r27, r18
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 77 01 	call	0x2ee	; 0x2ee <main>
  92:	0c 94 ef 03 	jmp	0x7de	; 0x7de <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <writeChar>:
	}
}
bool is_prime(long i){
	for(int n = 2; n < i; n++){
		if(i % n == 0){
			return(false);
  9a:	cf 93       	push	r28
  9c:	df 93       	push	r29
  9e:	cd b7       	in	r28, 0x3d	; 61
  a0:	de b7       	in	r29, 0x3e	; 62
  a2:	64 97       	sbiw	r28, 0x14	; 20
  a4:	0f b6       	in	r0, 0x3f	; 63
  a6:	f8 94       	cli
  a8:	de bf       	out	0x3e, r29	; 62
  aa:	0f be       	out	0x3f, r0	; 63
  ac:	cd bf       	out	0x3d, r28	; 61
  ae:	94 e1       	ldi	r25, 0x14	; 20
  b0:	e4 e0       	ldi	r30, 0x04	; 4
  b2:	f1 e0       	ldi	r31, 0x01	; 1
  b4:	de 01       	movw	r26, r28
  b6:	11 96       	adiw	r26, 0x01	; 1
  b8:	01 90       	ld	r0, Z+
  ba:	0d 92       	st	X+, r0
  bc:	9a 95       	dec	r25
  be:	e1 f7       	brne	.-8      	; 0xb8 <writeChar+0x1e>
  c0:	66 30       	cpi	r22, 0x06	; 6
  c2:	71 05       	cpc	r23, r1
  c4:	50 f5       	brcc	.+84     	; 0x11a <writeChar+0x80>
  c6:	fb 01       	movw	r30, r22
  c8:	f5 95       	asr	r31
  ca:	e7 95       	ror	r30
  cc:	e4 51       	subi	r30, 0x14	; 20
  ce:	ff 4f       	sbci	r31, 0xFF	; 255
  d0:	a8 2f       	mov	r26, r24
  d2:	b0 e0       	ldi	r27, 0x00	; 0
  d4:	d0 97       	sbiw	r26, 0x30	; 48
  d6:	aa 0f       	add	r26, r26
  d8:	bb 1f       	adc	r27, r27
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	8c 0f       	add	r24, r28
  e0:	9d 1f       	adc	r25, r29
  e2:	a8 0f       	add	r26, r24
  e4:	b9 1f       	adc	r27, r25
  e6:	4d 91       	ld	r20, X+
  e8:	5c 91       	ld	r21, X
  ea:	61 70       	andi	r22, 0x01	; 1
  ec:	77 27       	eor	r23, r23
  ee:	df 01       	movw	r26, r30
  f0:	54 96       	adiw	r26, 0x14	; 20
  f2:	ca 01       	movw	r24, r20
  f4:	8f 70       	andi	r24, 0x0F	; 15
  f6:	99 27       	eor	r25, r25
  f8:	61 30       	cpi	r22, 0x01	; 1
  fa:	71 05       	cpc	r23, r1
  fc:	b9 f0       	breq	.+46     	; 0x12c <writeChar+0x92>
  fe:	20 81       	ld	r18, Z
 100:	20 7f       	andi	r18, 0xF0	; 240
 102:	82 2b       	or	r24, r18
 104:	80 83       	st	Z, r24
 106:	35 96       	adiw	r30, 0x05	; 5
 108:	52 95       	swap	r21
 10a:	42 95       	swap	r20
 10c:	4f 70       	andi	r20, 0x0F	; 15
 10e:	45 27       	eor	r20, r21
 110:	5f 70       	andi	r21, 0x0F	; 15
 112:	45 27       	eor	r20, r21
 114:	ea 17       	cp	r30, r26
 116:	fb 07       	cpc	r31, r27
 118:	61 f7       	brne	.-40     	; 0xf2 <writeChar+0x58>
 11a:	64 96       	adiw	r28, 0x14	; 20
 11c:	0f b6       	in	r0, 0x3f	; 63
 11e:	f8 94       	cli
 120:	de bf       	out	0x3e, r29	; 62
 122:	0f be       	out	0x3f, r0	; 63
 124:	cd bf       	out	0x3d, r28	; 61
 126:	df 91       	pop	r29
 128:	cf 91       	pop	r28
 12a:	08 95       	ret
 12c:	82 95       	swap	r24
 12e:	92 95       	swap	r25
 130:	90 7f       	andi	r25, 0xF0	; 240
 132:	98 27       	eor	r25, r24
 134:	80 7f       	andi	r24, 0xF0	; 240
 136:	98 27       	eor	r25, r24
 138:	20 81       	ld	r18, Z
 13a:	2f 70       	andi	r18, 0x0F	; 15
 13c:	e2 cf       	rjmp	.-60     	; 0x102 <writeChar+0x68>

0000013e <printAt>:
 13e:	8f 92       	push	r8
 140:	9f 92       	push	r9
 142:	af 92       	push	r10
 144:	bf 92       	push	r11
 146:	cf 92       	push	r12
 148:	df 92       	push	r13
 14a:	ef 92       	push	r14
 14c:	ff 92       	push	r15
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29
 152:	4b 01       	movw	r8, r22
 154:	5c 01       	movw	r10, r24
 156:	ea 01       	movw	r28, r20
 158:	88 e1       	ldi	r24, 0x18	; 24
 15a:	91 e0       	ldi	r25, 0x01	; 1
 15c:	0e 94 e6 02 	call	0x5cc	; 0x5cc <lock>
 160:	c5 01       	movw	r24, r10
 162:	b4 01       	movw	r22, r8
 164:	24 e6       	ldi	r18, 0x64	; 100
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	40 e0       	ldi	r20, 0x00	; 0
 16a:	50 e0       	ldi	r21, 0x00	; 0
 16c:	0e 94 6d 03 	call	0x6da	; 0x6da <__divmodsi4>
 170:	2a e0       	ldi	r18, 0x0A	; 10
 172:	c2 2e       	mov	r12, r18
 174:	d1 2c       	mov	r13, r1
 176:	e1 2c       	mov	r14, r1
 178:	f1 2c       	mov	r15, r1
 17a:	a7 01       	movw	r20, r14
 17c:	96 01       	movw	r18, r12
 17e:	0e 94 6d 03 	call	0x6da	; 0x6da <__divmodsi4>
 182:	be 01       	movw	r22, r28
 184:	80 e3       	ldi	r24, 0x30	; 48
 186:	82 0f       	add	r24, r18
 188:	0e 94 4d 00 	call	0x9a	; 0x9a <writeChar>
 18c:	21 96       	adiw	r28, 0x01	; 1
 18e:	c5 01       	movw	r24, r10
 190:	b4 01       	movw	r22, r8
 192:	a7 01       	movw	r20, r14
 194:	96 01       	movw	r18, r12
 196:	0e 94 6d 03 	call	0x6da	; 0x6da <__divmodsi4>
 19a:	86 2f       	mov	r24, r22
 19c:	be 01       	movw	r22, r28
 19e:	80 5d       	subi	r24, 0xD0	; 208
 1a0:	0e 94 4d 00 	call	0x9a	; 0x9a <writeChar>
 1a4:	88 e1       	ldi	r24, 0x18	; 24
 1a6:	91 e0       	ldi	r25, 0x01	; 1
 1a8:	df 91       	pop	r29
 1aa:	cf 91       	pop	r28
 1ac:	ff 90       	pop	r15
 1ae:	ef 90       	pop	r14
 1b0:	df 90       	pop	r13
 1b2:	cf 90       	pop	r12
 1b4:	bf 90       	pop	r11
 1b6:	af 90       	pop	r10
 1b8:	9f 90       	pop	r9
 1ba:	8f 90       	pop	r8
 1bc:	0c 94 24 03 	jmp	0x648	; 0x648 <unlock>

000001c0 <button>:
 1c0:	80 e8       	ldi	r24, 0x80	; 128
 1c2:	85 b9       	out	0x05, r24	; 5
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7fc0f4>
 1ca:	10 92 f9 00 	sts	0x00F9, r1	; 0x8000f9 <__TEXT_REGION_LENGTH__+0x7fc0f9>
 1ce:	c0 e0       	ldi	r28, 0x00	; 0
 1d0:	00 e0       	ldi	r16, 0x00	; 0
 1d2:	10 e0       	ldi	r17, 0x00	; 0
 1d4:	c1 2c       	mov	r12, r1
 1d6:	d1 2c       	mov	r13, r1
 1d8:	76 01       	movw	r14, r12
 1da:	44 e0       	ldi	r20, 0x04	; 4
 1dc:	50 e0       	ldi	r21, 0x00	; 0
 1de:	c7 01       	movw	r24, r14
 1e0:	b6 01       	movw	r22, r12
 1e2:	0e 94 9f 00 	call	0x13e	; 0x13e <printAt>
 1e6:	1f 99       	sbic	0x03, 7	; 3
 1e8:	17 c0       	rjmp	.+46     	; 0x218 <__EEPROM_REGION_LENGTH__+0x18>
 1ea:	c1 11       	cpse	r28, r1
 1ec:	2a c0       	rjmp	.+84     	; 0x242 <__EEPROM_REGION_LENGTH__+0x42>
 1ee:	80 91 f9 00 	lds	r24, 0x00F9	; 0x8000f9 <__TEXT_REGION_LENGTH__+0x7fc0f9>
 1f2:	81 30       	cpi	r24, 0x01	; 1
 1f4:	41 f1       	breq	.+80     	; 0x246 <__EEPROM_REGION_LENGTH__+0x46>
 1f6:	1f 99       	sbic	0x03, 7	; 3
 1f8:	04 c0       	rjmp	.+8      	; 0x202 <__EEPROM_REGION_LENGTH__+0x2>
 1fa:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7fc0f4>
 1fe:	81 30       	cpi	r24, 0x01	; 1
 200:	99 f0       	breq	.+38     	; 0x228 <__EEPROM_REGION_LENGTH__+0x28>
 202:	1f 9b       	sbis	0x03, 7	; 3
 204:	ea cf       	rjmp	.-44     	; 0x1da <button+0x1a>
 206:	c0 e0       	ldi	r28, 0x00	; 0
 208:	44 e0       	ldi	r20, 0x04	; 4
 20a:	50 e0       	ldi	r21, 0x00	; 0
 20c:	c7 01       	movw	r24, r14
 20e:	b6 01       	movw	r22, r12
 210:	0e 94 9f 00 	call	0x13e	; 0x13e <printAt>
 214:	1f 9b       	sbis	0x03, 7	; 3
 216:	e9 cf       	rjmp	.-46     	; 0x1ea <button+0x2a>
 218:	1f 99       	sbic	0x03, 7	; 3
 21a:	f3 cf       	rjmp	.-26     	; 0x202 <__EEPROM_REGION_LENGTH__+0x2>
 21c:	c1 11       	cpse	r28, r1
 21e:	f1 cf       	rjmp	.-30     	; 0x202 <__EEPROM_REGION_LENGTH__+0x2>
 220:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7fc0f4>
 224:	81 30       	cpi	r24, 0x01	; 1
 226:	69 f7       	brne	.-38     	; 0x202 <__EEPROM_REGION_LENGTH__+0x2>
 228:	0f 5f       	subi	r16, 0xFF	; 255
 22a:	1f 4f       	sbci	r17, 0xFF	; 255
 22c:	80 93 f9 00 	sts	0x00F9, r24	; 0x8000f9 <__TEXT_REGION_LENGTH__+0x7fc0f9>
 230:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7fc0f4>
 234:	c1 e0       	ldi	r28, 0x01	; 1
 236:	68 01       	movw	r12, r16
 238:	01 2e       	mov	r0, r17
 23a:	00 0c       	add	r0, r0
 23c:	ee 08       	sbc	r14, r14
 23e:	ff 08       	sbc	r15, r15
 240:	cc cf       	rjmp	.-104    	; 0x1da <button+0x1a>
 242:	83 b1       	in	r24, 0x03	; 3
 244:	de cf       	rjmp	.-68     	; 0x202 <__EEPROM_REGION_LENGTH__+0x2>
 246:	0f 5f       	subi	r16, 0xFF	; 255
 248:	1f 4f       	sbci	r17, 0xFF	; 255
 24a:	10 92 f9 00 	sts	0x00F9, r1	; 0x8000f9 <__TEXT_REGION_LENGTH__+0x7fc0f9>
 24e:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7fc0f4>
 252:	c1 e0       	ldi	r28, 0x01	; 1
 254:	68 01       	movw	r12, r16
 256:	01 2e       	mov	r0, r17
 258:	00 0c       	add	r0, r0
 25a:	ee 08       	sbc	r14, r14
 25c:	ff 08       	sbc	r15, r15
 25e:	bd cf       	rjmp	.-134    	; 0x1da <button+0x1a>

00000260 <computePrimes>:
 260:	ec 01       	movw	r28, r24
 262:	81 2c       	mov	r8, r1
 264:	91 2c       	mov	r9, r1
 266:	54 01       	movw	r10, r8
 268:	83 94       	inc	r8
 26a:	83 e0       	ldi	r24, 0x03	; 3
 26c:	88 16       	cp	r8, r24
 26e:	91 04       	cpc	r9, r1
 270:	a1 04       	cpc	r10, r1
 272:	b1 04       	cpc	r11, r1
 274:	e4 f0       	brlt	.+56     	; 0x2ae <computePrimes+0x4e>
 276:	80 fe       	sbrs	r8, 0
 278:	1f c0       	rjmp	.+62     	; 0x2b8 <computePrimes+0x58>
 27a:	83 e0       	ldi	r24, 0x03	; 3
 27c:	c8 2e       	mov	r12, r24
 27e:	d1 2c       	mov	r13, r1
 280:	e1 2c       	mov	r14, r1
 282:	f1 2c       	mov	r15, r1
 284:	0d c0       	rjmp	.+26     	; 0x2a0 <computePrimes+0x40>
 286:	8f ef       	ldi	r24, 0xFF	; 255
 288:	c8 1a       	sub	r12, r24
 28a:	d8 0a       	sbc	r13, r24
 28c:	e8 0a       	sbc	r14, r24
 28e:	f8 0a       	sbc	r15, r24
 290:	c5 01       	movw	r24, r10
 292:	b4 01       	movw	r22, r8
 294:	0e 94 6d 03 	call	0x6da	; 0x6da <__divmodsi4>
 298:	67 2b       	or	r22, r23
 29a:	68 2b       	or	r22, r24
 29c:	69 2b       	or	r22, r25
 29e:	61 f0       	breq	.+24     	; 0x2b8 <computePrimes+0x58>
 2a0:	96 01       	movw	r18, r12
 2a2:	a7 01       	movw	r20, r14
 2a4:	c8 14       	cp	r12, r8
 2a6:	d9 04       	cpc	r13, r9
 2a8:	ea 04       	cpc	r14, r10
 2aa:	fb 04       	cpc	r15, r11
 2ac:	61 f7       	brne	.-40     	; 0x286 <computePrimes+0x26>
 2ae:	ae 01       	movw	r20, r28
 2b0:	c5 01       	movw	r24, r10
 2b2:	b4 01       	movw	r22, r8
 2b4:	0e 94 9f 00 	call	0x13e	; 0x13e <printAt>
 2b8:	8f ef       	ldi	r24, 0xFF	; 255
 2ba:	88 1a       	sub	r8, r24
 2bc:	98 0a       	sbc	r9, r24
 2be:	a8 0a       	sbc	r10, r24
 2c0:	b8 0a       	sbc	r11, r24
 2c2:	d3 cf       	rjmp	.-90     	; 0x26a <computePrimes+0xa>

000002c4 <blink>:
void blink(){
	//TCCR1B = (1 << CS12);
	int clk = 20;
	//uint16_t clk = 0;
	//uint16_t interval = 8000000/512;
	int on = 0;
 2c4:	c0 e0       	ldi	r28, 0x00	; 0
 2c6:	d0 e0       	ldi	r29, 0x00	; 0
	
	while(1){
		if(whatisclock() >= clk){
			resetclock();
			if(on == 0){
				LCDDR3 = 0x1;
 2c8:	11 e0       	ldi	r17, 0x01	; 1
	//uint16_t interval = 8000000/512;
	int on = 0;
	
	
	while(1){
		if(whatisclock() >= clk){
 2ca:	0e 94 61 03 	call	0x6c2	; 0x6c2 <whatisclock>
 2ce:	44 97       	sbiw	r24, 0x14	; 20
 2d0:	e4 f3       	brlt	.-8      	; 0x2ca <blink+0x6>
			resetclock();
 2d2:	0e 94 66 03 	call	0x6cc	; 0x6cc <resetclock>
			if(on == 0){
 2d6:	cd 2b       	or	r28, r29
 2d8:	29 f4       	brne	.+10     	; 0x2e4 <blink+0x20>
				LCDDR3 = 0x1;
 2da:	10 93 ef 00 	sts	0x00EF, r17	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7fc0ef>
				on = 1;
 2de:	c1 e0       	ldi	r28, 0x01	; 1
 2e0:	d0 e0       	ldi	r29, 0x00	; 0
 2e2:	f3 cf       	rjmp	.-26     	; 0x2ca <blink+0x6>
				}else{
				LCDDR3 = 0x0;
 2e4:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7fc0ef>
				on = 0;
 2e8:	c0 e0       	ldi	r28, 0x00	; 0
 2ea:	d0 e0       	ldi	r29, 0x00	; 0
 2ec:	ee cf       	rjmp	.-36     	; 0x2ca <blink+0x6>

000002ee <main>:
void resetclock();

mutex m = MUTEX_INIT;

int main() {
	CLKPR = 0x80;
 2ee:	e1 e6       	ldi	r30, 0x61	; 97
 2f0:	f0 e0       	ldi	r31, 0x00	; 0
 2f2:	80 e8       	ldi	r24, 0x80	; 128
 2f4:	80 83       	st	Z, r24
	CLKPR = 0x00;
 2f6:	10 82       	st	Z, r1
		LCDCS    - Asynchronous clock source
		LCDMUX's - Duty = 1/4, Bias = 1/3
		LCDPM's  - Number of Segments = 25
	*/
	
	LCDCRB = (1 << LCDCS) | (1 << LCDMUX1) | (1 << LCDMUX0) | (1 << LCDPM2) | (1 << LCDPM1) | (1 << LCDPM0);
 2f8:	87 eb       	ldi	r24, 0xB7	; 183
 2fa:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
	/*
		LCD Frame Rate Register:
		LCDCD's - Prescaler setting N = 16
	*/
	
	LCDFRR = (1 << LCDCD2) | (1 << LCDCD1) | (1 << LCDCD0);
 2fe:	87 e0       	ldi	r24, 0x07	; 7
 300:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>
		LCD Contrast Control Register
		None of the LCDDC's used = 300 microseconds
		LCDCC's = 3,35V
	*/
	
	LCDCCR = (1 << LCDCC3) | (1 << LCDCC2) | (1 << LCDCC1) | (1 << LCDCC0);
 304:	8f e0       	ldi	r24, 0x0F	; 15
 306:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
	
	/*
		LCDEN = LCD Enabled
		LCDAB = Low Power Waveform
	*/
	LCDCRA = (1 << LCDEN) | (1 << LCDAB);
 30a:	80 ec       	ldi	r24, 0xC0	; 192
 30c:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>

int main() {
	CLKPR = 0x80;
	CLKPR = 0x00;
	LCD_Init();
	spawn(computePrimes, 0);
 310:	60 e0       	ldi	r22, 0x00	; 0
 312:	70 e0       	ldi	r23, 0x00	; 0
 314:	80 e3       	ldi	r24, 0x30	; 48
 316:	91 e0       	ldi	r25, 0x01	; 1
 318:	0e 94 b6 01 	call	0x36c	; 0x36c <spawn>
	//spawn(computePrimes, 4); // det va finare med 2 st primes
	spawn(button, 0);
 31c:	60 e0       	ldi	r22, 0x00	; 0
 31e:	70 e0       	ldi	r23, 0x00	; 0
 320:	80 ee       	ldi	r24, 0xE0	; 224
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	0e 94 b6 01 	call	0x36c	; 0x36c <spawn>
	blink();
 328:	0e 94 62 01 	call	0x2c4	; 0x2c4 <blink>

0000032c <dispatch>:
        while (1) ;  // not much else to do...
    }
    return p;
}

static void dispatch(thread next) {
 32c:	cf 93       	push	r28
 32e:	df 93       	push	r29
 330:	00 d0       	rcall	.+0      	; 0x332 <dispatch+0x6>
 332:	cd b7       	in	r28, 0x3d	; 61
 334:	de b7       	in	r29, 0x3e	; 62
 336:	9a 83       	std	Y+2, r25	; 0x02
 338:	89 83       	std	Y+1, r24	; 0x01
    if (setjmp(current->context) == 0) {
 33a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 33e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 342:	06 96       	adiw	r24, 0x06	; 6
 344:	0e 94 ae 03 	call	0x75c	; 0x75c <setjmp>
 348:	89 2b       	or	r24, r25
 34a:	29 f0       	breq	.+10     	; 0x356 <dispatch+0x2a>
        current = next;
        longjmp(next->context,1);
    }
}
 34c:	0f 90       	pop	r0
 34e:	0f 90       	pop	r0
 350:	df 91       	pop	r29
 352:	cf 91       	pop	r28
 354:	08 95       	ret
    return p;
}

static void dispatch(thread next) {
    if (setjmp(current->context) == 0) {
        current = next;
 356:	89 81       	ldd	r24, Y+1	; 0x01
 358:	9a 81       	ldd	r25, Y+2	; 0x02
 35a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 35e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
        longjmp(next->context,1);
 362:	61 e0       	ldi	r22, 0x01	; 1
 364:	70 e0       	ldi	r23, 0x00	; 0
 366:	06 96       	adiw	r24, 0x06	; 6
 368:	0e 94 ce 03 	call	0x79c	; 0x79c <longjmp>

0000036c <spawn>:
    }
}

void spawn(void (* function)(int), int arg) {
 36c:	cf 93       	push	r28
 36e:	df 93       	push	r29
 370:	00 d0       	rcall	.+0      	; 0x372 <spawn+0x6>
 372:	cd b7       	in	r28, 0x3d	; 61
 374:	de b7       	in	r29, 0x3e	; 62
    thread newp;

    DISABLE();
 376:	f8 94       	cli
    if (!initialized) initialize();
 378:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <initialized>
 37c:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <initialized+0x1>
 380:	23 2b       	or	r18, r19
 382:	a9 f5       	brne	.+106    	; 0x3ee <spawn+0x82>
int initialized = 0;

static void initialize(void) {
    int i;
    for (i=0; i<NTHREADS-1; i++)
        threads[i].next = &threads[i+1];
 384:	2c ef       	ldi	r18, 0xFC	; 252
 386:	31 e0       	ldi	r19, 0x01	; 1
 388:	30 93 94 01 	sts	0x0194, r19	; 0x800194 <threads+0x5>
 38c:	20 93 93 01 	sts	0x0193, r18	; 0x800193 <threads+0x4>
 390:	29 e6       	ldi	r18, 0x69	; 105
 392:	32 e0       	ldi	r19, 0x02	; 2
 394:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <threads+0x72>
 398:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <threads+0x71>
 39c:	26 ed       	ldi	r18, 0xD6	; 214
 39e:	32 e0       	ldi	r19, 0x02	; 2
 3a0:	30 93 6e 02 	sts	0x026E, r19	; 0x80026e <threads+0xdf>
 3a4:	20 93 6d 02 	sts	0x026D, r18	; 0x80026d <threads+0xde>
    threads[NTHREADS-1].next = NULL;
 3a8:	10 92 db 02 	sts	0x02DB, r1	; 0x8002db <threads+0x14c>
 3ac:	10 92 da 02 	sts	0x02DA, r1	; 0x8002da <threads+0x14b>

    initialized = 1;
 3b0:	21 e0       	ldi	r18, 0x01	; 1
 3b2:	30 e0       	ldi	r19, 0x00	; 0
 3b4:	30 93 1d 01 	sts	0x011D, r19	; 0x80011d <initialized+0x1>
 3b8:	20 93 1c 01 	sts	0x011C, r18	; 0x80011c <initialized>
	
	/*
		Interrupts are enabled on the 7th pin of PORTB
	*/
	PCMSK1 = (1 << PCINT15);
 3bc:	20 e8       	ldi	r18, 0x80	; 128
 3be:	20 93 6c 00 	sts	0x006C, r18	; 0x80006c <__TEXT_REGION_LENGTH__+0x7fc06c>
	EIMSK = (1 << PCIE1);
 3c2:	2d bb       	out	0x1d, r18	; 29
	
	/*
		Enables Joystick
	*/
	PORTB = (1 << PB7) | (1 << PB4);
 3c4:	20 e9       	ldi	r18, 0x90	; 144
 3c6:	25 b9       	out	0x05, r18	; 5
	
	/*
		Sets OC1A to compare match
		Sets timer to CTC mode
	*/
	TCCR1A = (1 << COM1A1) | (1 << COM1A0);
 3c8:	20 ec       	ldi	r18, 0xC0	; 192
 3ca:	20 93 80 00 	sts	0x0080, r18	; 0x800080 <__TEXT_REGION_LENGTH__+0x7fc080>
	TCCR1B = (1 << WGM12) | (1 << CS12) | (1 << CS10);
 3ce:	2d e0       	ldi	r18, 0x0D	; 13
 3d0:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
	
	/*
		Timer compare A match interrupt: Enabled
	*/
	TIMSK1 = (1 << OCIE1A);
 3d4:	22 e0       	ldi	r18, 0x02	; 2
 3d6:	20 93 6f 00 	sts	0x006F, r18	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
	
	/*
		8MHz/(1024*20) = 50ms
		Set TCNT1 = 0
	*/
	OCR1A = 8000000/(1024 * 20);
 3da:	26 e8       	ldi	r18, 0x86	; 134
 3dc:	31 e0       	ldi	r19, 0x01	; 1
 3de:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
 3e2:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
	TCNT1 = 0x0;
 3e6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
 3ea:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 3ee:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <freeQ>
 3f2:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <freeQ+0x1>
 3f6:	3a 83       	std	Y+2, r19	; 0x02
 3f8:	29 83       	std	Y+1, r18	; 0x01
    if (*queue) {
 3fa:	23 2b       	or	r18, r19
 3fc:	c9 f1       	breq	.+114    	; 0x470 <__DATA_REGION_LENGTH__+0x70>
        *queue = (*queue)->next;
 3fe:	e9 81       	ldd	r30, Y+1	; 0x01
 400:	fa 81       	ldd	r31, Y+2	; 0x02
 402:	44 81       	ldd	r20, Z+4	; 0x04
 404:	55 81       	ldd	r21, Z+5	; 0x05
 406:	50 93 03 01 	sts	0x0103, r21	; 0x800103 <freeQ+0x1>
 40a:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <freeQ>

    DISABLE();
    if (!initialized) initialize();

    newp = dequeue(&freeQ);
    newp->function = function;
 40e:	91 83       	std	Z+1, r25	; 0x01
 410:	80 83       	st	Z, r24
    newp->arg = arg;
 412:	73 83       	std	Z+3, r23	; 0x03
 414:	62 83       	std	Z+2, r22	; 0x02
    newp->next = NULL;
 416:	15 82       	std	Z+5, r1	; 0x05
 418:	14 82       	std	Z+4, r1	; 0x04
    if (setjmp(newp->context) == 1) {
 41a:	cf 01       	movw	r24, r30
 41c:	06 96       	adiw	r24, 0x06	; 6
 41e:	0e 94 ae 03 	call	0x75c	; 0x75c <setjmp>
 422:	01 97       	sbiw	r24, 0x01	; 1
 424:	91 f1       	breq	.+100    	; 0x48a <__DATA_REGION_LENGTH__+0x8a>
        current->function(current->arg);
        DISABLE();
        enqueue(current, &freeQ);
        dispatch(dequeue(&readyQ));
    }
    SETSTACK(&newp->context, &newp->stack);
 426:	e9 81       	ldd	r30, Y+1	; 0x01
 428:	fa 81       	ldd	r31, Y+2	; 0x02
 42a:	36 96       	adiw	r30, 0x06	; 6
 42c:	89 81       	ldd	r24, Y+1	; 0x01
 42e:	9a 81       	ldd	r25, Y+2	; 0x02
 430:	87 59       	subi	r24, 0x97	; 151
 432:	9f 4f       	sbci	r25, 0xFF	; 255
 434:	91 8b       	std	Z+17, r25	; 0x11
 436:	80 8b       	std	Z+16, r24	; 0x10
 438:	93 8b       	std	Z+19, r25	; 0x13
 43a:	82 8b       	std	Z+18, r24	; 0x12
	OCR1A = 8000000/(1024 * 20);
	TCNT1 = 0x0;
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 43c:	e9 81       	ldd	r30, Y+1	; 0x01
 43e:	fa 81       	ldd	r31, Y+2	; 0x02
 440:	15 82       	std	Z+5, r1	; 0x05
 442:	14 82       	std	Z+4, r1	; 0x04
    if (*queue == NULL) {
 444:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <readyQ>
 448:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <readyQ+0x1>
 44c:	30 97       	sbiw	r30, 0x00	; 0
 44e:	11 f4       	brne	.+4      	; 0x454 <__DATA_REGION_LENGTH__+0x54>
 450:	10 c0       	rjmp	.+32     	; 0x472 <__DATA_REGION_LENGTH__+0x72>
        *queue = p;
    } else {
        thread q = *queue;
        while (q->next)
 452:	fc 01       	movw	r30, r24
 454:	84 81       	ldd	r24, Z+4	; 0x04
 456:	95 81       	ldd	r25, Z+5	; 0x05
 458:	00 97       	sbiw	r24, 0x00	; 0
 45a:	d9 f7       	brne	.-10     	; 0x452 <__DATA_REGION_LENGTH__+0x52>
            q = q->next;
        q->next = p;
 45c:	89 81       	ldd	r24, Y+1	; 0x01
 45e:	9a 81       	ldd	r25, Y+2	; 0x02
 460:	95 83       	std	Z+5, r25	; 0x05
 462:	84 83       	std	Z+4, r24	; 0x04
        dispatch(dequeue(&readyQ));
    }
    SETSTACK(&newp->context, &newp->stack);

    enqueue(newp, &readyQ);
    ENABLE();
 464:	78 94       	sei
}
 466:	0f 90       	pop	r0
 468:	0f 90       	pop	r0
 46a:	df 91       	pop	r29
 46c:	cf 91       	pop	r28
 46e:	08 95       	ret
 470:	ff cf       	rjmp	.-2      	; 0x470 <__DATA_REGION_LENGTH__+0x70>
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
    if (*queue == NULL) {
        *queue = p;
 472:	29 81       	ldd	r18, Y+1	; 0x01
 474:	3a 81       	ldd	r19, Y+2	; 0x02
 476:	30 93 21 01 	sts	0x0121, r19	; 0x800121 <readyQ+0x1>
 47a:	20 93 20 01 	sts	0x0120, r18	; 0x800120 <readyQ>
        dispatch(dequeue(&readyQ));
    }
    SETSTACK(&newp->context, &newp->stack);

    enqueue(newp, &readyQ);
    ENABLE();
 47e:	78 94       	sei
}
 480:	0f 90       	pop	r0
 482:	0f 90       	pop	r0
 484:	df 91       	pop	r29
 486:	cf 91       	pop	r28
 488:	08 95       	ret
    newp = dequeue(&freeQ);
    newp->function = function;
    newp->arg = arg;
    newp->next = NULL;
    if (setjmp(newp->context) == 1) {
        ENABLE();
 48a:	78 94       	sei
        current->function(current->arg);
 48c:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 490:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 494:	ed 91       	ld	r30, X+
 496:	fc 91       	ld	r31, X
 498:	11 97       	sbiw	r26, 0x01	; 1
 49a:	12 96       	adiw	r26, 0x02	; 2
 49c:	8d 91       	ld	r24, X+
 49e:	9c 91       	ld	r25, X
 4a0:	13 97       	sbiw	r26, 0x03	; 3
 4a2:	09 95       	icall
        DISABLE();
 4a4:	f8 94       	cli
        enqueue(current, &freeQ);
 4a6:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 4aa:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
	OCR1A = 8000000/(1024 * 20);
	TCNT1 = 0x0;
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 4ae:	15 96       	adiw	r26, 0x05	; 5
 4b0:	1c 92       	st	X, r1
 4b2:	1e 92       	st	-X, r1
 4b4:	14 97       	sbiw	r26, 0x04	; 4
    if (*queue == NULL) {
 4b6:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <freeQ>
 4ba:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <freeQ+0x1>
 4be:	30 97       	sbiw	r30, 0x00	; 0
 4c0:	11 f4       	brne	.+4      	; 0x4c6 <__DATA_REGION_LENGTH__+0xc6>
 4c2:	17 c0       	rjmp	.+46     	; 0x4f2 <__DATA_REGION_LENGTH__+0xf2>
        *queue = p;
    } else {
        thread q = *queue;
        while (q->next)
 4c4:	fc 01       	movw	r30, r24
 4c6:	84 81       	ldd	r24, Z+4	; 0x04
 4c8:	95 81       	ldd	r25, Z+5	; 0x05
 4ca:	00 97       	sbiw	r24, 0x00	; 0
 4cc:	d9 f7       	brne	.-10     	; 0x4c4 <__DATA_REGION_LENGTH__+0xc4>
            q = q->next;
        q->next = p;
 4ce:	b5 83       	std	Z+5, r27	; 0x05
 4d0:	a4 83       	std	Z+4, r26	; 0x04
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 4d2:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <readyQ>
 4d6:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <readyQ+0x1>
    if (*queue) {
 4da:	00 97       	sbiw	r24, 0x00	; 0
 4dc:	a1 f0       	breq	.+40     	; 0x506 <__stack+0x7>
        *queue = (*queue)->next;
 4de:	fc 01       	movw	r30, r24
 4e0:	24 81       	ldd	r18, Z+4	; 0x04
 4e2:	35 81       	ldd	r19, Z+5	; 0x05
 4e4:	30 93 21 01 	sts	0x0121, r19	; 0x800121 <readyQ+0x1>
 4e8:	20 93 20 01 	sts	0x0120, r18	; 0x800120 <readyQ>
    if (setjmp(newp->context) == 1) {
        ENABLE();
        current->function(current->arg);
        DISABLE();
        enqueue(current, &freeQ);
        dispatch(dequeue(&readyQ));
 4ec:	0e 94 96 01 	call	0x32c	; 0x32c <dispatch>
 4f0:	9a cf       	rjmp	.-204    	; 0x426 <__DATA_REGION_LENGTH__+0x26>
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
    if (*queue == NULL) {
        *queue = p;
 4f2:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <freeQ+0x1>
 4f6:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <freeQ>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 4fa:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <readyQ>
 4fe:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <readyQ+0x1>
    if (*queue) {
 502:	00 97       	sbiw	r24, 0x00	; 0
 504:	61 f7       	brne	.-40     	; 0x4de <__DATA_REGION_LENGTH__+0xde>
 506:	ff cf       	rjmp	.-2      	; 0x506 <__stack+0x7>

00000508 <__vector_3>:
    enqueue(newp, &readyQ);
    ENABLE();
}

// Interrupt handler for button
ISR(PCINT1_vect) {
 508:	1f 92       	push	r1
 50a:	0f 92       	push	r0
 50c:	0f b6       	in	r0, 0x3f	; 63
 50e:	0f 92       	push	r0
 510:	11 24       	eor	r1, r1
}
 512:	0f 90       	pop	r0
 514:	0f be       	out	0x3f, r0	; 63
 516:	0f 90       	pop	r0
 518:	1f 90       	pop	r1
 51a:	18 95       	reti

0000051c <yield>:
	yield();
}

// Change thread
void yield(void) {
	DISABLE();
 51c:	f8 94       	cli
	enqueue(current, &readyQ);
 51e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 522:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
	OCR1A = 8000000/(1024 * 20);
	TCNT1 = 0x0;
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 526:	fc 01       	movw	r30, r24
 528:	15 82       	std	Z+5, r1	; 0x05
 52a:	14 82       	std	Z+4, r1	; 0x04
    if (*queue == NULL) {
 52c:	a0 91 20 01 	lds	r26, 0x0120	; 0x800120 <readyQ>
 530:	b0 91 21 01 	lds	r27, 0x0121	; 0x800121 <readyQ+0x1>
 534:	10 97       	sbiw	r26, 0x00	; 0
 536:	b9 f0       	breq	.+46     	; 0x566 <yield+0x4a>
 538:	fd 01       	movw	r30, r26
 53a:	01 c0       	rjmp	.+2      	; 0x53e <yield+0x22>
        *queue = p;
    } else {
        thread q = *queue;
        while (q->next)
 53c:	f9 01       	movw	r30, r18
 53e:	24 81       	ldd	r18, Z+4	; 0x04
 540:	35 81       	ldd	r19, Z+5	; 0x05
 542:	21 15       	cp	r18, r1
 544:	31 05       	cpc	r19, r1
 546:	d1 f7       	brne	.-12     	; 0x53c <yield+0x20>
            q = q->next;
        q->next = p;
 548:	95 83       	std	Z+5, r25	; 0x05
 54a:	84 83       	std	Z+4, r24	; 0x04
 54c:	14 96       	adiw	r26, 0x04	; 4
 54e:	2d 91       	ld	r18, X+
 550:	3c 91       	ld	r19, X
 552:	15 97       	sbiw	r26, 0x05	; 5
 554:	cd 01       	movw	r24, r26
}

static thread dequeue(thread *queue) {
    thread p = *queue;
    if (*queue) {
        *queue = (*queue)->next;
 556:	30 93 21 01 	sts	0x0121, r19	; 0x800121 <readyQ+0x1>
 55a:	20 93 20 01 	sts	0x0120, r18	; 0x800120 <readyQ>

// Change thread
void yield(void) {
	DISABLE();
	enqueue(current, &readyQ);
	dispatch(dequeue(&readyQ));
 55e:	0e 94 96 01 	call	0x32c	; 0x32c <dispatch>
	ENABLE();
 562:	78 94       	sei
}
 564:	08 95       	ret
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
    if (*queue) {
 566:	00 97       	sbiw	r24, 0x00	; 0
 568:	09 f4       	brne	.+2      	; 0x56c <yield+0x50>
 56a:	ff cf       	rjmp	.-2      	; 0x56a <yield+0x4e>
 56c:	20 e0       	ldi	r18, 0x00	; 0
 56e:	30 e0       	ldi	r19, 0x00	; 0
 570:	f2 cf       	rjmp	.-28     	; 0x556 <yield+0x3a>

00000572 <__vector_7>:
// Interrupt handler for button
ISR(PCINT1_vect) {
}

// Should be interrupt handler for sequential interrupts
ISR(TIMER1_COMPA_vect) {
 572:	1f 92       	push	r1
 574:	0f 92       	push	r0
 576:	0f b6       	in	r0, 0x3f	; 63
 578:	0f 92       	push	r0
 57a:	11 24       	eor	r1, r1
 57c:	2f 93       	push	r18
 57e:	3f 93       	push	r19
 580:	4f 93       	push	r20
 582:	5f 93       	push	r21
 584:	6f 93       	push	r22
 586:	7f 93       	push	r23
 588:	8f 93       	push	r24
 58a:	9f 93       	push	r25
 58c:	af 93       	push	r26
 58e:	bf 93       	push	r27
 590:	ef 93       	push	r30
 592:	ff 93       	push	r31
	timer++;
 594:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <timer>
 598:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <timer+0x1>
 59c:	01 96       	adiw	r24, 0x01	; 1
 59e:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timer+0x1>
 5a2:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timer>
	yield();
 5a6:	0e 94 8e 02 	call	0x51c	; 0x51c <yield>
}
 5aa:	ff 91       	pop	r31
 5ac:	ef 91       	pop	r30
 5ae:	bf 91       	pop	r27
 5b0:	af 91       	pop	r26
 5b2:	9f 91       	pop	r25
 5b4:	8f 91       	pop	r24
 5b6:	7f 91       	pop	r23
 5b8:	6f 91       	pop	r22
 5ba:	5f 91       	pop	r21
 5bc:	4f 91       	pop	r20
 5be:	3f 91       	pop	r19
 5c0:	2f 91       	pop	r18
 5c2:	0f 90       	pop	r0
 5c4:	0f be       	out	0x3f, r0	; 63
 5c6:	0f 90       	pop	r0
 5c8:	1f 90       	pop	r1
 5ca:	18 95       	reti

000005cc <lock>:
	enqueue(current, &readyQ);
	dispatch(dequeue(&readyQ));
	ENABLE();
}

void lock(mutex *m) {
 5cc:	cf 93       	push	r28
 5ce:	df 93       	push	r29
 5d0:	dc 01       	movw	r26, r24
	DISABLE();
 5d2:	f8 94       	cli
	
	// If it's unlocked, lock it
	if(m->locked == 0){
 5d4:	8d 91       	ld	r24, X+
 5d6:	9c 91       	ld	r25, X
 5d8:	11 97       	sbiw	r26, 0x01	; 1
 5da:	89 2b       	or	r24, r25
 5dc:	41 f1       	breq	.+80     	; 0x62e <lock+0x62>
	}
	
	// Else - put the current thread in the back of the line of the waitQ
	// and run the first thread in the readyQ
	else{
		enqueue(current, &(m->waitQ));
 5de:	c0 91 00 01 	lds	r28, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 5e2:	d0 91 01 01 	lds	r29, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
	OCR1A = 8000000/(1024 * 20);
	TCNT1 = 0x0;
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 5e6:	1d 82       	std	Y+5, r1	; 0x05
 5e8:	1c 82       	std	Y+4, r1	; 0x04
    if (*queue == NULL) {
 5ea:	12 96       	adiw	r26, 0x02	; 2
 5ec:	ed 91       	ld	r30, X+
 5ee:	fc 91       	ld	r31, X
 5f0:	13 97       	sbiw	r26, 0x03	; 3
 5f2:	30 97       	sbiw	r30, 0x00	; 0
 5f4:	11 f4       	brne	.+4      	; 0x5fa <lock+0x2e>
 5f6:	23 c0       	rjmp	.+70     	; 0x63e <lock+0x72>
        *queue = p;
    } else {
        thread q = *queue;
        while (q->next)
 5f8:	fc 01       	movw	r30, r24
 5fa:	84 81       	ldd	r24, Z+4	; 0x04
 5fc:	95 81       	ldd	r25, Z+5	; 0x05
 5fe:	00 97       	sbiw	r24, 0x00	; 0
 600:	d9 f7       	brne	.-10     	; 0x5f8 <lock+0x2c>
            q = q->next;
        q->next = p;
 602:	d5 83       	std	Z+5, r29	; 0x05
 604:	c4 83       	std	Z+4, r28	; 0x04
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 606:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <readyQ>
 60a:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <readyQ+0x1>
    if (*queue) {
 60e:	00 97       	sbiw	r24, 0x00	; 0
 610:	69 f0       	breq	.+26     	; 0x62c <lock+0x60>
        *queue = (*queue)->next;
 612:	fc 01       	movw	r30, r24
 614:	24 81       	ldd	r18, Z+4	; 0x04
 616:	35 81       	ldd	r19, Z+5	; 0x05
 618:	30 93 21 01 	sts	0x0121, r19	; 0x800121 <readyQ+0x1>
 61c:	20 93 20 01 	sts	0x0120, r18	; 0x800120 <readyQ>
	
	// Else - put the current thread in the back of the line of the waitQ
	// and run the first thread in the readyQ
	else{
		enqueue(current, &(m->waitQ));
		dispatch(dequeue(&readyQ));
 620:	0e 94 96 01 	call	0x32c	; 0x32c <dispatch>
	}
	ENABLE();
 624:	78 94       	sei
}
 626:	df 91       	pop	r29
 628:	cf 91       	pop	r28
 62a:	08 95       	ret
 62c:	ff cf       	rjmp	.-2      	; 0x62c <lock+0x60>
void lock(mutex *m) {
	DISABLE();
	
	// If it's unlocked, lock it
	if(m->locked == 0){
		m->locked = 1;
 62e:	81 e0       	ldi	r24, 0x01	; 1
 630:	90 e0       	ldi	r25, 0x00	; 0
 632:	8d 93       	st	X+, r24
 634:	9c 93       	st	X, r25
	// and run the first thread in the readyQ
	else{
		enqueue(current, &(m->waitQ));
		dispatch(dequeue(&readyQ));
	}
	ENABLE();
 636:	78 94       	sei
}
 638:	df 91       	pop	r29
 63a:	cf 91       	pop	r28
 63c:	08 95       	ret
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
    if (*queue == NULL) {
        *queue = p;
 63e:	13 96       	adiw	r26, 0x03	; 3
 640:	dc 93       	st	X, r29
 642:	ce 93       	st	-X, r28
 644:	12 97       	sbiw	r26, 0x02	; 2
 646:	df cf       	rjmp	.-66     	; 0x606 <lock+0x3a>

00000648 <unlock>:
		dispatch(dequeue(&readyQ));
	}
	ENABLE();
}

void unlock(mutex *m) {
 648:	cf 93       	push	r28
 64a:	df 93       	push	r29
 64c:	fc 01       	movw	r30, r24
	
	DISABLE();
 64e:	f8 94       	cli
	
	// If threads are available in the waitQ, put the current thread in the last position of the readyQ
	// and run the first thread in the waitQ
	if(m->waitQ != NULL){
 650:	82 81       	ldd	r24, Z+2	; 0x02
 652:	93 81       	ldd	r25, Z+3	; 0x03
 654:	89 2b       	or	r24, r25
 656:	51 f1       	breq	.+84     	; 0x6ac <unlock+0x64>
		enqueue(current, &readyQ);
 658:	c0 91 00 01 	lds	r28, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 65c:	d0 91 01 01 	lds	r29, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
	OCR1A = 8000000/(1024 * 20);
	TCNT1 = 0x0;
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 660:	1d 82       	std	Y+5, r1	; 0x05
 662:	1c 82       	std	Y+4, r1	; 0x04
    if (*queue == NULL) {
 664:	a0 91 20 01 	lds	r26, 0x0120	; 0x800120 <readyQ>
 668:	b0 91 21 01 	lds	r27, 0x0121	; 0x800121 <readyQ+0x1>
 66c:	10 97       	sbiw	r26, 0x00	; 0
 66e:	11 f4       	brne	.+4      	; 0x674 <unlock+0x2c>
 670:	23 c0       	rjmp	.+70     	; 0x6b8 <unlock+0x70>
        *queue = p;
    } else {
        thread q = *queue;
        while (q->next)
 672:	dc 01       	movw	r26, r24
 674:	14 96       	adiw	r26, 0x04	; 4
 676:	8d 91       	ld	r24, X+
 678:	9c 91       	ld	r25, X
 67a:	15 97       	sbiw	r26, 0x05	; 5
 67c:	00 97       	sbiw	r24, 0x00	; 0
 67e:	c9 f7       	brne	.-14     	; 0x672 <unlock+0x2a>
            q = q->next;
        q->next = p;
 680:	15 96       	adiw	r26, 0x05	; 5
 682:	dc 93       	st	X, r29
 684:	ce 93       	st	-X, r28
 686:	14 97       	sbiw	r26, 0x04	; 4
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 688:	82 81       	ldd	r24, Z+2	; 0x02
 68a:	93 81       	ldd	r25, Z+3	; 0x03
    if (*queue) {
 68c:	00 97       	sbiw	r24, 0x00	; 0
 68e:	69 f0       	breq	.+26     	; 0x6aa <unlock+0x62>
        *queue = (*queue)->next;
 690:	dc 01       	movw	r26, r24
 692:	14 96       	adiw	r26, 0x04	; 4
 694:	2d 91       	ld	r18, X+
 696:	3c 91       	ld	r19, X
 698:	15 97       	sbiw	r26, 0x05	; 5
 69a:	33 83       	std	Z+3, r19	; 0x03
 69c:	22 83       	std	Z+2, r18	; 0x02
	
	// If threads are available in the waitQ, put the current thread in the last position of the readyQ
	// and run the first thread in the waitQ
	if(m->waitQ != NULL){
		enqueue(current, &readyQ);
		dispatch(dequeue(&(m->waitQ)));
 69e:	0e 94 96 01 	call	0x32c	; 0x32c <dispatch>
	// Else - unlock (put the locked flag to 0)
	else{
		m->locked = 0;
	}
	
	ENABLE();
 6a2:	78 94       	sei
}
 6a4:	df 91       	pop	r29
 6a6:	cf 91       	pop	r28
 6a8:	08 95       	ret
 6aa:	ff cf       	rjmp	.-2      	; 0x6aa <unlock+0x62>
		dispatch(dequeue(&(m->waitQ)));
	}
	
	// Else - unlock (put the locked flag to 0)
	else{
		m->locked = 0;
 6ac:	11 82       	std	Z+1, r1	; 0x01
 6ae:	10 82       	st	Z, r1
	}
	
	ENABLE();
 6b0:	78 94       	sei
}
 6b2:	df 91       	pop	r29
 6b4:	cf 91       	pop	r28
 6b6:	08 95       	ret
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
    if (*queue == NULL) {
        *queue = p;
 6b8:	d0 93 21 01 	sts	0x0121, r29	; 0x800121 <readyQ+0x1>
 6bc:	c0 93 20 01 	sts	0x0120, r28	; 0x800120 <readyQ>
 6c0:	e3 cf       	rjmp	.-58     	; 0x688 <unlock+0x40>

000006c2 <whatisclock>:
	ENABLE();
}

int whatisclock(){
	return(timer);
}
 6c2:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <timer>
 6c6:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <timer+0x1>
 6ca:	08 95       	ret

000006cc <resetclock>:

void resetclock(){
	DISABLE();
 6cc:	f8 94       	cli
	timer = 0;
 6ce:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <timer+0x1>
 6d2:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <timer>
	ENABLE();
 6d6:	78 94       	sei
 6d8:	08 95       	ret

000006da <__divmodsi4>:
 6da:	05 2e       	mov	r0, r21
 6dc:	97 fb       	bst	r25, 7
 6de:	1e f4       	brtc	.+6      	; 0x6e6 <__divmodsi4+0xc>
 6e0:	00 94       	com	r0
 6e2:	0e 94 84 03 	call	0x708	; 0x708 <__negsi2>
 6e6:	57 fd       	sbrc	r21, 7
 6e8:	07 d0       	rcall	.+14     	; 0x6f8 <__divmodsi4_neg2>
 6ea:	0e 94 8c 03 	call	0x718	; 0x718 <__udivmodsi4>
 6ee:	07 fc       	sbrc	r0, 7
 6f0:	03 d0       	rcall	.+6      	; 0x6f8 <__divmodsi4_neg2>
 6f2:	4e f4       	brtc	.+18     	; 0x706 <__divmodsi4_exit>
 6f4:	0c 94 84 03 	jmp	0x708	; 0x708 <__negsi2>

000006f8 <__divmodsi4_neg2>:
 6f8:	50 95       	com	r21
 6fa:	40 95       	com	r20
 6fc:	30 95       	com	r19
 6fe:	21 95       	neg	r18
 700:	3f 4f       	sbci	r19, 0xFF	; 255
 702:	4f 4f       	sbci	r20, 0xFF	; 255
 704:	5f 4f       	sbci	r21, 0xFF	; 255

00000706 <__divmodsi4_exit>:
 706:	08 95       	ret

00000708 <__negsi2>:
 708:	90 95       	com	r25
 70a:	80 95       	com	r24
 70c:	70 95       	com	r23
 70e:	61 95       	neg	r22
 710:	7f 4f       	sbci	r23, 0xFF	; 255
 712:	8f 4f       	sbci	r24, 0xFF	; 255
 714:	9f 4f       	sbci	r25, 0xFF	; 255
 716:	08 95       	ret

00000718 <__udivmodsi4>:
 718:	a1 e2       	ldi	r26, 0x21	; 33
 71a:	1a 2e       	mov	r1, r26
 71c:	aa 1b       	sub	r26, r26
 71e:	bb 1b       	sub	r27, r27
 720:	fd 01       	movw	r30, r26
 722:	0d c0       	rjmp	.+26     	; 0x73e <__udivmodsi4_ep>

00000724 <__udivmodsi4_loop>:
 724:	aa 1f       	adc	r26, r26
 726:	bb 1f       	adc	r27, r27
 728:	ee 1f       	adc	r30, r30
 72a:	ff 1f       	adc	r31, r31
 72c:	a2 17       	cp	r26, r18
 72e:	b3 07       	cpc	r27, r19
 730:	e4 07       	cpc	r30, r20
 732:	f5 07       	cpc	r31, r21
 734:	20 f0       	brcs	.+8      	; 0x73e <__udivmodsi4_ep>
 736:	a2 1b       	sub	r26, r18
 738:	b3 0b       	sbc	r27, r19
 73a:	e4 0b       	sbc	r30, r20
 73c:	f5 0b       	sbc	r31, r21

0000073e <__udivmodsi4_ep>:
 73e:	66 1f       	adc	r22, r22
 740:	77 1f       	adc	r23, r23
 742:	88 1f       	adc	r24, r24
 744:	99 1f       	adc	r25, r25
 746:	1a 94       	dec	r1
 748:	69 f7       	brne	.-38     	; 0x724 <__udivmodsi4_loop>
 74a:	60 95       	com	r22
 74c:	70 95       	com	r23
 74e:	80 95       	com	r24
 750:	90 95       	com	r25
 752:	9b 01       	movw	r18, r22
 754:	ac 01       	movw	r20, r24
 756:	bd 01       	movw	r22, r26
 758:	cf 01       	movw	r24, r30
 75a:	08 95       	ret

0000075c <setjmp>:
 75c:	dc 01       	movw	r26, r24
 75e:	2d 92       	st	X+, r2
 760:	3d 92       	st	X+, r3
 762:	4d 92       	st	X+, r4
 764:	5d 92       	st	X+, r5
 766:	6d 92       	st	X+, r6
 768:	7d 92       	st	X+, r7
 76a:	8d 92       	st	X+, r8
 76c:	9d 92       	st	X+, r9
 76e:	ad 92       	st	X+, r10
 770:	bd 92       	st	X+, r11
 772:	cd 92       	st	X+, r12
 774:	dd 92       	st	X+, r13
 776:	ed 92       	st	X+, r14
 778:	fd 92       	st	X+, r15
 77a:	0d 93       	st	X+, r16
 77c:	1d 93       	st	X+, r17
 77e:	cd 93       	st	X+, r28
 780:	dd 93       	st	X+, r29
 782:	ff 91       	pop	r31
 784:	ef 91       	pop	r30
 786:	8d b7       	in	r24, 0x3d	; 61
 788:	8d 93       	st	X+, r24
 78a:	8e b7       	in	r24, 0x3e	; 62
 78c:	8d 93       	st	X+, r24
 78e:	8f b7       	in	r24, 0x3f	; 63
 790:	8d 93       	st	X+, r24
 792:	ed 93       	st	X+, r30
 794:	fd 93       	st	X+, r31
 796:	88 27       	eor	r24, r24
 798:	99 27       	eor	r25, r25
 79a:	09 94       	ijmp

0000079c <longjmp>:
 79c:	dc 01       	movw	r26, r24
 79e:	cb 01       	movw	r24, r22
 7a0:	81 30       	cpi	r24, 0x01	; 1
 7a2:	91 05       	cpc	r25, r1
 7a4:	81 1d       	adc	r24, r1
 7a6:	2d 90       	ld	r2, X+
 7a8:	3d 90       	ld	r3, X+
 7aa:	4d 90       	ld	r4, X+
 7ac:	5d 90       	ld	r5, X+
 7ae:	6d 90       	ld	r6, X+
 7b0:	7d 90       	ld	r7, X+
 7b2:	8d 90       	ld	r8, X+
 7b4:	9d 90       	ld	r9, X+
 7b6:	ad 90       	ld	r10, X+
 7b8:	bd 90       	ld	r11, X+
 7ba:	cd 90       	ld	r12, X+
 7bc:	dd 90       	ld	r13, X+
 7be:	ed 90       	ld	r14, X+
 7c0:	fd 90       	ld	r15, X+
 7c2:	0d 91       	ld	r16, X+
 7c4:	1d 91       	ld	r17, X+
 7c6:	cd 91       	ld	r28, X+
 7c8:	dd 91       	ld	r29, X+
 7ca:	ed 91       	ld	r30, X+
 7cc:	fd 91       	ld	r31, X+
 7ce:	0d 90       	ld	r0, X+
 7d0:	f8 94       	cli
 7d2:	fe bf       	out	0x3e, r31	; 62
 7d4:	0f be       	out	0x3f, r0	; 63
 7d6:	ed bf       	out	0x3d, r30	; 61
 7d8:	ed 91       	ld	r30, X+
 7da:	fd 91       	ld	r31, X+
 7dc:	09 94       	ijmp

000007de <_exit>:
 7de:	f8 94       	cli

000007e0 <__stop_program>:
 7e0:	ff cf       	rjmp	.-2      	; 0x7e0 <__stop_program>
