
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  000007de  00000872  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000022b  00800118  00800118  0000088a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000088a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  000008fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001316  00000000  00000000  000009b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bd4  00000000  00000000  00001cca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000813  00000000  00000000  0000289e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000230  00000000  00000000  000030b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005b8  00000000  00000000  000032e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ba8  00000000  00000000  0000389c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  00004444  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 82 02 	jmp	0x504	; 0x504 <__vector_3>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 b7 02 	jmp	0x56e	; 0x56e <__vector_7>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	ee ed       	ldi	r30, 0xDE	; 222
  70:	f7 e0       	ldi	r31, 0x07	; 7
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	a8 31       	cpi	r26, 0x18	; 24
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
  7e:	23 e0       	ldi	r18, 0x03	; 3
  80:	a8 e1       	ldi	r26, 0x18	; 24
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	a3 34       	cpi	r26, 0x43	; 67
  8a:	b2 07       	cpc	r27, r18
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 75 01 	call	0x2ea	; 0x2ea <main>
  92:	0c 94 ed 03 	jmp	0x7da	; 0x7da <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <writeChar>:
	}
}
bool is_prime(long i){
	for(int n = 2; n < i; n++){
		if(i % n == 0){
			return(false);
  9a:	cf 93       	push	r28
  9c:	df 93       	push	r29
  9e:	cd b7       	in	r28, 0x3d	; 61
  a0:	de b7       	in	r29, 0x3e	; 62
  a2:	64 97       	sbiw	r28, 0x14	; 20
  a4:	0f b6       	in	r0, 0x3f	; 63
  a6:	f8 94       	cli
  a8:	de bf       	out	0x3e, r29	; 62
  aa:	0f be       	out	0x3f, r0	; 63
  ac:	cd bf       	out	0x3d, r28	; 61
  ae:	94 e1       	ldi	r25, 0x14	; 20
  b0:	e4 e0       	ldi	r30, 0x04	; 4
  b2:	f1 e0       	ldi	r31, 0x01	; 1
  b4:	de 01       	movw	r26, r28
  b6:	11 96       	adiw	r26, 0x01	; 1
  b8:	01 90       	ld	r0, Z+
  ba:	0d 92       	st	X+, r0
  bc:	9a 95       	dec	r25
  be:	e1 f7       	brne	.-8      	; 0xb8 <writeChar+0x1e>
  c0:	66 30       	cpi	r22, 0x06	; 6
  c2:	71 05       	cpc	r23, r1
  c4:	50 f5       	brcc	.+84     	; 0x11a <writeChar+0x80>
  c6:	fb 01       	movw	r30, r22
  c8:	f5 95       	asr	r31
  ca:	e7 95       	ror	r30
  cc:	e4 51       	subi	r30, 0x14	; 20
  ce:	ff 4f       	sbci	r31, 0xFF	; 255
  d0:	a8 2f       	mov	r26, r24
  d2:	b0 e0       	ldi	r27, 0x00	; 0
  d4:	d0 97       	sbiw	r26, 0x30	; 48
  d6:	aa 0f       	add	r26, r26
  d8:	bb 1f       	adc	r27, r27
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	8c 0f       	add	r24, r28
  e0:	9d 1f       	adc	r25, r29
  e2:	a8 0f       	add	r26, r24
  e4:	b9 1f       	adc	r27, r25
  e6:	4d 91       	ld	r20, X+
  e8:	5c 91       	ld	r21, X
  ea:	61 70       	andi	r22, 0x01	; 1
  ec:	77 27       	eor	r23, r23
  ee:	df 01       	movw	r26, r30
  f0:	54 96       	adiw	r26, 0x14	; 20
  f2:	ca 01       	movw	r24, r20
  f4:	8f 70       	andi	r24, 0x0F	; 15
  f6:	99 27       	eor	r25, r25
  f8:	61 30       	cpi	r22, 0x01	; 1
  fa:	71 05       	cpc	r23, r1
  fc:	b9 f0       	breq	.+46     	; 0x12c <writeChar+0x92>
  fe:	20 81       	ld	r18, Z
 100:	20 7f       	andi	r18, 0xF0	; 240
 102:	82 2b       	or	r24, r18
 104:	80 83       	st	Z, r24
 106:	35 96       	adiw	r30, 0x05	; 5
 108:	52 95       	swap	r21
 10a:	42 95       	swap	r20
 10c:	4f 70       	andi	r20, 0x0F	; 15
 10e:	45 27       	eor	r20, r21
 110:	5f 70       	andi	r21, 0x0F	; 15
 112:	45 27       	eor	r20, r21
 114:	ea 17       	cp	r30, r26
 116:	fb 07       	cpc	r31, r27
 118:	61 f7       	brne	.-40     	; 0xf2 <writeChar+0x58>
 11a:	64 96       	adiw	r28, 0x14	; 20
 11c:	0f b6       	in	r0, 0x3f	; 63
 11e:	f8 94       	cli
 120:	de bf       	out	0x3e, r29	; 62
 122:	0f be       	out	0x3f, r0	; 63
 124:	cd bf       	out	0x3d, r28	; 61
 126:	df 91       	pop	r29
 128:	cf 91       	pop	r28
 12a:	08 95       	ret
 12c:	82 95       	swap	r24
 12e:	92 95       	swap	r25
 130:	90 7f       	andi	r25, 0xF0	; 240
 132:	98 27       	eor	r25, r24
 134:	80 7f       	andi	r24, 0xF0	; 240
 136:	98 27       	eor	r25, r24
 138:	20 81       	ld	r18, Z
 13a:	2f 70       	andi	r18, 0x0F	; 15
 13c:	e2 cf       	rjmp	.-60     	; 0x102 <writeChar+0x68>

0000013e <printAt>:
 13e:	8f 92       	push	r8
 140:	9f 92       	push	r9
 142:	af 92       	push	r10
 144:	bf 92       	push	r11
 146:	cf 92       	push	r12
 148:	df 92       	push	r13
 14a:	ef 92       	push	r14
 14c:	ff 92       	push	r15
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29
 152:	4b 01       	movw	r8, r22
 154:	5c 01       	movw	r10, r24
 156:	ea 01       	movw	r28, r20
 158:	88 e1       	ldi	r24, 0x18	; 24
 15a:	91 e0       	ldi	r25, 0x01	; 1
 15c:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <lock>
 160:	c5 01       	movw	r24, r10
 162:	b4 01       	movw	r22, r8
 164:	24 e6       	ldi	r18, 0x64	; 100
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	40 e0       	ldi	r20, 0x00	; 0
 16a:	50 e0       	ldi	r21, 0x00	; 0
 16c:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <__divmodsi4>
 170:	2a e0       	ldi	r18, 0x0A	; 10
 172:	c2 2e       	mov	r12, r18
 174:	d1 2c       	mov	r13, r1
 176:	e1 2c       	mov	r14, r1
 178:	f1 2c       	mov	r15, r1
 17a:	a7 01       	movw	r20, r14
 17c:	96 01       	movw	r18, r12
 17e:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <__divmodsi4>
 182:	be 01       	movw	r22, r28
 184:	80 e3       	ldi	r24, 0x30	; 48
 186:	82 0f       	add	r24, r18
 188:	0e 94 4d 00 	call	0x9a	; 0x9a <writeChar>
 18c:	21 96       	adiw	r28, 0x01	; 1
 18e:	c5 01       	movw	r24, r10
 190:	b4 01       	movw	r22, r8
 192:	a7 01       	movw	r20, r14
 194:	96 01       	movw	r18, r12
 196:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <__divmodsi4>
 19a:	86 2f       	mov	r24, r22
 19c:	be 01       	movw	r22, r28
 19e:	80 5d       	subi	r24, 0xD0	; 208
 1a0:	0e 94 4d 00 	call	0x9a	; 0x9a <writeChar>
 1a4:	88 e1       	ldi	r24, 0x18	; 24
 1a6:	91 e0       	ldi	r25, 0x01	; 1
 1a8:	df 91       	pop	r29
 1aa:	cf 91       	pop	r28
 1ac:	ff 90       	pop	r15
 1ae:	ef 90       	pop	r14
 1b0:	df 90       	pop	r13
 1b2:	cf 90       	pop	r12
 1b4:	bf 90       	pop	r11
 1b6:	af 90       	pop	r10
 1b8:	9f 90       	pop	r9
 1ba:	8f 90       	pop	r8
 1bc:	0c 94 22 03 	jmp	0x644	; 0x644 <unlock>

000001c0 <button>:
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7fc0f4>
 1c6:	10 92 f9 00 	sts	0x00F9, r1	; 0x8000f9 <__TEXT_REGION_LENGTH__+0x7fc0f9>
 1ca:	c0 e0       	ldi	r28, 0x00	; 0
 1cc:	00 e0       	ldi	r16, 0x00	; 0
 1ce:	10 e0       	ldi	r17, 0x00	; 0
 1d0:	c1 2c       	mov	r12, r1
 1d2:	d1 2c       	mov	r13, r1
 1d4:	76 01       	movw	r14, r12
 1d6:	44 e0       	ldi	r20, 0x04	; 4
 1d8:	50 e0       	ldi	r21, 0x00	; 0
 1da:	c7 01       	movw	r24, r14
 1dc:	b6 01       	movw	r22, r12
 1de:	0e 94 9f 00 	call	0x13e	; 0x13e <printAt>
 1e2:	1f 99       	sbic	0x03, 7	; 3
 1e4:	17 c0       	rjmp	.+46     	; 0x214 <__EEPROM_REGION_LENGTH__+0x14>
 1e6:	c1 11       	cpse	r28, r1
 1e8:	2a c0       	rjmp	.+84     	; 0x23e <__EEPROM_REGION_LENGTH__+0x3e>
 1ea:	80 91 f9 00 	lds	r24, 0x00F9	; 0x8000f9 <__TEXT_REGION_LENGTH__+0x7fc0f9>
 1ee:	81 30       	cpi	r24, 0x01	; 1
 1f0:	41 f1       	breq	.+80     	; 0x242 <__EEPROM_REGION_LENGTH__+0x42>
 1f2:	1f 99       	sbic	0x03, 7	; 3
 1f4:	04 c0       	rjmp	.+8      	; 0x1fe <button+0x3e>
 1f6:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7fc0f4>
 1fa:	81 30       	cpi	r24, 0x01	; 1
 1fc:	99 f0       	breq	.+38     	; 0x224 <__EEPROM_REGION_LENGTH__+0x24>
 1fe:	1f 9b       	sbis	0x03, 7	; 3
 200:	ea cf       	rjmp	.-44     	; 0x1d6 <button+0x16>
 202:	c0 e0       	ldi	r28, 0x00	; 0
 204:	44 e0       	ldi	r20, 0x04	; 4
 206:	50 e0       	ldi	r21, 0x00	; 0
 208:	c7 01       	movw	r24, r14
 20a:	b6 01       	movw	r22, r12
 20c:	0e 94 9f 00 	call	0x13e	; 0x13e <printAt>
 210:	1f 9b       	sbis	0x03, 7	; 3
 212:	e9 cf       	rjmp	.-46     	; 0x1e6 <button+0x26>
 214:	1f 99       	sbic	0x03, 7	; 3
 216:	f3 cf       	rjmp	.-26     	; 0x1fe <button+0x3e>
 218:	c1 11       	cpse	r28, r1
 21a:	f1 cf       	rjmp	.-30     	; 0x1fe <button+0x3e>
 21c:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7fc0f4>
 220:	81 30       	cpi	r24, 0x01	; 1
 222:	69 f7       	brne	.-38     	; 0x1fe <button+0x3e>
 224:	0f 5f       	subi	r16, 0xFF	; 255
 226:	1f 4f       	sbci	r17, 0xFF	; 255
 228:	80 93 f9 00 	sts	0x00F9, r24	; 0x8000f9 <__TEXT_REGION_LENGTH__+0x7fc0f9>
 22c:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7fc0f4>
 230:	c1 e0       	ldi	r28, 0x01	; 1
 232:	68 01       	movw	r12, r16
 234:	01 2e       	mov	r0, r17
 236:	00 0c       	add	r0, r0
 238:	ee 08       	sbc	r14, r14
 23a:	ff 08       	sbc	r15, r15
 23c:	cc cf       	rjmp	.-104    	; 0x1d6 <button+0x16>
 23e:	83 b1       	in	r24, 0x03	; 3
 240:	de cf       	rjmp	.-68     	; 0x1fe <button+0x3e>
 242:	0f 5f       	subi	r16, 0xFF	; 255
 244:	1f 4f       	sbci	r17, 0xFF	; 255
 246:	10 92 f9 00 	sts	0x00F9, r1	; 0x8000f9 <__TEXT_REGION_LENGTH__+0x7fc0f9>
 24a:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7fc0f4>
 24e:	c1 e0       	ldi	r28, 0x01	; 1
 250:	68 01       	movw	r12, r16
 252:	01 2e       	mov	r0, r17
 254:	00 0c       	add	r0, r0
 256:	ee 08       	sbc	r14, r14
 258:	ff 08       	sbc	r15, r15
 25a:	bd cf       	rjmp	.-134    	; 0x1d6 <button+0x16>

0000025c <computePrimes>:
 25c:	ec 01       	movw	r28, r24
 25e:	81 2c       	mov	r8, r1
 260:	91 2c       	mov	r9, r1
 262:	54 01       	movw	r10, r8
 264:	83 94       	inc	r8
 266:	83 e0       	ldi	r24, 0x03	; 3
 268:	88 16       	cp	r8, r24
 26a:	91 04       	cpc	r9, r1
 26c:	a1 04       	cpc	r10, r1
 26e:	b1 04       	cpc	r11, r1
 270:	e4 f0       	brlt	.+56     	; 0x2aa <computePrimes+0x4e>
 272:	80 fe       	sbrs	r8, 0
 274:	1f c0       	rjmp	.+62     	; 0x2b4 <computePrimes+0x58>
 276:	83 e0       	ldi	r24, 0x03	; 3
 278:	c8 2e       	mov	r12, r24
 27a:	d1 2c       	mov	r13, r1
 27c:	e1 2c       	mov	r14, r1
 27e:	f1 2c       	mov	r15, r1
 280:	0d c0       	rjmp	.+26     	; 0x29c <computePrimes+0x40>
 282:	8f ef       	ldi	r24, 0xFF	; 255
 284:	c8 1a       	sub	r12, r24
 286:	d8 0a       	sbc	r13, r24
 288:	e8 0a       	sbc	r14, r24
 28a:	f8 0a       	sbc	r15, r24
 28c:	c5 01       	movw	r24, r10
 28e:	b4 01       	movw	r22, r8
 290:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <__divmodsi4>
 294:	67 2b       	or	r22, r23
 296:	68 2b       	or	r22, r24
 298:	69 2b       	or	r22, r25
 29a:	61 f0       	breq	.+24     	; 0x2b4 <computePrimes+0x58>
 29c:	96 01       	movw	r18, r12
 29e:	a7 01       	movw	r20, r14
 2a0:	c8 14       	cp	r12, r8
 2a2:	d9 04       	cpc	r13, r9
 2a4:	ea 04       	cpc	r14, r10
 2a6:	fb 04       	cpc	r15, r11
 2a8:	61 f7       	brne	.-40     	; 0x282 <computePrimes+0x26>
 2aa:	ae 01       	movw	r20, r28
 2ac:	c5 01       	movw	r24, r10
 2ae:	b4 01       	movw	r22, r8
 2b0:	0e 94 9f 00 	call	0x13e	; 0x13e <printAt>
 2b4:	8f ef       	ldi	r24, 0xFF	; 255
 2b6:	88 1a       	sub	r8, r24
 2b8:	98 0a       	sbc	r9, r24
 2ba:	a8 0a       	sbc	r10, r24
 2bc:	b8 0a       	sbc	r11, r24
 2be:	d3 cf       	rjmp	.-90     	; 0x266 <computePrimes+0xa>

000002c0 <blink>:
	return(true);
}

void blink(int uselessSpawn){
	int clk = 20;
	int on = 0;
 2c0:	c0 e0       	ldi	r28, 0x00	; 0
 2c2:	d0 e0       	ldi	r29, 0x00	; 0
	
	while(1){
		if(whatisclock() >= clk){
			resetclock();
			if(on == 0){
				LCDDR3 = 0x1;
 2c4:	11 e0       	ldi	r17, 0x01	; 1
void blink(int uselessSpawn){
	int clk = 20;
	int on = 0;
	
	while(1){
		if(whatisclock() >= clk){
 2c6:	0e 94 5f 03 	call	0x6be	; 0x6be <whatisclock>
 2ca:	44 97       	sbiw	r24, 0x14	; 20
 2cc:	e4 f3       	brlt	.-8      	; 0x2c6 <blink+0x6>
			resetclock();
 2ce:	0e 94 64 03 	call	0x6c8	; 0x6c8 <resetclock>
			if(on == 0){
 2d2:	cd 2b       	or	r28, r29
 2d4:	29 f4       	brne	.+10     	; 0x2e0 <blink+0x20>
				LCDDR3 = 0x1;
 2d6:	10 93 ef 00 	sts	0x00EF, r17	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7fc0ef>
				on = 1;
 2da:	c1 e0       	ldi	r28, 0x01	; 1
 2dc:	d0 e0       	ldi	r29, 0x00	; 0
 2de:	f3 cf       	rjmp	.-26     	; 0x2c6 <blink+0x6>
				}else{
				LCDDR3 = 0x0;
 2e0:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7fc0ef>
				on = 0;
 2e4:	c0 e0       	ldi	r28, 0x00	; 0
 2e6:	d0 e0       	ldi	r29, 0x00	; 0
 2e8:	ee cf       	rjmp	.-36     	; 0x2c6 <blink+0x6>

000002ea <main>:
void resetclock();

mutex m = MUTEX_INIT;

int main() {
	CLKPR = 0x80;
 2ea:	e1 e6       	ldi	r30, 0x61	; 97
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	80 e8       	ldi	r24, 0x80	; 128
 2f0:	80 83       	st	Z, r24
	CLKPR = 0x00;
 2f2:	10 82       	st	Z, r1
		LCDCS    - Asynchronous clock source
		LCDMUX's - Duty = 1/4, Bias = 1/3
		LCDPM's  - Number of Segments = 25
	*/
	
	LCDCRB = (1 << LCDCS) | (1 << LCDMUX1) | (1 << LCDMUX0) | (1 << LCDPM2) | (1 << LCDPM1) | (1 << LCDPM0);
 2f4:	87 eb       	ldi	r24, 0xB7	; 183
 2f6:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
	/*
		LCD Frame Rate Register:
		LCDCD's - Prescaler setting N = 16
	*/
	
	LCDFRR = (1 << LCDCD2) | (1 << LCDCD1) | (1 << LCDCD0);
 2fa:	87 e0       	ldi	r24, 0x07	; 7
 2fc:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>
		LCD Contrast Control Register
		None of the LCDDC's used = 300 microseconds
		LCDCC's = 3,35V
	*/
	
	LCDCCR = (1 << LCDCC3) | (1 << LCDCC2) | (1 << LCDCC1) | (1 << LCDCC0);
 300:	8f e0       	ldi	r24, 0x0F	; 15
 302:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
	
	/*
		LCDEN = LCD Enabled
		LCDAB = Low Power Waveform
	*/
	LCDCRA = (1 << LCDEN) | (1 << LCDAB);
 306:	80 ec       	ldi	r24, 0xC0	; 192
 308:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
int main() {
	CLKPR = 0x80;
	CLKPR = 0x00;
	LCD_Init();
	
	spawn(computePrimes, 0);
 30c:	60 e0       	ldi	r22, 0x00	; 0
 30e:	70 e0       	ldi	r23, 0x00	; 0
 310:	8e e2       	ldi	r24, 0x2E	; 46
 312:	91 e0       	ldi	r25, 0x01	; 1
 314:	0e 94 b4 01 	call	0x368	; 0x368 <spawn>
	spawn(button, 0);
 318:	60 e0       	ldi	r22, 0x00	; 0
 31a:	70 e0       	ldi	r23, 0x00	; 0
 31c:	80 ee       	ldi	r24, 0xE0	; 224
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	0e 94 b4 01 	call	0x368	; 0x368 <spawn>
	blink();
 324:	0e 94 60 01 	call	0x2c0	; 0x2c0 <blink>

00000328 <dispatch>:
        while (1) ;  // not much else to do...
    }
    return p;
}

static void dispatch(thread next) {
 328:	cf 93       	push	r28
 32a:	df 93       	push	r29
 32c:	00 d0       	rcall	.+0      	; 0x32e <dispatch+0x6>
 32e:	cd b7       	in	r28, 0x3d	; 61
 330:	de b7       	in	r29, 0x3e	; 62
 332:	9a 83       	std	Y+2, r25	; 0x02
 334:	89 83       	std	Y+1, r24	; 0x01
    if (setjmp(current->context) == 0) {
 336:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 33a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 33e:	06 96       	adiw	r24, 0x06	; 6
 340:	0e 94 ac 03 	call	0x758	; 0x758 <setjmp>
 344:	89 2b       	or	r24, r25
 346:	29 f0       	breq	.+10     	; 0x352 <dispatch+0x2a>
        current = next;
        longjmp(next->context,1);
    }
}
 348:	0f 90       	pop	r0
 34a:	0f 90       	pop	r0
 34c:	df 91       	pop	r29
 34e:	cf 91       	pop	r28
 350:	08 95       	ret
    return p;
}

static void dispatch(thread next) {
    if (setjmp(current->context) == 0) {
        current = next;
 352:	89 81       	ldd	r24, Y+1	; 0x01
 354:	9a 81       	ldd	r25, Y+2	; 0x02
 356:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 35a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
        longjmp(next->context,1);
 35e:	61 e0       	ldi	r22, 0x01	; 1
 360:	70 e0       	ldi	r23, 0x00	; 0
 362:	06 96       	adiw	r24, 0x06	; 6
 364:	0e 94 cc 03 	call	0x798	; 0x798 <longjmp>

00000368 <spawn>:
    }
}

void spawn(void (* function)(int), int arg) {
 368:	cf 93       	push	r28
 36a:	df 93       	push	r29
 36c:	00 d0       	rcall	.+0      	; 0x36e <spawn+0x6>
 36e:	cd b7       	in	r28, 0x3d	; 61
 370:	de b7       	in	r29, 0x3e	; 62
    thread newp;

    DISABLE();
 372:	f8 94       	cli
    if (!initialized) initialize();
 374:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <initialized>
 378:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <initialized+0x1>
 37c:	23 2b       	or	r18, r19
 37e:	a9 f5       	brne	.+106    	; 0x3ea <spawn+0x82>
int initialized = 0;

static void initialize(void) {
    int i;
    for (i=0; i<NTHREADS-1; i++)
        threads[i].next = &threads[i+1];
 380:	2c ef       	ldi	r18, 0xFC	; 252
 382:	31 e0       	ldi	r19, 0x01	; 1
 384:	30 93 94 01 	sts	0x0194, r19	; 0x800194 <threads+0x5>
 388:	20 93 93 01 	sts	0x0193, r18	; 0x800193 <threads+0x4>
 38c:	29 e6       	ldi	r18, 0x69	; 105
 38e:	32 e0       	ldi	r19, 0x02	; 2
 390:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <threads+0x72>
 394:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <threads+0x71>
 398:	26 ed       	ldi	r18, 0xD6	; 214
 39a:	32 e0       	ldi	r19, 0x02	; 2
 39c:	30 93 6e 02 	sts	0x026E, r19	; 0x80026e <threads+0xdf>
 3a0:	20 93 6d 02 	sts	0x026D, r18	; 0x80026d <threads+0xde>
    threads[NTHREADS-1].next = NULL;
 3a4:	10 92 db 02 	sts	0x02DB, r1	; 0x8002db <threads+0x14c>
 3a8:	10 92 da 02 	sts	0x02DA, r1	; 0x8002da <threads+0x14b>

    initialized = 1;
 3ac:	21 e0       	ldi	r18, 0x01	; 1
 3ae:	30 e0       	ldi	r19, 0x00	; 0
 3b0:	30 93 1d 01 	sts	0x011D, r19	; 0x80011d <initialized+0x1>
 3b4:	20 93 1c 01 	sts	0x011C, r18	; 0x80011c <initialized>
	
	/*
		Interrupts are enabled on the 7th pin of PORTB
	*/
	PCMSK1 = (1 << PCINT15);
 3b8:	20 e8       	ldi	r18, 0x80	; 128
 3ba:	20 93 6c 00 	sts	0x006C, r18	; 0x80006c <__TEXT_REGION_LENGTH__+0x7fc06c>
	EIMSK = (1 << PCIE1);
 3be:	2d bb       	out	0x1d, r18	; 29
	
	/*
		Enables Joystick
	*/
	PORTB = (1 << PB7) | (1 << PB4);
 3c0:	20 e9       	ldi	r18, 0x90	; 144
 3c2:	25 b9       	out	0x05, r18	; 5
	
	/*
		Sets OC1A to compare match
		Sets timer to CTC mode
	*/
	TCCR1A = (1 << COM1A1) | (1 << COM1A0);
 3c4:	20 ec       	ldi	r18, 0xC0	; 192
 3c6:	20 93 80 00 	sts	0x0080, r18	; 0x800080 <__TEXT_REGION_LENGTH__+0x7fc080>
	TCCR1B = (1 << WGM12) | (1 << CS12) | (1 << CS10);
 3ca:	2d e0       	ldi	r18, 0x0D	; 13
 3cc:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
	
	/*
		Timer compare A match interrupt: Enabled
	*/
	TIMSK1 = (1 << OCIE1A);
 3d0:	22 e0       	ldi	r18, 0x02	; 2
 3d2:	20 93 6f 00 	sts	0x006F, r18	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
	
	/*
		8MHz/(1024*20) = 50ms
		Set TCNT1 = 0
	*/
	OCR1A = 8000000/(1024 * 20);
 3d6:	26 e8       	ldi	r18, 0x86	; 134
 3d8:	31 e0       	ldi	r19, 0x01	; 1
 3da:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
 3de:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
	TCNT1 = 0x0;
 3e2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
 3e6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 3ea:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <freeQ>
 3ee:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <freeQ+0x1>
 3f2:	3a 83       	std	Y+2, r19	; 0x02
 3f4:	29 83       	std	Y+1, r18	; 0x01
    if (*queue) {
 3f6:	23 2b       	or	r18, r19
 3f8:	c9 f1       	breq	.+114    	; 0x46c <__DATA_REGION_LENGTH__+0x6c>
        *queue = (*queue)->next;
 3fa:	e9 81       	ldd	r30, Y+1	; 0x01
 3fc:	fa 81       	ldd	r31, Y+2	; 0x02
 3fe:	44 81       	ldd	r20, Z+4	; 0x04
 400:	55 81       	ldd	r21, Z+5	; 0x05
 402:	50 93 03 01 	sts	0x0103, r21	; 0x800103 <freeQ+0x1>
 406:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <freeQ>

    DISABLE();
    if (!initialized) initialize();

    newp = dequeue(&freeQ);
    newp->function = function;
 40a:	91 83       	std	Z+1, r25	; 0x01
 40c:	80 83       	st	Z, r24
    newp->arg = arg;
 40e:	73 83       	std	Z+3, r23	; 0x03
 410:	62 83       	std	Z+2, r22	; 0x02
    newp->next = NULL;
 412:	15 82       	std	Z+5, r1	; 0x05
 414:	14 82       	std	Z+4, r1	; 0x04
    if (setjmp(newp->context) == 1) {
 416:	cf 01       	movw	r24, r30
 418:	06 96       	adiw	r24, 0x06	; 6
 41a:	0e 94 ac 03 	call	0x758	; 0x758 <setjmp>
 41e:	01 97       	sbiw	r24, 0x01	; 1
 420:	91 f1       	breq	.+100    	; 0x486 <__DATA_REGION_LENGTH__+0x86>
        current->function(current->arg);
        DISABLE();
        enqueue(current, &freeQ);
        dispatch(dequeue(&readyQ));
    }
    SETSTACK(&newp->context, &newp->stack);
 422:	e9 81       	ldd	r30, Y+1	; 0x01
 424:	fa 81       	ldd	r31, Y+2	; 0x02
 426:	36 96       	adiw	r30, 0x06	; 6
 428:	89 81       	ldd	r24, Y+1	; 0x01
 42a:	9a 81       	ldd	r25, Y+2	; 0x02
 42c:	87 59       	subi	r24, 0x97	; 151
 42e:	9f 4f       	sbci	r25, 0xFF	; 255
 430:	91 8b       	std	Z+17, r25	; 0x11
 432:	80 8b       	std	Z+16, r24	; 0x10
 434:	93 8b       	std	Z+19, r25	; 0x13
 436:	82 8b       	std	Z+18, r24	; 0x12
	OCR1A = 8000000/(1024 * 20);
	TCNT1 = 0x0;
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 438:	e9 81       	ldd	r30, Y+1	; 0x01
 43a:	fa 81       	ldd	r31, Y+2	; 0x02
 43c:	15 82       	std	Z+5, r1	; 0x05
 43e:	14 82       	std	Z+4, r1	; 0x04
    if (*queue == NULL) {
 440:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <readyQ>
 444:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <readyQ+0x1>
 448:	30 97       	sbiw	r30, 0x00	; 0
 44a:	11 f4       	brne	.+4      	; 0x450 <__DATA_REGION_LENGTH__+0x50>
 44c:	10 c0       	rjmp	.+32     	; 0x46e <__DATA_REGION_LENGTH__+0x6e>
        *queue = p;
    } else {
        thread q = *queue;
        while (q->next)
 44e:	fc 01       	movw	r30, r24
 450:	84 81       	ldd	r24, Z+4	; 0x04
 452:	95 81       	ldd	r25, Z+5	; 0x05
 454:	00 97       	sbiw	r24, 0x00	; 0
 456:	d9 f7       	brne	.-10     	; 0x44e <__DATA_REGION_LENGTH__+0x4e>
            q = q->next;
        q->next = p;
 458:	89 81       	ldd	r24, Y+1	; 0x01
 45a:	9a 81       	ldd	r25, Y+2	; 0x02
 45c:	95 83       	std	Z+5, r25	; 0x05
 45e:	84 83       	std	Z+4, r24	; 0x04
        dispatch(dequeue(&readyQ));
    }
    SETSTACK(&newp->context, &newp->stack);

    enqueue(newp, &readyQ);
    ENABLE();
 460:	78 94       	sei
}
 462:	0f 90       	pop	r0
 464:	0f 90       	pop	r0
 466:	df 91       	pop	r29
 468:	cf 91       	pop	r28
 46a:	08 95       	ret
 46c:	ff cf       	rjmp	.-2      	; 0x46c <__DATA_REGION_LENGTH__+0x6c>
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
    if (*queue == NULL) {
        *queue = p;
 46e:	29 81       	ldd	r18, Y+1	; 0x01
 470:	3a 81       	ldd	r19, Y+2	; 0x02
 472:	30 93 21 01 	sts	0x0121, r19	; 0x800121 <readyQ+0x1>
 476:	20 93 20 01 	sts	0x0120, r18	; 0x800120 <readyQ>
        dispatch(dequeue(&readyQ));
    }
    SETSTACK(&newp->context, &newp->stack);

    enqueue(newp, &readyQ);
    ENABLE();
 47a:	78 94       	sei
}
 47c:	0f 90       	pop	r0
 47e:	0f 90       	pop	r0
 480:	df 91       	pop	r29
 482:	cf 91       	pop	r28
 484:	08 95       	ret
    newp = dequeue(&freeQ);
    newp->function = function;
    newp->arg = arg;
    newp->next = NULL;
    if (setjmp(newp->context) == 1) {
        ENABLE();
 486:	78 94       	sei
        current->function(current->arg);
 488:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 48c:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 490:	ed 91       	ld	r30, X+
 492:	fc 91       	ld	r31, X
 494:	11 97       	sbiw	r26, 0x01	; 1
 496:	12 96       	adiw	r26, 0x02	; 2
 498:	8d 91       	ld	r24, X+
 49a:	9c 91       	ld	r25, X
 49c:	13 97       	sbiw	r26, 0x03	; 3
 49e:	09 95       	icall
        DISABLE();
 4a0:	f8 94       	cli
        enqueue(current, &freeQ);
 4a2:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 4a6:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
	OCR1A = 8000000/(1024 * 20);
	TCNT1 = 0x0;
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 4aa:	15 96       	adiw	r26, 0x05	; 5
 4ac:	1c 92       	st	X, r1
 4ae:	1e 92       	st	-X, r1
 4b0:	14 97       	sbiw	r26, 0x04	; 4
    if (*queue == NULL) {
 4b2:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <freeQ>
 4b6:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <freeQ+0x1>
 4ba:	30 97       	sbiw	r30, 0x00	; 0
 4bc:	11 f4       	brne	.+4      	; 0x4c2 <__DATA_REGION_LENGTH__+0xc2>
 4be:	17 c0       	rjmp	.+46     	; 0x4ee <__DATA_REGION_LENGTH__+0xee>
        *queue = p;
    } else {
        thread q = *queue;
        while (q->next)
 4c0:	fc 01       	movw	r30, r24
 4c2:	84 81       	ldd	r24, Z+4	; 0x04
 4c4:	95 81       	ldd	r25, Z+5	; 0x05
 4c6:	00 97       	sbiw	r24, 0x00	; 0
 4c8:	d9 f7       	brne	.-10     	; 0x4c0 <__DATA_REGION_LENGTH__+0xc0>
            q = q->next;
        q->next = p;
 4ca:	b5 83       	std	Z+5, r27	; 0x05
 4cc:	a4 83       	std	Z+4, r26	; 0x04
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 4ce:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <readyQ>
 4d2:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <readyQ+0x1>
    if (*queue) {
 4d6:	00 97       	sbiw	r24, 0x00	; 0
 4d8:	a1 f0       	breq	.+40     	; 0x502 <__stack+0x3>
        *queue = (*queue)->next;
 4da:	fc 01       	movw	r30, r24
 4dc:	24 81       	ldd	r18, Z+4	; 0x04
 4de:	35 81       	ldd	r19, Z+5	; 0x05
 4e0:	30 93 21 01 	sts	0x0121, r19	; 0x800121 <readyQ+0x1>
 4e4:	20 93 20 01 	sts	0x0120, r18	; 0x800120 <readyQ>
    if (setjmp(newp->context) == 1) {
        ENABLE();
        current->function(current->arg);
        DISABLE();
        enqueue(current, &freeQ);
        dispatch(dequeue(&readyQ));
 4e8:	0e 94 94 01 	call	0x328	; 0x328 <dispatch>
 4ec:	9a cf       	rjmp	.-204    	; 0x422 <__DATA_REGION_LENGTH__+0x22>
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
    if (*queue == NULL) {
        *queue = p;
 4ee:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <freeQ+0x1>
 4f2:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <freeQ>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 4f6:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <readyQ>
 4fa:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <readyQ+0x1>
    if (*queue) {
 4fe:	00 97       	sbiw	r24, 0x00	; 0
 500:	61 f7       	brne	.-40     	; 0x4da <__DATA_REGION_LENGTH__+0xda>
 502:	ff cf       	rjmp	.-2      	; 0x502 <__stack+0x3>

00000504 <__vector_3>:
    enqueue(newp, &readyQ);
    ENABLE();
}

// Interrupt handler for button
ISR(PCINT1_vect) {
 504:	1f 92       	push	r1
 506:	0f 92       	push	r0
 508:	0f b6       	in	r0, 0x3f	; 63
 50a:	0f 92       	push	r0
 50c:	11 24       	eor	r1, r1
}
 50e:	0f 90       	pop	r0
 510:	0f be       	out	0x3f, r0	; 63
 512:	0f 90       	pop	r0
 514:	1f 90       	pop	r1
 516:	18 95       	reti

00000518 <yield>:
	yield();
}

// Change thread
void yield(void) {
	DISABLE();
 518:	f8 94       	cli
	enqueue(current, &readyQ);
 51a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 51e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
	OCR1A = 8000000/(1024 * 20);
	TCNT1 = 0x0;
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 522:	fc 01       	movw	r30, r24
 524:	15 82       	std	Z+5, r1	; 0x05
 526:	14 82       	std	Z+4, r1	; 0x04
    if (*queue == NULL) {
 528:	a0 91 20 01 	lds	r26, 0x0120	; 0x800120 <readyQ>
 52c:	b0 91 21 01 	lds	r27, 0x0121	; 0x800121 <readyQ+0x1>
 530:	10 97       	sbiw	r26, 0x00	; 0
 532:	b9 f0       	breq	.+46     	; 0x562 <yield+0x4a>
 534:	fd 01       	movw	r30, r26
 536:	01 c0       	rjmp	.+2      	; 0x53a <yield+0x22>
        *queue = p;
    } else {
        thread q = *queue;
        while (q->next)
 538:	f9 01       	movw	r30, r18
 53a:	24 81       	ldd	r18, Z+4	; 0x04
 53c:	35 81       	ldd	r19, Z+5	; 0x05
 53e:	21 15       	cp	r18, r1
 540:	31 05       	cpc	r19, r1
 542:	d1 f7       	brne	.-12     	; 0x538 <yield+0x20>
            q = q->next;
        q->next = p;
 544:	95 83       	std	Z+5, r25	; 0x05
 546:	84 83       	std	Z+4, r24	; 0x04
 548:	14 96       	adiw	r26, 0x04	; 4
 54a:	2d 91       	ld	r18, X+
 54c:	3c 91       	ld	r19, X
 54e:	15 97       	sbiw	r26, 0x05	; 5
 550:	cd 01       	movw	r24, r26
}

static thread dequeue(thread *queue) {
    thread p = *queue;
    if (*queue) {
        *queue = (*queue)->next;
 552:	30 93 21 01 	sts	0x0121, r19	; 0x800121 <readyQ+0x1>
 556:	20 93 20 01 	sts	0x0120, r18	; 0x800120 <readyQ>

// Change thread
void yield(void) {
	DISABLE();
	enqueue(current, &readyQ);
	dispatch(dequeue(&readyQ));
 55a:	0e 94 94 01 	call	0x328	; 0x328 <dispatch>
	ENABLE();
 55e:	78 94       	sei
}
 560:	08 95       	ret
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
    if (*queue) {
 562:	00 97       	sbiw	r24, 0x00	; 0
 564:	09 f4       	brne	.+2      	; 0x568 <yield+0x50>
 566:	ff cf       	rjmp	.-2      	; 0x566 <yield+0x4e>
 568:	20 e0       	ldi	r18, 0x00	; 0
 56a:	30 e0       	ldi	r19, 0x00	; 0
 56c:	f2 cf       	rjmp	.-28     	; 0x552 <yield+0x3a>

0000056e <__vector_7>:
// Interrupt handler for button
ISR(PCINT1_vect) {
}

// Should be interrupt handler for sequential interrupts
ISR(TIMER1_COMPA_vect) {
 56e:	1f 92       	push	r1
 570:	0f 92       	push	r0
 572:	0f b6       	in	r0, 0x3f	; 63
 574:	0f 92       	push	r0
 576:	11 24       	eor	r1, r1
 578:	2f 93       	push	r18
 57a:	3f 93       	push	r19
 57c:	4f 93       	push	r20
 57e:	5f 93       	push	r21
 580:	6f 93       	push	r22
 582:	7f 93       	push	r23
 584:	8f 93       	push	r24
 586:	9f 93       	push	r25
 588:	af 93       	push	r26
 58a:	bf 93       	push	r27
 58c:	ef 93       	push	r30
 58e:	ff 93       	push	r31
	timer++;
 590:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <timer>
 594:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <timer+0x1>
 598:	01 96       	adiw	r24, 0x01	; 1
 59a:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timer+0x1>
 59e:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timer>
	yield();
 5a2:	0e 94 8c 02 	call	0x518	; 0x518 <yield>
}
 5a6:	ff 91       	pop	r31
 5a8:	ef 91       	pop	r30
 5aa:	bf 91       	pop	r27
 5ac:	af 91       	pop	r26
 5ae:	9f 91       	pop	r25
 5b0:	8f 91       	pop	r24
 5b2:	7f 91       	pop	r23
 5b4:	6f 91       	pop	r22
 5b6:	5f 91       	pop	r21
 5b8:	4f 91       	pop	r20
 5ba:	3f 91       	pop	r19
 5bc:	2f 91       	pop	r18
 5be:	0f 90       	pop	r0
 5c0:	0f be       	out	0x3f, r0	; 63
 5c2:	0f 90       	pop	r0
 5c4:	1f 90       	pop	r1
 5c6:	18 95       	reti

000005c8 <lock>:
	enqueue(current, &readyQ);
	dispatch(dequeue(&readyQ));
	ENABLE();
}

void lock(mutex *m) {
 5c8:	cf 93       	push	r28
 5ca:	df 93       	push	r29
 5cc:	dc 01       	movw	r26, r24
	DISABLE();
 5ce:	f8 94       	cli
	
	// If it's unlocked, lock it
	if(m->locked == 0){
 5d0:	8d 91       	ld	r24, X+
 5d2:	9c 91       	ld	r25, X
 5d4:	11 97       	sbiw	r26, 0x01	; 1
 5d6:	89 2b       	or	r24, r25
 5d8:	41 f1       	breq	.+80     	; 0x62a <lock+0x62>
	}
	
	// Else - put the current thread in the back of the line of the waitQ
	// and run the first thread in the readyQ
	else{
		enqueue(current, &(m->waitQ));
 5da:	c0 91 00 01 	lds	r28, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 5de:	d0 91 01 01 	lds	r29, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
	OCR1A = 8000000/(1024 * 20);
	TCNT1 = 0x0;
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 5e2:	1d 82       	std	Y+5, r1	; 0x05
 5e4:	1c 82       	std	Y+4, r1	; 0x04
    if (*queue == NULL) {
 5e6:	12 96       	adiw	r26, 0x02	; 2
 5e8:	ed 91       	ld	r30, X+
 5ea:	fc 91       	ld	r31, X
 5ec:	13 97       	sbiw	r26, 0x03	; 3
 5ee:	30 97       	sbiw	r30, 0x00	; 0
 5f0:	11 f4       	brne	.+4      	; 0x5f6 <lock+0x2e>
 5f2:	23 c0       	rjmp	.+70     	; 0x63a <lock+0x72>
        *queue = p;
    } else {
        thread q = *queue;
        while (q->next)
 5f4:	fc 01       	movw	r30, r24
 5f6:	84 81       	ldd	r24, Z+4	; 0x04
 5f8:	95 81       	ldd	r25, Z+5	; 0x05
 5fa:	00 97       	sbiw	r24, 0x00	; 0
 5fc:	d9 f7       	brne	.-10     	; 0x5f4 <lock+0x2c>
            q = q->next;
        q->next = p;
 5fe:	d5 83       	std	Z+5, r29	; 0x05
 600:	c4 83       	std	Z+4, r28	; 0x04
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 602:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <readyQ>
 606:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <readyQ+0x1>
    if (*queue) {
 60a:	00 97       	sbiw	r24, 0x00	; 0
 60c:	69 f0       	breq	.+26     	; 0x628 <lock+0x60>
        *queue = (*queue)->next;
 60e:	fc 01       	movw	r30, r24
 610:	24 81       	ldd	r18, Z+4	; 0x04
 612:	35 81       	ldd	r19, Z+5	; 0x05
 614:	30 93 21 01 	sts	0x0121, r19	; 0x800121 <readyQ+0x1>
 618:	20 93 20 01 	sts	0x0120, r18	; 0x800120 <readyQ>
	
	// Else - put the current thread in the back of the line of the waitQ
	// and run the first thread in the readyQ
	else{
		enqueue(current, &(m->waitQ));
		dispatch(dequeue(&readyQ));
 61c:	0e 94 94 01 	call	0x328	; 0x328 <dispatch>
	}
	ENABLE();
 620:	78 94       	sei
}
 622:	df 91       	pop	r29
 624:	cf 91       	pop	r28
 626:	08 95       	ret
 628:	ff cf       	rjmp	.-2      	; 0x628 <lock+0x60>
void lock(mutex *m) {
	DISABLE();
	
	// If it's unlocked, lock it
	if(m->locked == 0){
		m->locked = 1;
 62a:	81 e0       	ldi	r24, 0x01	; 1
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	8d 93       	st	X+, r24
 630:	9c 93       	st	X, r25
	// and run the first thread in the readyQ
	else{
		enqueue(current, &(m->waitQ));
		dispatch(dequeue(&readyQ));
	}
	ENABLE();
 632:	78 94       	sei
}
 634:	df 91       	pop	r29
 636:	cf 91       	pop	r28
 638:	08 95       	ret
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
    if (*queue == NULL) {
        *queue = p;
 63a:	13 96       	adiw	r26, 0x03	; 3
 63c:	dc 93       	st	X, r29
 63e:	ce 93       	st	-X, r28
 640:	12 97       	sbiw	r26, 0x02	; 2
 642:	df cf       	rjmp	.-66     	; 0x602 <lock+0x3a>

00000644 <unlock>:
		dispatch(dequeue(&readyQ));
	}
	ENABLE();
}

void unlock(mutex *m) {
 644:	cf 93       	push	r28
 646:	df 93       	push	r29
 648:	fc 01       	movw	r30, r24
	
	DISABLE();
 64a:	f8 94       	cli
	
	// If threads are available in the waitQ, put the current thread in the last position of the readyQ
	// and run the first thread in the waitQ
	if(m->waitQ != NULL){
 64c:	82 81       	ldd	r24, Z+2	; 0x02
 64e:	93 81       	ldd	r25, Z+3	; 0x03
 650:	89 2b       	or	r24, r25
 652:	51 f1       	breq	.+84     	; 0x6a8 <unlock+0x64>
		enqueue(current, &readyQ);
 654:	c0 91 00 01 	lds	r28, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 658:	d0 91 01 01 	lds	r29, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
	OCR1A = 8000000/(1024 * 20);
	TCNT1 = 0x0;
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 65c:	1d 82       	std	Y+5, r1	; 0x05
 65e:	1c 82       	std	Y+4, r1	; 0x04
    if (*queue == NULL) {
 660:	a0 91 20 01 	lds	r26, 0x0120	; 0x800120 <readyQ>
 664:	b0 91 21 01 	lds	r27, 0x0121	; 0x800121 <readyQ+0x1>
 668:	10 97       	sbiw	r26, 0x00	; 0
 66a:	11 f4       	brne	.+4      	; 0x670 <unlock+0x2c>
 66c:	23 c0       	rjmp	.+70     	; 0x6b4 <unlock+0x70>
        *queue = p;
    } else {
        thread q = *queue;
        while (q->next)
 66e:	dc 01       	movw	r26, r24
 670:	14 96       	adiw	r26, 0x04	; 4
 672:	8d 91       	ld	r24, X+
 674:	9c 91       	ld	r25, X
 676:	15 97       	sbiw	r26, 0x05	; 5
 678:	00 97       	sbiw	r24, 0x00	; 0
 67a:	c9 f7       	brne	.-14     	; 0x66e <unlock+0x2a>
            q = q->next;
        q->next = p;
 67c:	15 96       	adiw	r26, 0x05	; 5
 67e:	dc 93       	st	X, r29
 680:	ce 93       	st	-X, r28
 682:	14 97       	sbiw	r26, 0x04	; 4
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 684:	82 81       	ldd	r24, Z+2	; 0x02
 686:	93 81       	ldd	r25, Z+3	; 0x03
    if (*queue) {
 688:	00 97       	sbiw	r24, 0x00	; 0
 68a:	69 f0       	breq	.+26     	; 0x6a6 <unlock+0x62>
        *queue = (*queue)->next;
 68c:	dc 01       	movw	r26, r24
 68e:	14 96       	adiw	r26, 0x04	; 4
 690:	2d 91       	ld	r18, X+
 692:	3c 91       	ld	r19, X
 694:	15 97       	sbiw	r26, 0x05	; 5
 696:	33 83       	std	Z+3, r19	; 0x03
 698:	22 83       	std	Z+2, r18	; 0x02
	
	// If threads are available in the waitQ, put the current thread in the last position of the readyQ
	// and run the first thread in the waitQ
	if(m->waitQ != NULL){
		enqueue(current, &readyQ);
		dispatch(dequeue(&(m->waitQ)));
 69a:	0e 94 94 01 	call	0x328	; 0x328 <dispatch>
	// Else - unlock (put the locked flag to 0)
	else{
		m->locked = 0;
	}
	
	ENABLE();
 69e:	78 94       	sei
}
 6a0:	df 91       	pop	r29
 6a2:	cf 91       	pop	r28
 6a4:	08 95       	ret
 6a6:	ff cf       	rjmp	.-2      	; 0x6a6 <unlock+0x62>
		dispatch(dequeue(&(m->waitQ)));
	}
	
	// Else - unlock (put the locked flag to 0)
	else{
		m->locked = 0;
 6a8:	11 82       	std	Z+1, r1	; 0x01
 6aa:	10 82       	st	Z, r1
	}
	
	ENABLE();
 6ac:	78 94       	sei
}
 6ae:	df 91       	pop	r29
 6b0:	cf 91       	pop	r28
 6b2:	08 95       	ret
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
    if (*queue == NULL) {
        *queue = p;
 6b4:	d0 93 21 01 	sts	0x0121, r29	; 0x800121 <readyQ+0x1>
 6b8:	c0 93 20 01 	sts	0x0120, r28	; 0x800120 <readyQ>
 6bc:	e3 cf       	rjmp	.-58     	; 0x684 <unlock+0x40>

000006be <whatisclock>:
	ENABLE();
}

int whatisclock(){
	return(timer);
}
 6be:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <timer>
 6c2:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <timer+0x1>
 6c6:	08 95       	ret

000006c8 <resetclock>:

void resetclock(){
	DISABLE();
 6c8:	f8 94       	cli
	timer = 0;
 6ca:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <timer+0x1>
 6ce:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <timer>
	ENABLE();
 6d2:	78 94       	sei
 6d4:	08 95       	ret

000006d6 <__divmodsi4>:
 6d6:	05 2e       	mov	r0, r21
 6d8:	97 fb       	bst	r25, 7
 6da:	1e f4       	brtc	.+6      	; 0x6e2 <__divmodsi4+0xc>
 6dc:	00 94       	com	r0
 6de:	0e 94 82 03 	call	0x704	; 0x704 <__negsi2>
 6e2:	57 fd       	sbrc	r21, 7
 6e4:	07 d0       	rcall	.+14     	; 0x6f4 <__divmodsi4_neg2>
 6e6:	0e 94 8a 03 	call	0x714	; 0x714 <__udivmodsi4>
 6ea:	07 fc       	sbrc	r0, 7
 6ec:	03 d0       	rcall	.+6      	; 0x6f4 <__divmodsi4_neg2>
 6ee:	4e f4       	brtc	.+18     	; 0x702 <__divmodsi4_exit>
 6f0:	0c 94 82 03 	jmp	0x704	; 0x704 <__negsi2>

000006f4 <__divmodsi4_neg2>:
 6f4:	50 95       	com	r21
 6f6:	40 95       	com	r20
 6f8:	30 95       	com	r19
 6fa:	21 95       	neg	r18
 6fc:	3f 4f       	sbci	r19, 0xFF	; 255
 6fe:	4f 4f       	sbci	r20, 0xFF	; 255
 700:	5f 4f       	sbci	r21, 0xFF	; 255

00000702 <__divmodsi4_exit>:
 702:	08 95       	ret

00000704 <__negsi2>:
 704:	90 95       	com	r25
 706:	80 95       	com	r24
 708:	70 95       	com	r23
 70a:	61 95       	neg	r22
 70c:	7f 4f       	sbci	r23, 0xFF	; 255
 70e:	8f 4f       	sbci	r24, 0xFF	; 255
 710:	9f 4f       	sbci	r25, 0xFF	; 255
 712:	08 95       	ret

00000714 <__udivmodsi4>:
 714:	a1 e2       	ldi	r26, 0x21	; 33
 716:	1a 2e       	mov	r1, r26
 718:	aa 1b       	sub	r26, r26
 71a:	bb 1b       	sub	r27, r27
 71c:	fd 01       	movw	r30, r26
 71e:	0d c0       	rjmp	.+26     	; 0x73a <__udivmodsi4_ep>

00000720 <__udivmodsi4_loop>:
 720:	aa 1f       	adc	r26, r26
 722:	bb 1f       	adc	r27, r27
 724:	ee 1f       	adc	r30, r30
 726:	ff 1f       	adc	r31, r31
 728:	a2 17       	cp	r26, r18
 72a:	b3 07       	cpc	r27, r19
 72c:	e4 07       	cpc	r30, r20
 72e:	f5 07       	cpc	r31, r21
 730:	20 f0       	brcs	.+8      	; 0x73a <__udivmodsi4_ep>
 732:	a2 1b       	sub	r26, r18
 734:	b3 0b       	sbc	r27, r19
 736:	e4 0b       	sbc	r30, r20
 738:	f5 0b       	sbc	r31, r21

0000073a <__udivmodsi4_ep>:
 73a:	66 1f       	adc	r22, r22
 73c:	77 1f       	adc	r23, r23
 73e:	88 1f       	adc	r24, r24
 740:	99 1f       	adc	r25, r25
 742:	1a 94       	dec	r1
 744:	69 f7       	brne	.-38     	; 0x720 <__udivmodsi4_loop>
 746:	60 95       	com	r22
 748:	70 95       	com	r23
 74a:	80 95       	com	r24
 74c:	90 95       	com	r25
 74e:	9b 01       	movw	r18, r22
 750:	ac 01       	movw	r20, r24
 752:	bd 01       	movw	r22, r26
 754:	cf 01       	movw	r24, r30
 756:	08 95       	ret

00000758 <setjmp>:
 758:	dc 01       	movw	r26, r24
 75a:	2d 92       	st	X+, r2
 75c:	3d 92       	st	X+, r3
 75e:	4d 92       	st	X+, r4
 760:	5d 92       	st	X+, r5
 762:	6d 92       	st	X+, r6
 764:	7d 92       	st	X+, r7
 766:	8d 92       	st	X+, r8
 768:	9d 92       	st	X+, r9
 76a:	ad 92       	st	X+, r10
 76c:	bd 92       	st	X+, r11
 76e:	cd 92       	st	X+, r12
 770:	dd 92       	st	X+, r13
 772:	ed 92       	st	X+, r14
 774:	fd 92       	st	X+, r15
 776:	0d 93       	st	X+, r16
 778:	1d 93       	st	X+, r17
 77a:	cd 93       	st	X+, r28
 77c:	dd 93       	st	X+, r29
 77e:	ff 91       	pop	r31
 780:	ef 91       	pop	r30
 782:	8d b7       	in	r24, 0x3d	; 61
 784:	8d 93       	st	X+, r24
 786:	8e b7       	in	r24, 0x3e	; 62
 788:	8d 93       	st	X+, r24
 78a:	8f b7       	in	r24, 0x3f	; 63
 78c:	8d 93       	st	X+, r24
 78e:	ed 93       	st	X+, r30
 790:	fd 93       	st	X+, r31
 792:	88 27       	eor	r24, r24
 794:	99 27       	eor	r25, r25
 796:	09 94       	ijmp

00000798 <longjmp>:
 798:	dc 01       	movw	r26, r24
 79a:	cb 01       	movw	r24, r22
 79c:	81 30       	cpi	r24, 0x01	; 1
 79e:	91 05       	cpc	r25, r1
 7a0:	81 1d       	adc	r24, r1
 7a2:	2d 90       	ld	r2, X+
 7a4:	3d 90       	ld	r3, X+
 7a6:	4d 90       	ld	r4, X+
 7a8:	5d 90       	ld	r5, X+
 7aa:	6d 90       	ld	r6, X+
 7ac:	7d 90       	ld	r7, X+
 7ae:	8d 90       	ld	r8, X+
 7b0:	9d 90       	ld	r9, X+
 7b2:	ad 90       	ld	r10, X+
 7b4:	bd 90       	ld	r11, X+
 7b6:	cd 90       	ld	r12, X+
 7b8:	dd 90       	ld	r13, X+
 7ba:	ed 90       	ld	r14, X+
 7bc:	fd 90       	ld	r15, X+
 7be:	0d 91       	ld	r16, X+
 7c0:	1d 91       	ld	r17, X+
 7c2:	cd 91       	ld	r28, X+
 7c4:	dd 91       	ld	r29, X+
 7c6:	ed 91       	ld	r30, X+
 7c8:	fd 91       	ld	r31, X+
 7ca:	0d 90       	ld	r0, X+
 7cc:	f8 94       	cli
 7ce:	fe bf       	out	0x3e, r31	; 62
 7d0:	0f be       	out	0x3f, r0	; 63
 7d2:	ed bf       	out	0x3d, r30	; 61
 7d4:	ed 91       	ld	r30, X+
 7d6:	fd 91       	ld	r31, X+
 7d8:	09 94       	ijmp

000007da <_exit>:
 7da:	f8 94       	cli

000007dc <__stop_program>:
 7dc:	ff cf       	rjmp	.-2      	; 0x7dc <__stop_program>
