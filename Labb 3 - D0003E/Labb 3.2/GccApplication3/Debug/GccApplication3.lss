
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  000007ac  00000840  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000233  00800118  00800118  00000858  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000858  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000888  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  000008c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000141e  00000000  00000000  00000980  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bd5  00000000  00000000  00001d9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007e3  00000000  00000000  00002973  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000026c  00000000  00000000  00003158  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005a5  00000000  00000000  000033c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bb9  00000000  00000000  00003969  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  00004522  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 90 01 	jmp	0x320	; 0x320 <__vector_3>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 b8 01 	jmp	0x370	; 0x370 <__vector_7>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	ec ea       	ldi	r30, 0xAC	; 172
  70:	f7 e0       	ldi	r31, 0x07	; 7
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	a8 31       	cpi	r26, 0x18	; 24
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
  7e:	23 e0       	ldi	r18, 0x03	; 3
  80:	a8 e1       	ldi	r26, 0x18	; 24
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	ab 34       	cpi	r26, 0x4B	; 75
  8a:	b2 07       	cpc	r27, r18
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 4f 01 	call	0x29e	; 0x29e <main>
  92:	0c 94 d4 03 	jmp	0x7a8	; 0x7a8 <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <button>:
	}
}
bool is_prime(long i){
	for(int n = 2; n < i; n++){
		if(i % n == 0){
			return(false);
  9a:	80 e8       	ldi	r24, 0x80	; 128
  9c:	85 b9       	out	0x05, r24	; 5
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7fc0f4>
  a4:	10 92 f9 00 	sts	0x00F9, r1	; 0x8000f9 <__TEXT_REGION_LENGTH__+0x7fc0f9>
  a8:	88 e1       	ldi	r24, 0x18	; 24
  aa:	91 e0       	ldi	r25, 0x01	; 1
  ac:	0e 94 cd 02 	call	0x59a	; 0x59a <lock>
  b0:	1f 99       	sbic	0x03, 7	; 3
  b2:	04 c0       	rjmp	.+8      	; 0xbc <button+0x22>
  b4:	80 91 f9 00 	lds	r24, 0x00F9	; 0x8000f9 <__TEXT_REGION_LENGTH__+0x7fc0f9>
  b8:	81 30       	cpi	r24, 0x01	; 1
  ba:	99 f0       	breq	.+38     	; 0xe2 <button+0x48>
  bc:	1f 99       	sbic	0x03, 7	; 3
  be:	04 c0       	rjmp	.+8      	; 0xc8 <button+0x2e>
  c0:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7fc0f4>
  c4:	81 30       	cpi	r24, 0x01	; 1
  c6:	29 f0       	breq	.+10     	; 0xd2 <button+0x38>
  c8:	83 b1       	in	r24, 0x03	; 3
  ca:	88 e1       	ldi	r24, 0x18	; 24
  cc:	91 e0       	ldi	r25, 0x01	; 1
  ce:	0c 94 0b 03 	jmp	0x616	; 0x616 <unlock>
  d2:	80 93 f9 00 	sts	0x00F9, r24	; 0x8000f9 <__TEXT_REGION_LENGTH__+0x7fc0f9>
  d6:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7fc0f4>
  da:	88 e1       	ldi	r24, 0x18	; 24
  dc:	91 e0       	ldi	r25, 0x01	; 1
  de:	0c 94 0b 03 	jmp	0x616	; 0x616 <unlock>
  e2:	10 92 f9 00 	sts	0x00F9, r1	; 0x8000f9 <__TEXT_REGION_LENGTH__+0x7fc0f9>
  e6:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7fc0f4>
  ea:	88 e1       	ldi	r24, 0x18	; 24
  ec:	91 e0       	ldi	r25, 0x01	; 1
  ee:	0c 94 0b 03 	jmp	0x616	; 0x616 <unlock>

000000f2 <blink>:
  f2:	8c e1       	ldi	r24, 0x1C	; 28
  f4:	91 e0       	ldi	r25, 0x01	; 1
  f6:	0e 94 cd 02 	call	0x59a	; 0x59a <lock>
  fa:	0e 94 48 03 	call	0x690	; 0x690 <whatisclock>
  fe:	44 97       	sbiw	r24, 0x14	; 20
 100:	2c f0       	brlt	.+10     	; 0x10c <blink+0x1a>
 102:	0e 94 4d 03 	call	0x69a	; 0x69a <resetclock>
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7fc0ef>
 10c:	8c e1       	ldi	r24, 0x1C	; 28
 10e:	91 e0       	ldi	r25, 0x01	; 1
 110:	0c 94 0b 03 	jmp	0x616	; 0x616 <unlock>

00000114 <writeChar>:
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
 118:	cd b7       	in	r28, 0x3d	; 61
 11a:	de b7       	in	r29, 0x3e	; 62
 11c:	64 97       	sbiw	r28, 0x14	; 20
 11e:	0f b6       	in	r0, 0x3f	; 63
 120:	f8 94       	cli
 122:	de bf       	out	0x3e, r29	; 62
 124:	0f be       	out	0x3f, r0	; 63
 126:	cd bf       	out	0x3d, r28	; 61
 128:	94 e1       	ldi	r25, 0x14	; 20
 12a:	e4 e0       	ldi	r30, 0x04	; 4
 12c:	f1 e0       	ldi	r31, 0x01	; 1
 12e:	de 01       	movw	r26, r28
 130:	11 96       	adiw	r26, 0x01	; 1
 132:	01 90       	ld	r0, Z+
 134:	0d 92       	st	X+, r0
 136:	9a 95       	dec	r25
 138:	e1 f7       	brne	.-8      	; 0x132 <writeChar+0x1e>
 13a:	66 30       	cpi	r22, 0x06	; 6
 13c:	71 05       	cpc	r23, r1
 13e:	50 f5       	brcc	.+84     	; 0x194 <writeChar+0x80>
 140:	fb 01       	movw	r30, r22
 142:	f5 95       	asr	r31
 144:	e7 95       	ror	r30
 146:	e4 51       	subi	r30, 0x14	; 20
 148:	ff 4f       	sbci	r31, 0xFF	; 255
 14a:	a8 2f       	mov	r26, r24
 14c:	b0 e0       	ldi	r27, 0x00	; 0
 14e:	d0 97       	sbiw	r26, 0x30	; 48
 150:	aa 0f       	add	r26, r26
 152:	bb 1f       	adc	r27, r27
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	8c 0f       	add	r24, r28
 15a:	9d 1f       	adc	r25, r29
 15c:	a8 0f       	add	r26, r24
 15e:	b9 1f       	adc	r27, r25
 160:	4d 91       	ld	r20, X+
 162:	5c 91       	ld	r21, X
 164:	61 70       	andi	r22, 0x01	; 1
 166:	77 27       	eor	r23, r23
 168:	df 01       	movw	r26, r30
 16a:	54 96       	adiw	r26, 0x14	; 20
 16c:	ca 01       	movw	r24, r20
 16e:	8f 70       	andi	r24, 0x0F	; 15
 170:	99 27       	eor	r25, r25
 172:	61 30       	cpi	r22, 0x01	; 1
 174:	71 05       	cpc	r23, r1
 176:	b9 f0       	breq	.+46     	; 0x1a6 <writeChar+0x92>
 178:	20 81       	ld	r18, Z
 17a:	20 7f       	andi	r18, 0xF0	; 240
 17c:	82 2b       	or	r24, r18
 17e:	80 83       	st	Z, r24
 180:	35 96       	adiw	r30, 0x05	; 5
 182:	52 95       	swap	r21
 184:	42 95       	swap	r20
 186:	4f 70       	andi	r20, 0x0F	; 15
 188:	45 27       	eor	r20, r21
 18a:	5f 70       	andi	r21, 0x0F	; 15
 18c:	45 27       	eor	r20, r21
 18e:	ea 17       	cp	r30, r26
 190:	fb 07       	cpc	r31, r27
 192:	61 f7       	brne	.-40     	; 0x16c <writeChar+0x58>
 194:	64 96       	adiw	r28, 0x14	; 20
 196:	0f b6       	in	r0, 0x3f	; 63
 198:	f8 94       	cli
 19a:	de bf       	out	0x3e, r29	; 62
 19c:	0f be       	out	0x3f, r0	; 63
 19e:	cd bf       	out	0x3d, r28	; 61
 1a0:	df 91       	pop	r29
 1a2:	cf 91       	pop	r28
 1a4:	08 95       	ret
 1a6:	82 95       	swap	r24
 1a8:	92 95       	swap	r25
 1aa:	90 7f       	andi	r25, 0xF0	; 240
 1ac:	98 27       	eor	r25, r24
 1ae:	80 7f       	andi	r24, 0xF0	; 240
 1b0:	98 27       	eor	r25, r24
 1b2:	20 81       	ld	r18, Z
 1b4:	2f 70       	andi	r18, 0x0F	; 15
 1b6:	e2 cf       	rjmp	.-60     	; 0x17c <writeChar+0x68>

000001b8 <printAt>:
 1b8:	8f 92       	push	r8
 1ba:	9f 92       	push	r9
 1bc:	af 92       	push	r10
 1be:	bf 92       	push	r11
 1c0:	cf 92       	push	r12
 1c2:	df 92       	push	r13
 1c4:	ef 92       	push	r14
 1c6:	ff 92       	push	r15
 1c8:	cf 93       	push	r28
 1ca:	df 93       	push	r29
 1cc:	4b 01       	movw	r8, r22
 1ce:	5c 01       	movw	r10, r24
 1d0:	ea 01       	movw	r28, r20
 1d2:	80 e2       	ldi	r24, 0x20	; 32
 1d4:	91 e0       	ldi	r25, 0x01	; 1
 1d6:	0e 94 cd 02 	call	0x59a	; 0x59a <lock>
 1da:	c5 01       	movw	r24, r10
 1dc:	b4 01       	movw	r22, r8
 1de:	24 e6       	ldi	r18, 0x64	; 100
 1e0:	30 e0       	ldi	r19, 0x00	; 0
 1e2:	40 e0       	ldi	r20, 0x00	; 0
 1e4:	50 e0       	ldi	r21, 0x00	; 0
 1e6:	0e 94 52 03 	call	0x6a4	; 0x6a4 <__divmodsi4>
 1ea:	2a e0       	ldi	r18, 0x0A	; 10
 1ec:	c2 2e       	mov	r12, r18
 1ee:	d1 2c       	mov	r13, r1
 1f0:	e1 2c       	mov	r14, r1
 1f2:	f1 2c       	mov	r15, r1
 1f4:	a7 01       	movw	r20, r14
 1f6:	96 01       	movw	r18, r12
 1f8:	0e 94 52 03 	call	0x6a4	; 0x6a4 <__divmodsi4>
 1fc:	be 01       	movw	r22, r28
 1fe:	80 e3       	ldi	r24, 0x30	; 48
 200:	82 0f       	add	r24, r18
 202:	0e 94 8a 00 	call	0x114	; 0x114 <writeChar>
 206:	21 96       	adiw	r28, 0x01	; 1
 208:	c5 01       	movw	r24, r10
 20a:	b4 01       	movw	r22, r8
 20c:	a7 01       	movw	r20, r14
 20e:	96 01       	movw	r18, r12
 210:	0e 94 52 03 	call	0x6a4	; 0x6a4 <__divmodsi4>
 214:	86 2f       	mov	r24, r22
 216:	be 01       	movw	r22, r28
 218:	80 5d       	subi	r24, 0xD0	; 208
 21a:	0e 94 8a 00 	call	0x114	; 0x114 <writeChar>
 21e:	80 e2       	ldi	r24, 0x20	; 32
 220:	91 e0       	ldi	r25, 0x01	; 1
 222:	df 91       	pop	r29
 224:	cf 91       	pop	r28
 226:	ff 90       	pop	r15
 228:	ef 90       	pop	r14
 22a:	df 90       	pop	r13
 22c:	cf 90       	pop	r12
 22e:	bf 90       	pop	r11
 230:	af 90       	pop	r10
 232:	9f 90       	pop	r9
 234:	8f 90       	pop	r8
 236:	0c 94 0b 03 	jmp	0x616	; 0x616 <unlock>

0000023a <computePrimes>:
 23a:	ec 01       	movw	r28, r24
 23c:	81 2c       	mov	r8, r1
 23e:	91 2c       	mov	r9, r1
 240:	54 01       	movw	r10, r8
 242:	83 94       	inc	r8
 244:	83 e0       	ldi	r24, 0x03	; 3
 246:	88 16       	cp	r8, r24
 248:	91 04       	cpc	r9, r1
 24a:	a1 04       	cpc	r10, r1
 24c:	b1 04       	cpc	r11, r1
 24e:	e4 f0       	brlt	.+56     	; 0x288 <computePrimes+0x4e>
 250:	80 fe       	sbrs	r8, 0
 252:	1f c0       	rjmp	.+62     	; 0x292 <computePrimes+0x58>
 254:	83 e0       	ldi	r24, 0x03	; 3
 256:	c8 2e       	mov	r12, r24
 258:	d1 2c       	mov	r13, r1
 25a:	e1 2c       	mov	r14, r1
 25c:	f1 2c       	mov	r15, r1
 25e:	0d c0       	rjmp	.+26     	; 0x27a <computePrimes+0x40>
 260:	8f ef       	ldi	r24, 0xFF	; 255
 262:	c8 1a       	sub	r12, r24
 264:	d8 0a       	sbc	r13, r24
 266:	e8 0a       	sbc	r14, r24
 268:	f8 0a       	sbc	r15, r24
 26a:	c5 01       	movw	r24, r10
 26c:	b4 01       	movw	r22, r8
 26e:	0e 94 52 03 	call	0x6a4	; 0x6a4 <__divmodsi4>
 272:	67 2b       	or	r22, r23
 274:	68 2b       	or	r22, r24
 276:	69 2b       	or	r22, r25
 278:	61 f0       	breq	.+24     	; 0x292 <computePrimes+0x58>
 27a:	96 01       	movw	r18, r12
 27c:	a7 01       	movw	r20, r14
 27e:	c8 14       	cp	r12, r8
 280:	d9 04       	cpc	r13, r9
 282:	ea 04       	cpc	r14, r10
 284:	fb 04       	cpc	r15, r11
 286:	61 f7       	brne	.-40     	; 0x260 <computePrimes+0x26>
 288:	ae 01       	movw	r20, r28
 28a:	c5 01       	movw	r24, r10
 28c:	b4 01       	movw	r22, r8
 28e:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <printAt>
 292:	8f ef       	ldi	r24, 0xFF	; 255
 294:	88 1a       	sub	r8, r24
 296:	98 0a       	sbc	r9, r24
 298:	a8 0a       	sbc	r10, r24
 29a:	b8 0a       	sbc	r11, r24
 29c:	d3 cf       	rjmp	.-90     	; 0x244 <computePrimes+0xa>

0000029e <main>:
 29e:	e1 e6       	ldi	r30, 0x61	; 97
 2a0:	f0 e0       	ldi	r31, 0x00	; 0
 2a2:	80 e8       	ldi	r24, 0x80	; 128
 2a4:	80 83       	st	Z, r24
 2a6:	10 82       	st	Z, r1
 2a8:	87 eb       	ldi	r24, 0xB7	; 183
 2aa:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
 2ae:	87 e0       	ldi	r24, 0x07	; 7
 2b0:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>
 2b4:	8f e0       	ldi	r24, 0x0F	; 15
 2b6:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
 2ba:	80 ec       	ldi	r24, 0xC0	; 192
 2bc:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
 2c0:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7fc080>
 2c4:	8d e0       	ldi	r24, 0x0D	; 13
 2c6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
 2ca:	82 e0       	ldi	r24, 0x02	; 2
 2cc:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
 2d0:	82 e4       	ldi	r24, 0x42	; 66
 2d2:	9f e0       	ldi	r25, 0x0F	; 15
 2d4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
 2d8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
 2dc:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
 2e0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
 2e4:	8c e1       	ldi	r24, 0x1C	; 28
 2e6:	91 e0       	ldi	r25, 0x01	; 1
 2e8:	0e 94 cd 02 	call	0x59a	; 0x59a <lock>
 2ec:	88 e1       	ldi	r24, 0x18	; 24
 2ee:	91 e0       	ldi	r25, 0x01	; 1
 2f0:	0e 94 cd 02 	call	0x59a	; 0x59a <lock>
 2f4:	60 e0       	ldi	r22, 0x00	; 0
 2f6:	70 e0       	ldi	r23, 0x00	; 0
 2f8:	89 e7       	ldi	r24, 0x79	; 121
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	0e 94 fe 01 	call	0x3fc	; 0x3fc <spawn>
 300:	64 e0       	ldi	r22, 0x04	; 4
 302:	70 e0       	ldi	r23, 0x00	; 0
 304:	8d e1       	ldi	r24, 0x1D	; 29
 306:	91 e0       	ldi	r25, 0x01	; 1
 308:	0e 94 fe 01 	call	0x3fc	; 0x3fc <spawn>
 30c:	63 e0       	ldi	r22, 0x03	; 3
 30e:	70 e0       	ldi	r23, 0x00	; 0
 310:	8d e4       	ldi	r24, 0x4D	; 77
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	0e 94 fe 01 	call	0x3fc	; 0x3fc <spawn>
 318:	80 e0       	ldi	r24, 0x00	; 0
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	0e 94 1d 01 	call	0x23a	; 0x23a <computePrimes>

00000320 <__vector_3>:
		}
	unlock(&x);
}

// Interrupt handler for button
ISR(PCINT1_vect) {
 320:	1f 92       	push	r1
 322:	0f 92       	push	r0
 324:	0f b6       	in	r0, 0x3f	; 63
 326:	0f 92       	push	r0
 328:	11 24       	eor	r1, r1
 32a:	2f 93       	push	r18
 32c:	3f 93       	push	r19
 32e:	4f 93       	push	r20
 330:	5f 93       	push	r21
 332:	6f 93       	push	r22
 334:	7f 93       	push	r23
 336:	8f 93       	push	r24
 338:	9f 93       	push	r25
 33a:	af 93       	push	r26
 33c:	bf 93       	push	r27
 33e:	ef 93       	push	r30
 340:	ff 93       	push	r31
	if (PINB >> 7 == 0) {
 342:	1f 99       	sbic	0x03, 7	; 3
 344:	04 c0       	rjmp	.+8      	; 0x34e <__vector_3+0x2e>
		unlock(&x);
 346:	88 e1       	ldi	r24, 0x18	; 24
 348:	91 e0       	ldi	r25, 0x01	; 1
 34a:	0e 94 0b 03 	call	0x616	; 0x616 <unlock>
	}
}
 34e:	ff 91       	pop	r31
 350:	ef 91       	pop	r30
 352:	bf 91       	pop	r27
 354:	af 91       	pop	r26
 356:	9f 91       	pop	r25
 358:	8f 91       	pop	r24
 35a:	7f 91       	pop	r23
 35c:	6f 91       	pop	r22
 35e:	5f 91       	pop	r21
 360:	4f 91       	pop	r20
 362:	3f 91       	pop	r19
 364:	2f 91       	pop	r18
 366:	0f 90       	pop	r0
 368:	0f be       	out	0x3f, r0	; 63
 36a:	0f 90       	pop	r0
 36c:	1f 90       	pop	r1
 36e:	18 95       	reti

00000370 <__vector_7>:

// Should be interrupt handler for sequential interrupts

ISR(TIMER1_COMPA_vect) {
 370:	1f 92       	push	r1
 372:	0f 92       	push	r0
 374:	0f b6       	in	r0, 0x3f	; 63
 376:	0f 92       	push	r0
 378:	11 24       	eor	r1, r1
 37a:	2f 93       	push	r18
 37c:	3f 93       	push	r19
 37e:	4f 93       	push	r20
 380:	5f 93       	push	r21
 382:	6f 93       	push	r22
 384:	7f 93       	push	r23
 386:	8f 93       	push	r24
 388:	9f 93       	push	r25
 38a:	af 93       	push	r26
 38c:	bf 93       	push	r27
 38e:	ef 93       	push	r30
 390:	ff 93       	push	r31
	unlock(&b);
 392:	8c e1       	ldi	r24, 0x1C	; 28
 394:	91 e0       	ldi	r25, 0x01	; 1
 396:	0e 94 0b 03 	call	0x616	; 0x616 <unlock>
 39a:	ff 91       	pop	r31
 39c:	ef 91       	pop	r30
 39e:	bf 91       	pop	r27
 3a0:	af 91       	pop	r26
 3a2:	9f 91       	pop	r25
 3a4:	8f 91       	pop	r24
 3a6:	7f 91       	pop	r23
 3a8:	6f 91       	pop	r22
 3aa:	5f 91       	pop	r21
 3ac:	4f 91       	pop	r20
 3ae:	3f 91       	pop	r19
 3b0:	2f 91       	pop	r18
 3b2:	0f 90       	pop	r0
 3b4:	0f be       	out	0x3f, r0	; 63
 3b6:	0f 90       	pop	r0
 3b8:	1f 90       	pop	r1
 3ba:	18 95       	reti

000003bc <dispatch>:
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
    if (*queue) {
 3bc:	cf 93       	push	r28
 3be:	df 93       	push	r29
 3c0:	00 d0       	rcall	.+0      	; 0x3c2 <dispatch+0x6>
 3c2:	cd b7       	in	r28, 0x3d	; 61
 3c4:	de b7       	in	r29, 0x3e	; 62
 3c6:	9a 83       	std	Y+2, r25	; 0x02
 3c8:	89 83       	std	Y+1, r24	; 0x01
 3ca:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3ce:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3d2:	06 96       	adiw	r24, 0x06	; 6
 3d4:	0e 94 93 03 	call	0x726	; 0x726 <setjmp>
 3d8:	89 2b       	or	r24, r25
 3da:	29 f0       	breq	.+10     	; 0x3e6 <dispatch+0x2a>
 3dc:	0f 90       	pop	r0
 3de:	0f 90       	pop	r0
 3e0:	df 91       	pop	r29
 3e2:	cf 91       	pop	r28
 3e4:	08 95       	ret
 3e6:	89 81       	ldd	r24, Y+1	; 0x01
 3e8:	9a 81       	ldd	r25, Y+2	; 0x02
 3ea:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3ee:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 3f2:	61 e0       	ldi	r22, 0x01	; 1
 3f4:	70 e0       	ldi	r23, 0x00	; 0
 3f6:	06 96       	adiw	r24, 0x06	; 6
 3f8:	0e 94 b3 03 	call	0x766	; 0x766 <longjmp>

000003fc <spawn>:
 3fc:	cf 93       	push	r28
 3fe:	df 93       	push	r29
 400:	00 d0       	rcall	.+0      	; 0x402 <__DATA_REGION_LENGTH__+0x2>
 402:	cd b7       	in	r28, 0x3d	; 61
 404:	de b7       	in	r29, 0x3e	; 62
 406:	f8 94       	cli
 408:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <initialized>
 40c:	30 91 25 01 	lds	r19, 0x0125	; 0x800125 <initialized+0x1>
 410:	23 2b       	or	r18, r19
 412:	11 f5       	brne	.+68     	; 0x458 <__DATA_REGION_LENGTH__+0x58>
 414:	24 e0       	ldi	r18, 0x04	; 4
 416:	32 e0       	ldi	r19, 0x02	; 2
 418:	30 93 9c 01 	sts	0x019C, r19	; 0x80019c <threads+0x5>
 41c:	20 93 9b 01 	sts	0x019B, r18	; 0x80019b <threads+0x4>
 420:	21 e7       	ldi	r18, 0x71	; 113
 422:	32 e0       	ldi	r19, 0x02	; 2
 424:	30 93 09 02 	sts	0x0209, r19	; 0x800209 <threads+0x72>
 428:	20 93 08 02 	sts	0x0208, r18	; 0x800208 <threads+0x71>
 42c:	2e ed       	ldi	r18, 0xDE	; 222
 42e:	32 e0       	ldi	r19, 0x02	; 2
 430:	30 93 76 02 	sts	0x0276, r19	; 0x800276 <threads+0xdf>
 434:	20 93 75 02 	sts	0x0275, r18	; 0x800275 <threads+0xde>
 438:	10 92 e3 02 	sts	0x02E3, r1	; 0x8002e3 <threads+0x14c>
 43c:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <threads+0x14b>
 440:	21 e0       	ldi	r18, 0x01	; 1
 442:	30 e0       	ldi	r19, 0x00	; 0
 444:	30 93 25 01 	sts	0x0125, r19	; 0x800125 <initialized+0x1>
 448:	20 93 24 01 	sts	0x0124, r18	; 0x800124 <initialized>
 44c:	20 e8       	ldi	r18, 0x80	; 128
 44e:	20 93 6c 00 	sts	0x006C, r18	; 0x80006c <__TEXT_REGION_LENGTH__+0x7fc06c>
 452:	2d bb       	out	0x1d, r18	; 29
 454:	20 e9       	ldi	r18, 0x90	; 144
 456:	25 b9       	out	0x05, r18	; 5
 458:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <freeQ>
 45c:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <freeQ+0x1>
 460:	3a 83       	std	Y+2, r19	; 0x02
 462:	29 83       	std	Y+1, r18	; 0x01
 464:	23 2b       	or	r18, r19
 466:	09 f4       	brne	.+2      	; 0x46a <__DATA_REGION_LENGTH__+0x6a>
 468:	50 c0       	rjmp	.+160    	; 0x50a <__stack+0xb>
 46a:	e9 81       	ldd	r30, Y+1	; 0x01
 46c:	fa 81       	ldd	r31, Y+2	; 0x02
 46e:	44 81       	ldd	r20, Z+4	; 0x04
 470:	55 81       	ldd	r21, Z+5	; 0x05
 472:	50 93 03 01 	sts	0x0103, r21	; 0x800103 <freeQ+0x1>
 476:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <freeQ>
 47a:	91 83       	std	Z+1, r25	; 0x01
 47c:	80 83       	st	Z, r24
 47e:	73 83       	std	Z+3, r23	; 0x03
 480:	62 83       	std	Z+2, r22	; 0x02
 482:	15 82       	std	Z+5, r1	; 0x05
 484:	14 82       	std	Z+4, r1	; 0x04
 486:	cf 01       	movw	r24, r30
 488:	06 96       	adiw	r24, 0x06	; 6
 48a:	0e 94 93 03 	call	0x726	; 0x726 <setjmp>
 48e:	01 97       	sbiw	r24, 0x01	; 1
 490:	09 f4       	brne	.+2      	; 0x494 <__DATA_REGION_LENGTH__+0x94>
 492:	49 c0       	rjmp	.+146    	; 0x526 <__stack+0x27>
 494:	e9 81       	ldd	r30, Y+1	; 0x01
 496:	fa 81       	ldd	r31, Y+2	; 0x02
 498:	36 96       	adiw	r30, 0x06	; 6
 49a:	89 81       	ldd	r24, Y+1	; 0x01
 49c:	9a 81       	ldd	r25, Y+2	; 0x02
 49e:	87 59       	subi	r24, 0x97	; 151
 4a0:	9f 4f       	sbci	r25, 0xFF	; 255
 4a2:	91 8b       	std	Z+17, r25	; 0x11
 4a4:	80 8b       	std	Z+16, r24	; 0x10
 4a6:	93 8b       	std	Z+19, r25	; 0x13
 4a8:	82 8b       	std	Z+18, r24	; 0x12
 4aa:	e9 81       	ldd	r30, Y+1	; 0x01
 4ac:	fa 81       	ldd	r31, Y+2	; 0x02
 4ae:	15 82       	std	Z+5, r1	; 0x05
 4b0:	14 82       	std	Z+4, r1	; 0x04
 4b2:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <readyQ>
 4b6:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <readyQ+0x1>
 4ba:	00 97       	sbiw	r24, 0x00	; 0
 4bc:	61 f0       	breq	.+24     	; 0x4d6 <__DATA_REGION_LENGTH__+0xd6>
 4be:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 4c2:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 4c6:	49 81       	ldd	r20, Y+1	; 0x01
 4c8:	5a 81       	ldd	r21, Y+2	; 0x02
 4ca:	42 17       	cp	r20, r18
 4cc:	53 07       	cpc	r21, r19
 4ce:	f1 f0       	breq	.+60     	; 0x50c <__stack+0xd>
 4d0:	fa 01       	movw	r30, r20
 4d2:	95 83       	std	Z+5, r25	; 0x05
 4d4:	84 83       	std	Z+4, r24	; 0x04
 4d6:	f0 93 29 01 	sts	0x0129, r31	; 0x800129 <readyQ+0x1>
 4da:	e0 93 28 01 	sts	0x0128, r30	; 0x800128 <readyQ>
 4de:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <readyQ>
 4e2:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <readyQ+0x1>
 4e6:	00 97       	sbiw	r24, 0x00	; 0
 4e8:	79 f0       	breq	.+30     	; 0x508 <__stack+0x9>
 4ea:	fc 01       	movw	r30, r24
 4ec:	24 81       	ldd	r18, Z+4	; 0x04
 4ee:	35 81       	ldd	r19, Z+5	; 0x05
 4f0:	30 93 29 01 	sts	0x0129, r19	; 0x800129 <readyQ+0x1>
 4f4:	20 93 28 01 	sts	0x0128, r18	; 0x800128 <readyQ>
 4f8:	0e 94 de 01 	call	0x3bc	; 0x3bc <dispatch>
 4fc:	78 94       	sei
 4fe:	0f 90       	pop	r0
 500:	0f 90       	pop	r0
 502:	df 91       	pop	r29
 504:	cf 91       	pop	r28
 506:	08 95       	ret
 508:	ff cf       	rjmp	.-2      	; 0x508 <__stack+0x9>
 50a:	ff cf       	rjmp	.-2      	; 0x50a <__stack+0xb>
 50c:	fc 01       	movw	r30, r24
 50e:	01 c0       	rjmp	.+2      	; 0x512 <__stack+0x13>
 510:	f9 01       	movw	r30, r18
 512:	24 81       	ldd	r18, Z+4	; 0x04
 514:	35 81       	ldd	r19, Z+5	; 0x05
 516:	21 15       	cp	r18, r1
 518:	31 05       	cpc	r19, r1
 51a:	d1 f7       	brne	.-12     	; 0x510 <__stack+0x11>
 51c:	29 81       	ldd	r18, Y+1	; 0x01
 51e:	3a 81       	ldd	r19, Y+2	; 0x02
 520:	35 83       	std	Z+5, r19	; 0x05
 522:	24 83       	std	Z+4, r18	; 0x04
 524:	e2 cf       	rjmp	.-60     	; 0x4ea <__DATA_REGION_LENGTH__+0xea>
 526:	78 94       	sei
 528:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 52c:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 530:	ed 91       	ld	r30, X+
 532:	fc 91       	ld	r31, X
 534:	11 97       	sbiw	r26, 0x01	; 1
 536:	12 96       	adiw	r26, 0x02	; 2
 538:	8d 91       	ld	r24, X+
 53a:	9c 91       	ld	r25, X
 53c:	13 97       	sbiw	r26, 0x03	; 3
 53e:	09 95       	icall
 540:	f8 94       	cli
 542:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 546:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 54a:	15 96       	adiw	r26, 0x05	; 5
 54c:	1c 92       	st	X, r1
 54e:	1e 92       	st	-X, r1
 550:	14 97       	sbiw	r26, 0x04	; 4
 552:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <freeQ>
 556:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <freeQ+0x1>
 55a:	30 97       	sbiw	r30, 0x00	; 0
 55c:	11 f4       	brne	.+4      	; 0x562 <__stack+0x63>
 55e:	17 c0       	rjmp	.+46     	; 0x58e <__stack+0x8f>
 560:	fc 01       	movw	r30, r24
 562:	84 81       	ldd	r24, Z+4	; 0x04
 564:	95 81       	ldd	r25, Z+5	; 0x05
 566:	00 97       	sbiw	r24, 0x00	; 0
 568:	d9 f7       	brne	.-10     	; 0x560 <__stack+0x61>
 56a:	b5 83       	std	Z+5, r27	; 0x05
 56c:	a4 83       	std	Z+4, r26	; 0x04
 56e:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <readyQ>
 572:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <readyQ+0x1>
 576:	00 97       	sbiw	r24, 0x00	; 0
 578:	79 f0       	breq	.+30     	; 0x598 <__stack+0x99>
 57a:	fc 01       	movw	r30, r24
 57c:	24 81       	ldd	r18, Z+4	; 0x04
 57e:	35 81       	ldd	r19, Z+5	; 0x05
 580:	30 93 29 01 	sts	0x0129, r19	; 0x800129 <readyQ+0x1>
 584:	20 93 28 01 	sts	0x0128, r18	; 0x800128 <readyQ>
 588:	0e 94 de 01 	call	0x3bc	; 0x3bc <dispatch>
 58c:	83 cf       	rjmp	.-250    	; 0x494 <__DATA_REGION_LENGTH__+0x94>
 58e:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <freeQ+0x1>
 592:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <freeQ>
 596:	eb cf       	rjmp	.-42     	; 0x56e <__stack+0x6f>
 598:	ff cf       	rjmp	.-2      	; 0x598 <__stack+0x99>

0000059a <lock>:
	enqueue(current, &readyQ);
	dispatch(dequeue(&readyQ));
	ENABLE();
}

void lock(mutex *m) {
 59a:	cf 93       	push	r28
 59c:	df 93       	push	r29
 59e:	dc 01       	movw	r26, r24
	DISABLE();
 5a0:	f8 94       	cli
	
	// If it's unlocked, lock it
	if(m->locked == 0){
 5a2:	8d 91       	ld	r24, X+
 5a4:	9c 91       	ld	r25, X
 5a6:	11 97       	sbiw	r26, 0x01	; 1
 5a8:	89 2b       	or	r24, r25
 5aa:	41 f1       	breq	.+80     	; 0x5fc <lock+0x62>
	}
	
	// Else - put the current thread in the back of the line of the waitQ
	// and run the first thread in the readyQ
	else{
		enqueue(current, &(m->waitQ));
 5ac:	c0 91 00 01 	lds	r28, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 5b0:	d0 91 01 01 	lds	r29, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
	*/
	PORTB = (1 << PB7) | (1 << PB4);
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 5b4:	1d 82       	std	Y+5, r1	; 0x05
 5b6:	1c 82       	std	Y+4, r1	; 0x04
	
    if (*queue == NULL) {
 5b8:	12 96       	adiw	r26, 0x02	; 2
 5ba:	ed 91       	ld	r30, X+
 5bc:	fc 91       	ld	r31, X
 5be:	13 97       	sbiw	r26, 0x03	; 3
 5c0:	30 97       	sbiw	r30, 0x00	; 0
 5c2:	11 f4       	brne	.+4      	; 0x5c8 <lock+0x2e>
 5c4:	23 c0       	rjmp	.+70     	; 0x60c <lock+0x72>
    } else if(current != p){
		p->next = *queue;
		*queue = p;
    }else {
        thread q = *queue;
        while (q->next)
 5c6:	fc 01       	movw	r30, r24
 5c8:	84 81       	ldd	r24, Z+4	; 0x04
 5ca:	95 81       	ldd	r25, Z+5	; 0x05
 5cc:	00 97       	sbiw	r24, 0x00	; 0
 5ce:	d9 f7       	brne	.-10     	; 0x5c6 <lock+0x2c>
            q = q->next;
        q->next = p;
 5d0:	d5 83       	std	Z+5, r29	; 0x05
 5d2:	c4 83       	std	Z+4, r28	; 0x04
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 5d4:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <readyQ>
 5d8:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <readyQ+0x1>
    if (*queue) {
 5dc:	00 97       	sbiw	r24, 0x00	; 0
 5de:	69 f0       	breq	.+26     	; 0x5fa <lock+0x60>
        *queue = (*queue)->next;
 5e0:	fc 01       	movw	r30, r24
 5e2:	24 81       	ldd	r18, Z+4	; 0x04
 5e4:	35 81       	ldd	r19, Z+5	; 0x05
 5e6:	30 93 29 01 	sts	0x0129, r19	; 0x800129 <readyQ+0x1>
 5ea:	20 93 28 01 	sts	0x0128, r18	; 0x800128 <readyQ>
	
	// Else - put the current thread in the back of the line of the waitQ
	// and run the first thread in the readyQ
	else{
		enqueue(current, &(m->waitQ));
		dispatch(dequeue(&readyQ));
 5ee:	0e 94 de 01 	call	0x3bc	; 0x3bc <dispatch>
	}
	ENABLE();
 5f2:	78 94       	sei
}
 5f4:	df 91       	pop	r29
 5f6:	cf 91       	pop	r28
 5f8:	08 95       	ret
 5fa:	ff cf       	rjmp	.-2      	; 0x5fa <lock+0x60>
void lock(mutex *m) {
	DISABLE();
	
	// If it's unlocked, lock it
	if(m->locked == 0){
		m->locked = 1;
 5fc:	81 e0       	ldi	r24, 0x01	; 1
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	8d 93       	st	X+, r24
 602:	9c 93       	st	X, r25
	// and run the first thread in the readyQ
	else{
		enqueue(current, &(m->waitQ));
		dispatch(dequeue(&readyQ));
	}
	ENABLE();
 604:	78 94       	sei
}
 606:	df 91       	pop	r29
 608:	cf 91       	pop	r28
 60a:	08 95       	ret

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
	
    if (*queue == NULL) {
        *queue = p;
 60c:	13 96       	adiw	r26, 0x03	; 3
 60e:	dc 93       	st	X, r29
 610:	ce 93       	st	-X, r28
 612:	12 97       	sbiw	r26, 0x02	; 2
 614:	df cf       	rjmp	.-66     	; 0x5d4 <lock+0x3a>

00000616 <unlock>:
		dispatch(dequeue(&readyQ));
	}
	ENABLE();
}

void unlock(mutex *m) {
 616:	cf 93       	push	r28
 618:	df 93       	push	r29
 61a:	fc 01       	movw	r30, r24
	
	DISABLE();
 61c:	f8 94       	cli
	
	// If threads are available in the waitQ, put the current thread in the last position of the readyQ
	// and run the first thread in the waitQ
	if(m->waitQ != NULL){
 61e:	82 81       	ldd	r24, Z+2	; 0x02
 620:	93 81       	ldd	r25, Z+3	; 0x03
 622:	89 2b       	or	r24, r25
 624:	51 f1       	breq	.+84     	; 0x67a <unlock+0x64>
		enqueue(current, &readyQ);
 626:	c0 91 00 01 	lds	r28, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 62a:	d0 91 01 01 	lds	r29, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
	*/
	PORTB = (1 << PB7) | (1 << PB4);
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 62e:	1d 82       	std	Y+5, r1	; 0x05
 630:	1c 82       	std	Y+4, r1	; 0x04
	
    if (*queue == NULL) {
 632:	a0 91 28 01 	lds	r26, 0x0128	; 0x800128 <readyQ>
 636:	b0 91 29 01 	lds	r27, 0x0129	; 0x800129 <readyQ+0x1>
 63a:	10 97       	sbiw	r26, 0x00	; 0
 63c:	11 f4       	brne	.+4      	; 0x642 <unlock+0x2c>
 63e:	23 c0       	rjmp	.+70     	; 0x686 <unlock+0x70>
    } else if(current != p){
		p->next = *queue;
		*queue = p;
    }else {
        thread q = *queue;
        while (q->next)
 640:	dc 01       	movw	r26, r24
 642:	14 96       	adiw	r26, 0x04	; 4
 644:	8d 91       	ld	r24, X+
 646:	9c 91       	ld	r25, X
 648:	15 97       	sbiw	r26, 0x05	; 5
 64a:	00 97       	sbiw	r24, 0x00	; 0
 64c:	c9 f7       	brne	.-14     	; 0x640 <unlock+0x2a>
            q = q->next;
        q->next = p;
 64e:	15 96       	adiw	r26, 0x05	; 5
 650:	dc 93       	st	X, r29
 652:	ce 93       	st	-X, r28
 654:	14 97       	sbiw	r26, 0x04	; 4
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 656:	82 81       	ldd	r24, Z+2	; 0x02
 658:	93 81       	ldd	r25, Z+3	; 0x03
    if (*queue) {
 65a:	00 97       	sbiw	r24, 0x00	; 0
 65c:	69 f0       	breq	.+26     	; 0x678 <unlock+0x62>
        *queue = (*queue)->next;
 65e:	dc 01       	movw	r26, r24
 660:	14 96       	adiw	r26, 0x04	; 4
 662:	2d 91       	ld	r18, X+
 664:	3c 91       	ld	r19, X
 666:	15 97       	sbiw	r26, 0x05	; 5
 668:	33 83       	std	Z+3, r19	; 0x03
 66a:	22 83       	std	Z+2, r18	; 0x02
	
	// If threads are available in the waitQ, put the current thread in the last position of the readyQ
	// and run the first thread in the waitQ
	if(m->waitQ != NULL){
		enqueue(current, &readyQ);
		dispatch(dequeue(&(m->waitQ)));
 66c:	0e 94 de 01 	call	0x3bc	; 0x3bc <dispatch>
	// Else - unlock (put the locked flag to 0)
	else{
		m->locked = 0;
	}
	
	ENABLE();
 670:	78 94       	sei
}
 672:	df 91       	pop	r29
 674:	cf 91       	pop	r28
 676:	08 95       	ret
 678:	ff cf       	rjmp	.-2      	; 0x678 <unlock+0x62>
		dispatch(dequeue(&(m->waitQ)));
	}
	
	// Else - unlock (put the locked flag to 0)
	else{
		m->locked = 0;
 67a:	11 82       	std	Z+1, r1	; 0x01
 67c:	10 82       	st	Z, r1
	}
	
	ENABLE();
 67e:	78 94       	sei
}
 680:	df 91       	pop	r29
 682:	cf 91       	pop	r28
 684:	08 95       	ret

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
	
    if (*queue == NULL) {
        *queue = p;
 686:	d0 93 29 01 	sts	0x0129, r29	; 0x800129 <readyQ+0x1>
 68a:	c0 93 28 01 	sts	0x0128, r28	; 0x800128 <readyQ>
 68e:	e3 cf       	rjmp	.-58     	; 0x656 <unlock+0x40>

00000690 <whatisclock>:
	
	ENABLE();
}
int whatisclock(){
	return(Timer);
}
 690:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <Timer>
 694:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <Timer+0x1>
 698:	08 95       	ret

0000069a <resetclock>:
void resetclock(){
	Timer = 0;
 69a:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <Timer+0x1>
 69e:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <Timer>
 6a2:	08 95       	ret

000006a4 <__divmodsi4>:
 6a4:	05 2e       	mov	r0, r21
 6a6:	97 fb       	bst	r25, 7
 6a8:	1e f4       	brtc	.+6      	; 0x6b0 <__divmodsi4+0xc>
 6aa:	00 94       	com	r0
 6ac:	0e 94 69 03 	call	0x6d2	; 0x6d2 <__negsi2>
 6b0:	57 fd       	sbrc	r21, 7
 6b2:	07 d0       	rcall	.+14     	; 0x6c2 <__divmodsi4_neg2>
 6b4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__udivmodsi4>
 6b8:	07 fc       	sbrc	r0, 7
 6ba:	03 d0       	rcall	.+6      	; 0x6c2 <__divmodsi4_neg2>
 6bc:	4e f4       	brtc	.+18     	; 0x6d0 <__divmodsi4_exit>
 6be:	0c 94 69 03 	jmp	0x6d2	; 0x6d2 <__negsi2>

000006c2 <__divmodsi4_neg2>:
 6c2:	50 95       	com	r21
 6c4:	40 95       	com	r20
 6c6:	30 95       	com	r19
 6c8:	21 95       	neg	r18
 6ca:	3f 4f       	sbci	r19, 0xFF	; 255
 6cc:	4f 4f       	sbci	r20, 0xFF	; 255
 6ce:	5f 4f       	sbci	r21, 0xFF	; 255

000006d0 <__divmodsi4_exit>:
 6d0:	08 95       	ret

000006d2 <__negsi2>:
 6d2:	90 95       	com	r25
 6d4:	80 95       	com	r24
 6d6:	70 95       	com	r23
 6d8:	61 95       	neg	r22
 6da:	7f 4f       	sbci	r23, 0xFF	; 255
 6dc:	8f 4f       	sbci	r24, 0xFF	; 255
 6de:	9f 4f       	sbci	r25, 0xFF	; 255
 6e0:	08 95       	ret

000006e2 <__udivmodsi4>:
 6e2:	a1 e2       	ldi	r26, 0x21	; 33
 6e4:	1a 2e       	mov	r1, r26
 6e6:	aa 1b       	sub	r26, r26
 6e8:	bb 1b       	sub	r27, r27
 6ea:	fd 01       	movw	r30, r26
 6ec:	0d c0       	rjmp	.+26     	; 0x708 <__udivmodsi4_ep>

000006ee <__udivmodsi4_loop>:
 6ee:	aa 1f       	adc	r26, r26
 6f0:	bb 1f       	adc	r27, r27
 6f2:	ee 1f       	adc	r30, r30
 6f4:	ff 1f       	adc	r31, r31
 6f6:	a2 17       	cp	r26, r18
 6f8:	b3 07       	cpc	r27, r19
 6fa:	e4 07       	cpc	r30, r20
 6fc:	f5 07       	cpc	r31, r21
 6fe:	20 f0       	brcs	.+8      	; 0x708 <__udivmodsi4_ep>
 700:	a2 1b       	sub	r26, r18
 702:	b3 0b       	sbc	r27, r19
 704:	e4 0b       	sbc	r30, r20
 706:	f5 0b       	sbc	r31, r21

00000708 <__udivmodsi4_ep>:
 708:	66 1f       	adc	r22, r22
 70a:	77 1f       	adc	r23, r23
 70c:	88 1f       	adc	r24, r24
 70e:	99 1f       	adc	r25, r25
 710:	1a 94       	dec	r1
 712:	69 f7       	brne	.-38     	; 0x6ee <__udivmodsi4_loop>
 714:	60 95       	com	r22
 716:	70 95       	com	r23
 718:	80 95       	com	r24
 71a:	90 95       	com	r25
 71c:	9b 01       	movw	r18, r22
 71e:	ac 01       	movw	r20, r24
 720:	bd 01       	movw	r22, r26
 722:	cf 01       	movw	r24, r30
 724:	08 95       	ret

00000726 <setjmp>:
 726:	dc 01       	movw	r26, r24
 728:	2d 92       	st	X+, r2
 72a:	3d 92       	st	X+, r3
 72c:	4d 92       	st	X+, r4
 72e:	5d 92       	st	X+, r5
 730:	6d 92       	st	X+, r6
 732:	7d 92       	st	X+, r7
 734:	8d 92       	st	X+, r8
 736:	9d 92       	st	X+, r9
 738:	ad 92       	st	X+, r10
 73a:	bd 92       	st	X+, r11
 73c:	cd 92       	st	X+, r12
 73e:	dd 92       	st	X+, r13
 740:	ed 92       	st	X+, r14
 742:	fd 92       	st	X+, r15
 744:	0d 93       	st	X+, r16
 746:	1d 93       	st	X+, r17
 748:	cd 93       	st	X+, r28
 74a:	dd 93       	st	X+, r29
 74c:	ff 91       	pop	r31
 74e:	ef 91       	pop	r30
 750:	8d b7       	in	r24, 0x3d	; 61
 752:	8d 93       	st	X+, r24
 754:	8e b7       	in	r24, 0x3e	; 62
 756:	8d 93       	st	X+, r24
 758:	8f b7       	in	r24, 0x3f	; 63
 75a:	8d 93       	st	X+, r24
 75c:	ed 93       	st	X+, r30
 75e:	fd 93       	st	X+, r31
 760:	88 27       	eor	r24, r24
 762:	99 27       	eor	r25, r25
 764:	09 94       	ijmp

00000766 <longjmp>:
 766:	dc 01       	movw	r26, r24
 768:	cb 01       	movw	r24, r22
 76a:	81 30       	cpi	r24, 0x01	; 1
 76c:	91 05       	cpc	r25, r1
 76e:	81 1d       	adc	r24, r1
 770:	2d 90       	ld	r2, X+
 772:	3d 90       	ld	r3, X+
 774:	4d 90       	ld	r4, X+
 776:	5d 90       	ld	r5, X+
 778:	6d 90       	ld	r6, X+
 77a:	7d 90       	ld	r7, X+
 77c:	8d 90       	ld	r8, X+
 77e:	9d 90       	ld	r9, X+
 780:	ad 90       	ld	r10, X+
 782:	bd 90       	ld	r11, X+
 784:	cd 90       	ld	r12, X+
 786:	dd 90       	ld	r13, X+
 788:	ed 90       	ld	r14, X+
 78a:	fd 90       	ld	r15, X+
 78c:	0d 91       	ld	r16, X+
 78e:	1d 91       	ld	r17, X+
 790:	cd 91       	ld	r28, X+
 792:	dd 91       	ld	r29, X+
 794:	ed 91       	ld	r30, X+
 796:	fd 91       	ld	r31, X+
 798:	0d 90       	ld	r0, X+
 79a:	f8 94       	cli
 79c:	fe bf       	out	0x3e, r31	; 62
 79e:	0f be       	out	0x3f, r0	; 63
 7a0:	ed bf       	out	0x3d, r30	; 61
 7a2:	ed 91       	ld	r30, X+
 7a4:	fd 91       	ld	r31, X+
 7a6:	09 94       	ijmp

000007a8 <_exit>:
 7a8:	f8 94       	cli

000007aa <__stop_program>:
 7aa:	ff cf       	rjmp	.-2      	; 0x7aa <__stop_program>
