
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  000007d4  00000868  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000022b  00800118  00800118  00000880  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000880  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  000008f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012a7  00000000  00000000  000009a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bc8  00000000  00000000  00001c4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007f5  00000000  00000000  00002817  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000026c  00000000  00000000  0000300c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005a5  00000000  00000000  00003278  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bd4  00000000  00000000  0000381d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  000043f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 8f 02 	jmp	0x51e	; 0x51e <__vector_3>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 b4 02 	jmp	0x568	; 0x568 <__vector_7>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	e4 ed       	ldi	r30, 0xD4	; 212
  70:	f7 e0       	ldi	r31, 0x07	; 7
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	a8 31       	cpi	r26, 0x18	; 24
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
  7e:	23 e0       	ldi	r18, 0x03	; 3
  80:	a8 e1       	ldi	r26, 0x18	; 24
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	a3 34       	cpi	r26, 0x43	; 67
  8a:	b2 07       	cpc	r27, r18
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 57 01 	call	0x2ae	; 0x2ae <main>
  92:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <button>:
	}
}
bool is_prime(long i){
	for(int n = 2; n < i; n++){
		if(i % n == 0){
			return(false);
  9a:	80 e8       	ldi	r24, 0x80	; 128
  9c:	85 b9       	out	0x05, r24	; 5
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7fc0f4>
  a4:	10 92 f9 00 	sts	0x00F9, r1	; 0x8000f9 <__TEXT_REGION_LENGTH__+0x7fc0f9>
  a8:	80 e0       	ldi	r24, 0x00	; 0
  aa:	1f 99       	sbic	0x03, 7	; 3
  ac:	10 c0       	rjmp	.+32     	; 0xce <button+0x34>
  ae:	81 11       	cpse	r24, r1
  b0:	1c c0       	rjmp	.+56     	; 0xea <button+0x50>
  b2:	90 91 f9 00 	lds	r25, 0x00F9	; 0x8000f9 <__TEXT_REGION_LENGTH__+0x7fc0f9>
  b6:	91 30       	cpi	r25, 0x01	; 1
  b8:	d1 f0       	breq	.+52     	; 0xee <button+0x54>
  ba:	1f 99       	sbic	0x03, 7	; 3
  bc:	04 c0       	rjmp	.+8      	; 0xc6 <button+0x2c>
  be:	90 91 f4 00 	lds	r25, 0x00F4	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7fc0f4>
  c2:	91 30       	cpi	r25, 0x01	; 1
  c4:	61 f0       	breq	.+24     	; 0xde <button+0x44>
  c6:	1f 99       	sbic	0x03, 7	; 3
  c8:	ef cf       	rjmp	.-34     	; 0xa8 <button+0xe>
  ca:	1f 9b       	sbis	0x03, 7	; 3
  cc:	f0 cf       	rjmp	.-32     	; 0xae <button+0x14>
  ce:	1f 99       	sbic	0x03, 7	; 3
  d0:	fa cf       	rjmp	.-12     	; 0xc6 <button+0x2c>
  d2:	81 11       	cpse	r24, r1
  d4:	f8 cf       	rjmp	.-16     	; 0xc6 <button+0x2c>
  d6:	90 91 f4 00 	lds	r25, 0x00F4	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7fc0f4>
  da:	91 30       	cpi	r25, 0x01	; 1
  dc:	a1 f7       	brne	.-24     	; 0xc6 <button+0x2c>
  de:	90 93 f9 00 	sts	0x00F9, r25	; 0x8000f9 <__TEXT_REGION_LENGTH__+0x7fc0f9>
  e2:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7fc0f4>
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	e0 cf       	rjmp	.-64     	; 0xaa <button+0x10>
  ea:	93 b1       	in	r25, 0x03	; 3
  ec:	ec cf       	rjmp	.-40     	; 0xc6 <button+0x2c>
  ee:	10 92 f9 00 	sts	0x00F9, r1	; 0x8000f9 <__TEXT_REGION_LENGTH__+0x7fc0f9>
  f2:	90 93 f4 00 	sts	0x00F4, r25	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7fc0f4>
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	d8 cf       	rjmp	.-80     	; 0xaa <button+0x10>

000000fa <writeChar>:
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	cd b7       	in	r28, 0x3d	; 61
 100:	de b7       	in	r29, 0x3e	; 62
 102:	64 97       	sbiw	r28, 0x14	; 20
 104:	0f b6       	in	r0, 0x3f	; 63
 106:	f8 94       	cli
 108:	de bf       	out	0x3e, r29	; 62
 10a:	0f be       	out	0x3f, r0	; 63
 10c:	cd bf       	out	0x3d, r28	; 61
 10e:	94 e1       	ldi	r25, 0x14	; 20
 110:	e4 e0       	ldi	r30, 0x04	; 4
 112:	f1 e0       	ldi	r31, 0x01	; 1
 114:	de 01       	movw	r26, r28
 116:	11 96       	adiw	r26, 0x01	; 1
 118:	01 90       	ld	r0, Z+
 11a:	0d 92       	st	X+, r0
 11c:	9a 95       	dec	r25
 11e:	e1 f7       	brne	.-8      	; 0x118 <writeChar+0x1e>
 120:	66 30       	cpi	r22, 0x06	; 6
 122:	71 05       	cpc	r23, r1
 124:	50 f5       	brcc	.+84     	; 0x17a <writeChar+0x80>
 126:	fb 01       	movw	r30, r22
 128:	f5 95       	asr	r31
 12a:	e7 95       	ror	r30
 12c:	e4 51       	subi	r30, 0x14	; 20
 12e:	ff 4f       	sbci	r31, 0xFF	; 255
 130:	a8 2f       	mov	r26, r24
 132:	b0 e0       	ldi	r27, 0x00	; 0
 134:	d0 97       	sbiw	r26, 0x30	; 48
 136:	aa 0f       	add	r26, r26
 138:	bb 1f       	adc	r27, r27
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	8c 0f       	add	r24, r28
 140:	9d 1f       	adc	r25, r29
 142:	a8 0f       	add	r26, r24
 144:	b9 1f       	adc	r27, r25
 146:	4d 91       	ld	r20, X+
 148:	5c 91       	ld	r21, X
 14a:	61 70       	andi	r22, 0x01	; 1
 14c:	77 27       	eor	r23, r23
 14e:	df 01       	movw	r26, r30
 150:	54 96       	adiw	r26, 0x14	; 20
 152:	ca 01       	movw	r24, r20
 154:	8f 70       	andi	r24, 0x0F	; 15
 156:	99 27       	eor	r25, r25
 158:	61 30       	cpi	r22, 0x01	; 1
 15a:	71 05       	cpc	r23, r1
 15c:	b9 f0       	breq	.+46     	; 0x18c <writeChar+0x92>
 15e:	20 81       	ld	r18, Z
 160:	20 7f       	andi	r18, 0xF0	; 240
 162:	82 2b       	or	r24, r18
 164:	80 83       	st	Z, r24
 166:	35 96       	adiw	r30, 0x05	; 5
 168:	52 95       	swap	r21
 16a:	42 95       	swap	r20
 16c:	4f 70       	andi	r20, 0x0F	; 15
 16e:	45 27       	eor	r20, r21
 170:	5f 70       	andi	r21, 0x0F	; 15
 172:	45 27       	eor	r20, r21
 174:	ea 17       	cp	r30, r26
 176:	fb 07       	cpc	r31, r27
 178:	61 f7       	brne	.-40     	; 0x152 <writeChar+0x58>
 17a:	64 96       	adiw	r28, 0x14	; 20
 17c:	0f b6       	in	r0, 0x3f	; 63
 17e:	f8 94       	cli
 180:	de bf       	out	0x3e, r29	; 62
 182:	0f be       	out	0x3f, r0	; 63
 184:	cd bf       	out	0x3d, r28	; 61
 186:	df 91       	pop	r29
 188:	cf 91       	pop	r28
 18a:	08 95       	ret
 18c:	82 95       	swap	r24
 18e:	92 95       	swap	r25
 190:	90 7f       	andi	r25, 0xF0	; 240
 192:	98 27       	eor	r25, r24
 194:	80 7f       	andi	r24, 0xF0	; 240
 196:	98 27       	eor	r25, r24
 198:	20 81       	ld	r18, Z
 19a:	2f 70       	andi	r18, 0x0F	; 15
 19c:	e2 cf       	rjmp	.-60     	; 0x162 <writeChar+0x68>

0000019e <printAt>:
 19e:	8f 92       	push	r8
 1a0:	9f 92       	push	r9
 1a2:	af 92       	push	r10
 1a4:	bf 92       	push	r11
 1a6:	cf 92       	push	r12
 1a8:	df 92       	push	r13
 1aa:	ef 92       	push	r14
 1ac:	ff 92       	push	r15
 1ae:	cf 93       	push	r28
 1b0:	df 93       	push	r29
 1b2:	4b 01       	movw	r8, r22
 1b4:	5c 01       	movw	r10, r24
 1b6:	ea 01       	movw	r28, r20
 1b8:	88 e1       	ldi	r24, 0x18	; 24
 1ba:	91 e0       	ldi	r25, 0x01	; 1
 1bc:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <lock>
 1c0:	c5 01       	movw	r24, r10
 1c2:	b4 01       	movw	r22, r8
 1c4:	24 e6       	ldi	r18, 0x64	; 100
 1c6:	30 e0       	ldi	r19, 0x00	; 0
 1c8:	40 e0       	ldi	r20, 0x00	; 0
 1ca:	50 e0       	ldi	r21, 0x00	; 0
 1cc:	0e 94 66 03 	call	0x6cc	; 0x6cc <__divmodsi4>
 1d0:	2a e0       	ldi	r18, 0x0A	; 10
 1d2:	c2 2e       	mov	r12, r18
 1d4:	d1 2c       	mov	r13, r1
 1d6:	e1 2c       	mov	r14, r1
 1d8:	f1 2c       	mov	r15, r1
 1da:	a7 01       	movw	r20, r14
 1dc:	96 01       	movw	r18, r12
 1de:	0e 94 66 03 	call	0x6cc	; 0x6cc <__divmodsi4>
 1e2:	be 01       	movw	r22, r28
 1e4:	80 e3       	ldi	r24, 0x30	; 48
 1e6:	82 0f       	add	r24, r18
 1e8:	0e 94 7d 00 	call	0xfa	; 0xfa <writeChar>
 1ec:	21 96       	adiw	r28, 0x01	; 1
 1ee:	c5 01       	movw	r24, r10
 1f0:	b4 01       	movw	r22, r8
 1f2:	a7 01       	movw	r20, r14
 1f4:	96 01       	movw	r18, r12
 1f6:	0e 94 66 03 	call	0x6cc	; 0x6cc <__divmodsi4>
 1fa:	86 2f       	mov	r24, r22
 1fc:	be 01       	movw	r22, r28
 1fe:	80 5d       	subi	r24, 0xD0	; 208
 200:	0e 94 7d 00 	call	0xfa	; 0xfa <writeChar>
 204:	88 e1       	ldi	r24, 0x18	; 24
 206:	91 e0       	ldi	r25, 0x01	; 1
 208:	df 91       	pop	r29
 20a:	cf 91       	pop	r28
 20c:	ff 90       	pop	r15
 20e:	ef 90       	pop	r14
 210:	df 90       	pop	r13
 212:	cf 90       	pop	r12
 214:	bf 90       	pop	r11
 216:	af 90       	pop	r10
 218:	9f 90       	pop	r9
 21a:	8f 90       	pop	r8
 21c:	0c 94 1f 03 	jmp	0x63e	; 0x63e <unlock>

00000220 <computePrimes>:
 220:	ec 01       	movw	r28, r24
 222:	81 2c       	mov	r8, r1
 224:	91 2c       	mov	r9, r1
 226:	54 01       	movw	r10, r8
 228:	83 94       	inc	r8
 22a:	83 e0       	ldi	r24, 0x03	; 3
 22c:	88 16       	cp	r8, r24
 22e:	91 04       	cpc	r9, r1
 230:	a1 04       	cpc	r10, r1
 232:	b1 04       	cpc	r11, r1
 234:	e4 f0       	brlt	.+56     	; 0x26e <computePrimes+0x4e>
 236:	80 fe       	sbrs	r8, 0
 238:	1f c0       	rjmp	.+62     	; 0x278 <computePrimes+0x58>
 23a:	83 e0       	ldi	r24, 0x03	; 3
 23c:	c8 2e       	mov	r12, r24
 23e:	d1 2c       	mov	r13, r1
 240:	e1 2c       	mov	r14, r1
 242:	f1 2c       	mov	r15, r1
 244:	0d c0       	rjmp	.+26     	; 0x260 <computePrimes+0x40>
 246:	8f ef       	ldi	r24, 0xFF	; 255
 248:	c8 1a       	sub	r12, r24
 24a:	d8 0a       	sbc	r13, r24
 24c:	e8 0a       	sbc	r14, r24
 24e:	f8 0a       	sbc	r15, r24
 250:	c5 01       	movw	r24, r10
 252:	b4 01       	movw	r22, r8
 254:	0e 94 66 03 	call	0x6cc	; 0x6cc <__divmodsi4>
 258:	67 2b       	or	r22, r23
 25a:	68 2b       	or	r22, r24
 25c:	69 2b       	or	r22, r25
 25e:	61 f0       	breq	.+24     	; 0x278 <computePrimes+0x58>
 260:	96 01       	movw	r18, r12
 262:	a7 01       	movw	r20, r14
 264:	c8 14       	cp	r12, r8
 266:	d9 04       	cpc	r13, r9
 268:	ea 04       	cpc	r14, r10
 26a:	fb 04       	cpc	r15, r11
 26c:	61 f7       	brne	.-40     	; 0x246 <computePrimes+0x26>
 26e:	ae 01       	movw	r20, r28
 270:	c5 01       	movw	r24, r10
 272:	b4 01       	movw	r22, r8
 274:	0e 94 cf 00 	call	0x19e	; 0x19e <printAt>
 278:	8f ef       	ldi	r24, 0xFF	; 255
 27a:	88 1a       	sub	r8, r24
 27c:	98 0a       	sbc	r9, r24
 27e:	a8 0a       	sbc	r10, r24
 280:	b8 0a       	sbc	r11, r24
 282:	d3 cf       	rjmp	.-90     	; 0x22a <computePrimes+0xa>

00000284 <blink>:
void blink(){
	//TCCR1B = (1 << CS12);
	int clk = 20;
	//uint16_t clk = 0;
	//uint16_t interval = 8000000/512;
	int on = 0;
 284:	c0 e0       	ldi	r28, 0x00	; 0
 286:	d0 e0       	ldi	r29, 0x00	; 0
	
	while(1){
		if(whatisclock() >= clk){
			resetclock();
			if(on == 0){
				LCDDR3 = 0x1;
 288:	11 e0       	ldi	r17, 0x01	; 1
	//uint16_t clk = 0;
	//uint16_t interval = 8000000/512;
	int on = 0;
	
	while(1){
		if(whatisclock() >= clk){
 28a:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <whatisclock>
 28e:	44 97       	sbiw	r24, 0x14	; 20
 290:	e4 f3       	brlt	.-8      	; 0x28a <blink+0x6>
			resetclock();
 292:	0e 94 61 03 	call	0x6c2	; 0x6c2 <resetclock>
			if(on == 0){
 296:	cd 2b       	or	r28, r29
 298:	29 f4       	brne	.+10     	; 0x2a4 <blink+0x20>
				LCDDR3 = 0x1;
 29a:	10 93 ef 00 	sts	0x00EF, r17	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7fc0ef>
				on = 1;
 29e:	c1 e0       	ldi	r28, 0x01	; 1
 2a0:	d0 e0       	ldi	r29, 0x00	; 0
 2a2:	f3 cf       	rjmp	.-26     	; 0x28a <blink+0x6>
				}else{
				LCDDR3 = 0x0;
 2a4:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7fc0ef>
				on = 0;
 2a8:	c0 e0       	ldi	r28, 0x00	; 0
 2aa:	d0 e0       	ldi	r29, 0x00	; 0
 2ac:	ee cf       	rjmp	.-36     	; 0x28a <blink+0x6>

000002ae <main>:
void resetclock();

mutex m = MUTEX_INIT;

int main() {
	CLKPR = 0x80;
 2ae:	e1 e6       	ldi	r30, 0x61	; 97
 2b0:	f0 e0       	ldi	r31, 0x00	; 0
 2b2:	80 e8       	ldi	r24, 0x80	; 128
 2b4:	80 83       	st	Z, r24
	CLKPR = 0x00;
 2b6:	10 82       	st	Z, r1
		LCDCS    - Asynchronous clock source
		LCDMUX's - Duty = 1/4, Bias = 1/3
		LCDPM's  - Number of Segments = 25
	*/
	
	LCDCRB = (1 << LCDCS) | (1 << LCDMUX1) | (1 << LCDMUX0) | (1 << LCDPM2) | (1 << LCDPM1) | (1 << LCDPM0);
 2b8:	87 eb       	ldi	r24, 0xB7	; 183
 2ba:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
	/*
		LCD Frame Rate Register:
		LCDCD's - Prescaler setting N = 16
	*/
	
	LCDFRR = (1 << LCDCD2) | (1 << LCDCD1) | (1 << LCDCD0);
 2be:	87 e0       	ldi	r24, 0x07	; 7
 2c0:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>
		LCD Contrast Control Register
		None of the LCDDC's used = 300 microseconds
		LCDCC's = 3,35V
	*/
	
	LCDCCR = (1 << LCDCC3) | (1 << LCDCC2) | (1 << LCDCC1) | (1 << LCDCC0);
 2c4:	8f e0       	ldi	r24, 0x0F	; 15
 2c6:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
	
	/*
		LCDEN = LCD Enabled
		LCDAB = Low Power Waveform
	*/
	LCDCRA = (1 << LCDEN) | (1 << LCDAB);
 2ca:	80 ec       	ldi	r24, 0xC0	; 192
 2cc:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>

int main() {
	CLKPR = 0x80;
	CLKPR = 0x00;
	LCD_Init();
	spawn(computePrimes, 0);
 2d0:	60 e0       	ldi	r22, 0x00	; 0
 2d2:	70 e0       	ldi	r23, 0x00	; 0
 2d4:	80 e1       	ldi	r24, 0x10	; 16
 2d6:	91 e0       	ldi	r25, 0x01	; 1
 2d8:	0e 94 96 01 	call	0x32c	; 0x32c <spawn>
	//spawn(computePrimes, 4);
	spawn(button, 3);
 2dc:	63 e0       	ldi	r22, 0x03	; 3
 2de:	70 e0       	ldi	r23, 0x00	; 0
 2e0:	8d e4       	ldi	r24, 0x4D	; 77
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	0e 94 96 01 	call	0x32c	; 0x32c <spawn>
	blink();
 2e8:	0e 94 42 01 	call	0x284	; 0x284 <blink>

000002ec <dispatch>:
        while (1) ;  // not much else to do...
    }
    return p;
}

static void dispatch(thread next) {
 2ec:	cf 93       	push	r28
 2ee:	df 93       	push	r29
 2f0:	00 d0       	rcall	.+0      	; 0x2f2 <dispatch+0x6>
 2f2:	cd b7       	in	r28, 0x3d	; 61
 2f4:	de b7       	in	r29, 0x3e	; 62
 2f6:	9a 83       	std	Y+2, r25	; 0x02
 2f8:	89 83       	std	Y+1, r24	; 0x01
    if (setjmp(current->context) == 0) {
 2fa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2fe:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 302:	06 96       	adiw	r24, 0x06	; 6
 304:	0e 94 a7 03 	call	0x74e	; 0x74e <setjmp>
 308:	89 2b       	or	r24, r25
 30a:	29 f0       	breq	.+10     	; 0x316 <dispatch+0x2a>
        current = next;
        longjmp(next->context,1);
    }
}
 30c:	0f 90       	pop	r0
 30e:	0f 90       	pop	r0
 310:	df 91       	pop	r29
 312:	cf 91       	pop	r28
 314:	08 95       	ret
    return p;
}

static void dispatch(thread next) {
    if (setjmp(current->context) == 0) {
        current = next;
 316:	89 81       	ldd	r24, Y+1	; 0x01
 318:	9a 81       	ldd	r25, Y+2	; 0x02
 31a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 31e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
        longjmp(next->context,1);
 322:	61 e0       	ldi	r22, 0x01	; 1
 324:	70 e0       	ldi	r23, 0x00	; 0
 326:	06 96       	adiw	r24, 0x06	; 6
 328:	0e 94 c7 03 	call	0x78e	; 0x78e <longjmp>

0000032c <spawn>:
    }
}

void spawn(void (* function)(int), int arg) {
 32c:	cf 93       	push	r28
 32e:	df 93       	push	r29
 330:	00 d0       	rcall	.+0      	; 0x332 <spawn+0x6>
 332:	cd b7       	in	r28, 0x3d	; 61
 334:	de b7       	in	r29, 0x3e	; 62
    thread newp;

    DISABLE();
 336:	f8 94       	cli
    if (!initialized) initialize();
 338:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <initialized>
 33c:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <initialized+0x1>
 340:	23 2b       	or	r18, r19
 342:	a9 f5       	brne	.+106    	; 0x3ae <spawn+0x82>
int initialized = 0;

static void initialize(void) {
    int i;
    for (i=0; i<NTHREADS-1; i++)
        threads[i].next = &threads[i+1];
 344:	2c ef       	ldi	r18, 0xFC	; 252
 346:	31 e0       	ldi	r19, 0x01	; 1
 348:	30 93 94 01 	sts	0x0194, r19	; 0x800194 <threads+0x5>
 34c:	20 93 93 01 	sts	0x0193, r18	; 0x800193 <threads+0x4>
 350:	29 e6       	ldi	r18, 0x69	; 105
 352:	32 e0       	ldi	r19, 0x02	; 2
 354:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <threads+0x72>
 358:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <threads+0x71>
 35c:	26 ed       	ldi	r18, 0xD6	; 214
 35e:	32 e0       	ldi	r19, 0x02	; 2
 360:	30 93 6e 02 	sts	0x026E, r19	; 0x80026e <threads+0xdf>
 364:	20 93 6d 02 	sts	0x026D, r18	; 0x80026d <threads+0xde>
    threads[NTHREADS-1].next = NULL;
 368:	10 92 db 02 	sts	0x02DB, r1	; 0x8002db <threads+0x14c>
 36c:	10 92 da 02 	sts	0x02DA, r1	; 0x8002da <threads+0x14b>

    initialized = 1;
 370:	21 e0       	ldi	r18, 0x01	; 1
 372:	30 e0       	ldi	r19, 0x00	; 0
 374:	30 93 1d 01 	sts	0x011D, r19	; 0x80011d <initialized+0x1>
 378:	20 93 1c 01 	sts	0x011C, r18	; 0x80011c <initialized>
	
	/*
		Interrupts are enabled on the 7th pin of PORTB
	*/
	PCMSK1 = (1 << PCINT15);
 37c:	20 e8       	ldi	r18, 0x80	; 128
 37e:	20 93 6c 00 	sts	0x006C, r18	; 0x80006c <__TEXT_REGION_LENGTH__+0x7fc06c>
	EIMSK = (1 << PCIE1);
 382:	2d bb       	out	0x1d, r18	; 29
	
	/*
		Enables Joystick
	*/
	PORTB = (1 << PB7) | (1 << PB4);
 384:	20 e9       	ldi	r18, 0x90	; 144
 386:	25 b9       	out	0x05, r18	; 5
	
	/*
		Sets OC1A to compare match
		Sets timer to CTC mode
	*/
	TCCR1A = (1 << COM1A1) | (1 << COM1A0);
 388:	20 ec       	ldi	r18, 0xC0	; 192
 38a:	20 93 80 00 	sts	0x0080, r18	; 0x800080 <__TEXT_REGION_LENGTH__+0x7fc080>
	TCCR1B = (1 << WGM12) | (1 << CS12) | (1 << CS10);
 38e:	2d e0       	ldi	r18, 0x0D	; 13
 390:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
	
	/*
		Timer compare A match interrupt: Enabled
	*/
	TIMSK1 = (1 << OCIE1A);
 394:	22 e0       	ldi	r18, 0x02	; 2
 396:	20 93 6f 00 	sts	0x006F, r18	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
	
	/*
		8MHz/(1024*20) = 50ms
		Set TCNT1 = 0
	*/
	OCR1A = 8000000/(1024 * 20);
 39a:	26 e8       	ldi	r18, 0x86	; 134
 39c:	31 e0       	ldi	r19, 0x01	; 1
 39e:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
 3a2:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
	TCNT1 = 0x0;
 3a6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
 3aa:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 3ae:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <freeQ>
 3b2:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <freeQ+0x1>
 3b6:	3a 83       	std	Y+2, r19	; 0x02
 3b8:	29 83       	std	Y+1, r18	; 0x01
    if (*queue) {
 3ba:	23 2b       	or	r18, r19
 3bc:	c9 f1       	breq	.+114    	; 0x430 <__DATA_REGION_LENGTH__+0x30>
        *queue = (*queue)->next;
 3be:	e9 81       	ldd	r30, Y+1	; 0x01
 3c0:	fa 81       	ldd	r31, Y+2	; 0x02
 3c2:	44 81       	ldd	r20, Z+4	; 0x04
 3c4:	55 81       	ldd	r21, Z+5	; 0x05
 3c6:	50 93 03 01 	sts	0x0103, r21	; 0x800103 <freeQ+0x1>
 3ca:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <freeQ>

    DISABLE();
    if (!initialized) initialize();

    newp = dequeue(&freeQ);
    newp->function = function;
 3ce:	91 83       	std	Z+1, r25	; 0x01
 3d0:	80 83       	st	Z, r24
    newp->arg = arg;
 3d2:	73 83       	std	Z+3, r23	; 0x03
 3d4:	62 83       	std	Z+2, r22	; 0x02
    newp->next = NULL;
 3d6:	15 82       	std	Z+5, r1	; 0x05
 3d8:	14 82       	std	Z+4, r1	; 0x04
    if (setjmp(newp->context) == 1) {
 3da:	cf 01       	movw	r24, r30
 3dc:	06 96       	adiw	r24, 0x06	; 6
 3de:	0e 94 a7 03 	call	0x74e	; 0x74e <setjmp>
 3e2:	01 97       	sbiw	r24, 0x01	; 1
 3e4:	91 f1       	breq	.+100    	; 0x44a <__DATA_REGION_LENGTH__+0x4a>
        current->function(current->arg);
        DISABLE();
        enqueue(current, &freeQ);
        dispatch(dequeue(&readyQ));
    }
    SETSTACK(&newp->context, &newp->stack);
 3e6:	e9 81       	ldd	r30, Y+1	; 0x01
 3e8:	fa 81       	ldd	r31, Y+2	; 0x02
 3ea:	36 96       	adiw	r30, 0x06	; 6
 3ec:	89 81       	ldd	r24, Y+1	; 0x01
 3ee:	9a 81       	ldd	r25, Y+2	; 0x02
 3f0:	87 59       	subi	r24, 0x97	; 151
 3f2:	9f 4f       	sbci	r25, 0xFF	; 255
 3f4:	91 8b       	std	Z+17, r25	; 0x11
 3f6:	80 8b       	std	Z+16, r24	; 0x10
 3f8:	93 8b       	std	Z+19, r25	; 0x13
 3fa:	82 8b       	std	Z+18, r24	; 0x12
	OCR1A = 8000000/(1024 * 20);
	TCNT1 = 0x0;
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 3fc:	e9 81       	ldd	r30, Y+1	; 0x01
 3fe:	fa 81       	ldd	r31, Y+2	; 0x02
 400:	15 82       	std	Z+5, r1	; 0x05
 402:	14 82       	std	Z+4, r1	; 0x04
    if (*queue == NULL) {
 404:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <readyQ>
 408:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <readyQ+0x1>
 40c:	30 97       	sbiw	r30, 0x00	; 0
 40e:	11 f4       	brne	.+4      	; 0x414 <__DATA_REGION_LENGTH__+0x14>
 410:	10 c0       	rjmp	.+32     	; 0x432 <__DATA_REGION_LENGTH__+0x32>
        *queue = p;
    } else {
        thread q = *queue;
        while (q->next)
 412:	fc 01       	movw	r30, r24
 414:	84 81       	ldd	r24, Z+4	; 0x04
 416:	95 81       	ldd	r25, Z+5	; 0x05
 418:	00 97       	sbiw	r24, 0x00	; 0
 41a:	d9 f7       	brne	.-10     	; 0x412 <__DATA_REGION_LENGTH__+0x12>
            q = q->next;
        q->next = p;
 41c:	89 81       	ldd	r24, Y+1	; 0x01
 41e:	9a 81       	ldd	r25, Y+2	; 0x02
 420:	95 83       	std	Z+5, r25	; 0x05
 422:	84 83       	std	Z+4, r24	; 0x04
        dispatch(dequeue(&readyQ));
    }
    SETSTACK(&newp->context, &newp->stack);

    enqueue(newp, &readyQ);
    ENABLE();
 424:	78 94       	sei
}
 426:	0f 90       	pop	r0
 428:	0f 90       	pop	r0
 42a:	df 91       	pop	r29
 42c:	cf 91       	pop	r28
 42e:	08 95       	ret
 430:	ff cf       	rjmp	.-2      	; 0x430 <__DATA_REGION_LENGTH__+0x30>
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
    if (*queue == NULL) {
        *queue = p;
 432:	29 81       	ldd	r18, Y+1	; 0x01
 434:	3a 81       	ldd	r19, Y+2	; 0x02
 436:	30 93 21 01 	sts	0x0121, r19	; 0x800121 <readyQ+0x1>
 43a:	20 93 20 01 	sts	0x0120, r18	; 0x800120 <readyQ>
        dispatch(dequeue(&readyQ));
    }
    SETSTACK(&newp->context, &newp->stack);

    enqueue(newp, &readyQ);
    ENABLE();
 43e:	78 94       	sei
}
 440:	0f 90       	pop	r0
 442:	0f 90       	pop	r0
 444:	df 91       	pop	r29
 446:	cf 91       	pop	r28
 448:	08 95       	ret
    newp = dequeue(&freeQ);
    newp->function = function;
    newp->arg = arg;
    newp->next = NULL;
    if (setjmp(newp->context) == 1) {
        ENABLE();
 44a:	78 94       	sei
        current->function(current->arg);
 44c:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 450:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 454:	ed 91       	ld	r30, X+
 456:	fc 91       	ld	r31, X
 458:	11 97       	sbiw	r26, 0x01	; 1
 45a:	12 96       	adiw	r26, 0x02	; 2
 45c:	8d 91       	ld	r24, X+
 45e:	9c 91       	ld	r25, X
 460:	13 97       	sbiw	r26, 0x03	; 3
 462:	09 95       	icall
        DISABLE();
 464:	f8 94       	cli
        enqueue(current, &freeQ);
 466:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 46a:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
	OCR1A = 8000000/(1024 * 20);
	TCNT1 = 0x0;
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 46e:	15 96       	adiw	r26, 0x05	; 5
 470:	1c 92       	st	X, r1
 472:	1e 92       	st	-X, r1
 474:	14 97       	sbiw	r26, 0x04	; 4
    if (*queue == NULL) {
 476:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <freeQ>
 47a:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <freeQ+0x1>
 47e:	30 97       	sbiw	r30, 0x00	; 0
 480:	11 f4       	brne	.+4      	; 0x486 <__DATA_REGION_LENGTH__+0x86>
 482:	17 c0       	rjmp	.+46     	; 0x4b2 <__DATA_REGION_LENGTH__+0xb2>
        *queue = p;
    } else {
        thread q = *queue;
        while (q->next)
 484:	fc 01       	movw	r30, r24
 486:	84 81       	ldd	r24, Z+4	; 0x04
 488:	95 81       	ldd	r25, Z+5	; 0x05
 48a:	00 97       	sbiw	r24, 0x00	; 0
 48c:	d9 f7       	brne	.-10     	; 0x484 <__DATA_REGION_LENGTH__+0x84>
            q = q->next;
        q->next = p;
 48e:	b5 83       	std	Z+5, r27	; 0x05
 490:	a4 83       	std	Z+4, r26	; 0x04
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 492:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <readyQ>
 496:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <readyQ+0x1>
    if (*queue) {
 49a:	00 97       	sbiw	r24, 0x00	; 0
 49c:	a1 f0       	breq	.+40     	; 0x4c6 <__DATA_REGION_LENGTH__+0xc6>
        *queue = (*queue)->next;
 49e:	fc 01       	movw	r30, r24
 4a0:	24 81       	ldd	r18, Z+4	; 0x04
 4a2:	35 81       	ldd	r19, Z+5	; 0x05
 4a4:	30 93 21 01 	sts	0x0121, r19	; 0x800121 <readyQ+0x1>
 4a8:	20 93 20 01 	sts	0x0120, r18	; 0x800120 <readyQ>
    if (setjmp(newp->context) == 1) {
        ENABLE();
        current->function(current->arg);
        DISABLE();
        enqueue(current, &freeQ);
        dispatch(dequeue(&readyQ));
 4ac:	0e 94 76 01 	call	0x2ec	; 0x2ec <dispatch>
 4b0:	9a cf       	rjmp	.-204    	; 0x3e6 <spawn+0xba>
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
    if (*queue == NULL) {
        *queue = p;
 4b2:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <freeQ+0x1>
 4b6:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <freeQ>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 4ba:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <readyQ>
 4be:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <readyQ+0x1>
    if (*queue) {
 4c2:	00 97       	sbiw	r24, 0x00	; 0
 4c4:	61 f7       	brne	.-40     	; 0x49e <__DATA_REGION_LENGTH__+0x9e>
 4c6:	ff cf       	rjmp	.-2      	; 0x4c6 <__DATA_REGION_LENGTH__+0xc6>

000004c8 <yield>:
	yield();
}

// Change thread
void yield(void) {
	DISABLE();
 4c8:	f8 94       	cli
	enqueue(current, &readyQ);
 4ca:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 4ce:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
	OCR1A = 8000000/(1024 * 20);
	TCNT1 = 0x0;
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 4d2:	fc 01       	movw	r30, r24
 4d4:	15 82       	std	Z+5, r1	; 0x05
 4d6:	14 82       	std	Z+4, r1	; 0x04
    if (*queue == NULL) {
 4d8:	a0 91 20 01 	lds	r26, 0x0120	; 0x800120 <readyQ>
 4dc:	b0 91 21 01 	lds	r27, 0x0121	; 0x800121 <readyQ+0x1>
 4e0:	10 97       	sbiw	r26, 0x00	; 0
 4e2:	b9 f0       	breq	.+46     	; 0x512 <__stack+0x13>
 4e4:	fd 01       	movw	r30, r26
 4e6:	01 c0       	rjmp	.+2      	; 0x4ea <yield+0x22>
        *queue = p;
    } else {
        thread q = *queue;
        while (q->next)
 4e8:	f9 01       	movw	r30, r18
 4ea:	24 81       	ldd	r18, Z+4	; 0x04
 4ec:	35 81       	ldd	r19, Z+5	; 0x05
 4ee:	21 15       	cp	r18, r1
 4f0:	31 05       	cpc	r19, r1
 4f2:	d1 f7       	brne	.-12     	; 0x4e8 <yield+0x20>
            q = q->next;
        q->next = p;
 4f4:	95 83       	std	Z+5, r25	; 0x05
 4f6:	84 83       	std	Z+4, r24	; 0x04
 4f8:	14 96       	adiw	r26, 0x04	; 4
 4fa:	2d 91       	ld	r18, X+
 4fc:	3c 91       	ld	r19, X
 4fe:	15 97       	sbiw	r26, 0x05	; 5
 500:	cd 01       	movw	r24, r26
}

static thread dequeue(thread *queue) {
    thread p = *queue;
    if (*queue) {
        *queue = (*queue)->next;
 502:	30 93 21 01 	sts	0x0121, r19	; 0x800121 <readyQ+0x1>
 506:	20 93 20 01 	sts	0x0120, r18	; 0x800120 <readyQ>

// Change thread
void yield(void) {
	DISABLE();
	enqueue(current, &readyQ);
	dispatch(dequeue(&readyQ));
 50a:	0e 94 76 01 	call	0x2ec	; 0x2ec <dispatch>
	ENABLE();
 50e:	78 94       	sei
}
 510:	08 95       	ret
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
    if (*queue) {
 512:	00 97       	sbiw	r24, 0x00	; 0
 514:	09 f4       	brne	.+2      	; 0x518 <__stack+0x19>
 516:	ff cf       	rjmp	.-2      	; 0x516 <__stack+0x17>
 518:	20 e0       	ldi	r18, 0x00	; 0
 51a:	30 e0       	ldi	r19, 0x00	; 0
 51c:	f2 cf       	rjmp	.-28     	; 0x502 <__stack+0x3>

0000051e <__vector_3>:
    enqueue(newp, &readyQ);
    ENABLE();
}

// Interrupt handler for button
ISR(PCINT1_vect) {
 51e:	1f 92       	push	r1
 520:	0f 92       	push	r0
 522:	0f b6       	in	r0, 0x3f	; 63
 524:	0f 92       	push	r0
 526:	11 24       	eor	r1, r1
 528:	2f 93       	push	r18
 52a:	3f 93       	push	r19
 52c:	4f 93       	push	r20
 52e:	5f 93       	push	r21
 530:	6f 93       	push	r22
 532:	7f 93       	push	r23
 534:	8f 93       	push	r24
 536:	9f 93       	push	r25
 538:	af 93       	push	r26
 53a:	bf 93       	push	r27
 53c:	ef 93       	push	r30
 53e:	ff 93       	push	r31
	if (PINB >> 7 == 0) {
 540:	1f 9b       	sbis	0x03, 7	; 3
		yield();
 542:	0e 94 64 02 	call	0x4c8	; 0x4c8 <yield>
	}
}
 546:	ff 91       	pop	r31
 548:	ef 91       	pop	r30
 54a:	bf 91       	pop	r27
 54c:	af 91       	pop	r26
 54e:	9f 91       	pop	r25
 550:	8f 91       	pop	r24
 552:	7f 91       	pop	r23
 554:	6f 91       	pop	r22
 556:	5f 91       	pop	r21
 558:	4f 91       	pop	r20
 55a:	3f 91       	pop	r19
 55c:	2f 91       	pop	r18
 55e:	0f 90       	pop	r0
 560:	0f be       	out	0x3f, r0	; 63
 562:	0f 90       	pop	r0
 564:	1f 90       	pop	r1
 566:	18 95       	reti

00000568 <__vector_7>:

// Should be interrupt handler for sequential interrupts
ISR(TIMER1_COMPA_vect) {
 568:	1f 92       	push	r1
 56a:	0f 92       	push	r0
 56c:	0f b6       	in	r0, 0x3f	; 63
 56e:	0f 92       	push	r0
 570:	11 24       	eor	r1, r1
 572:	2f 93       	push	r18
 574:	3f 93       	push	r19
 576:	4f 93       	push	r20
 578:	5f 93       	push	r21
 57a:	6f 93       	push	r22
 57c:	7f 93       	push	r23
 57e:	8f 93       	push	r24
 580:	9f 93       	push	r25
 582:	af 93       	push	r26
 584:	bf 93       	push	r27
 586:	ef 93       	push	r30
 588:	ff 93       	push	r31
	Timer++;
 58a:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <Timer>
 58e:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <Timer+0x1>
 592:	01 96       	adiw	r24, 0x01	; 1
 594:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <Timer+0x1>
 598:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <Timer>
	yield();
 59c:	0e 94 64 02 	call	0x4c8	; 0x4c8 <yield>
}
 5a0:	ff 91       	pop	r31
 5a2:	ef 91       	pop	r30
 5a4:	bf 91       	pop	r27
 5a6:	af 91       	pop	r26
 5a8:	9f 91       	pop	r25
 5aa:	8f 91       	pop	r24
 5ac:	7f 91       	pop	r23
 5ae:	6f 91       	pop	r22
 5b0:	5f 91       	pop	r21
 5b2:	4f 91       	pop	r20
 5b4:	3f 91       	pop	r19
 5b6:	2f 91       	pop	r18
 5b8:	0f 90       	pop	r0
 5ba:	0f be       	out	0x3f, r0	; 63
 5bc:	0f 90       	pop	r0
 5be:	1f 90       	pop	r1
 5c0:	18 95       	reti

000005c2 <lock>:
	enqueue(current, &readyQ);
	dispatch(dequeue(&readyQ));
	ENABLE();
}

void lock(mutex *m) {
 5c2:	cf 93       	push	r28
 5c4:	df 93       	push	r29
 5c6:	dc 01       	movw	r26, r24
	DISABLE();
 5c8:	f8 94       	cli
	
	// If it's unlocked, lock it
	if(m->locked == 0){
 5ca:	8d 91       	ld	r24, X+
 5cc:	9c 91       	ld	r25, X
 5ce:	11 97       	sbiw	r26, 0x01	; 1
 5d0:	89 2b       	or	r24, r25
 5d2:	41 f1       	breq	.+80     	; 0x624 <lock+0x62>
	}
	
	// Else - put the current thread in the back of the line of the waitQ
	// and run the first thread in the readyQ
	else{
		enqueue(current, &(m->waitQ));
 5d4:	c0 91 00 01 	lds	r28, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 5d8:	d0 91 01 01 	lds	r29, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
	OCR1A = 8000000/(1024 * 20);
	TCNT1 = 0x0;
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 5dc:	1d 82       	std	Y+5, r1	; 0x05
 5de:	1c 82       	std	Y+4, r1	; 0x04
    if (*queue == NULL) {
 5e0:	12 96       	adiw	r26, 0x02	; 2
 5e2:	ed 91       	ld	r30, X+
 5e4:	fc 91       	ld	r31, X
 5e6:	13 97       	sbiw	r26, 0x03	; 3
 5e8:	30 97       	sbiw	r30, 0x00	; 0
 5ea:	11 f4       	brne	.+4      	; 0x5f0 <lock+0x2e>
 5ec:	23 c0       	rjmp	.+70     	; 0x634 <lock+0x72>
        *queue = p;
    } else {
        thread q = *queue;
        while (q->next)
 5ee:	fc 01       	movw	r30, r24
 5f0:	84 81       	ldd	r24, Z+4	; 0x04
 5f2:	95 81       	ldd	r25, Z+5	; 0x05
 5f4:	00 97       	sbiw	r24, 0x00	; 0
 5f6:	d9 f7       	brne	.-10     	; 0x5ee <lock+0x2c>
            q = q->next;
        q->next = p;
 5f8:	d5 83       	std	Z+5, r29	; 0x05
 5fa:	c4 83       	std	Z+4, r28	; 0x04
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 5fc:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <readyQ>
 600:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <readyQ+0x1>
    if (*queue) {
 604:	00 97       	sbiw	r24, 0x00	; 0
 606:	69 f0       	breq	.+26     	; 0x622 <lock+0x60>
        *queue = (*queue)->next;
 608:	fc 01       	movw	r30, r24
 60a:	24 81       	ldd	r18, Z+4	; 0x04
 60c:	35 81       	ldd	r19, Z+5	; 0x05
 60e:	30 93 21 01 	sts	0x0121, r19	; 0x800121 <readyQ+0x1>
 612:	20 93 20 01 	sts	0x0120, r18	; 0x800120 <readyQ>
	
	// Else - put the current thread in the back of the line of the waitQ
	// and run the first thread in the readyQ
	else{
		enqueue(current, &(m->waitQ));
		dispatch(dequeue(&readyQ));
 616:	0e 94 76 01 	call	0x2ec	; 0x2ec <dispatch>
	}
	ENABLE();
 61a:	78 94       	sei
}
 61c:	df 91       	pop	r29
 61e:	cf 91       	pop	r28
 620:	08 95       	ret
 622:	ff cf       	rjmp	.-2      	; 0x622 <lock+0x60>
void lock(mutex *m) {
	DISABLE();
	
	// If it's unlocked, lock it
	if(m->locked == 0){
		m->locked = 1;
 624:	81 e0       	ldi	r24, 0x01	; 1
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	8d 93       	st	X+, r24
 62a:	9c 93       	st	X, r25
	// and run the first thread in the readyQ
	else{
		enqueue(current, &(m->waitQ));
		dispatch(dequeue(&readyQ));
	}
	ENABLE();
 62c:	78 94       	sei
}
 62e:	df 91       	pop	r29
 630:	cf 91       	pop	r28
 632:	08 95       	ret
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
    if (*queue == NULL) {
        *queue = p;
 634:	13 96       	adiw	r26, 0x03	; 3
 636:	dc 93       	st	X, r29
 638:	ce 93       	st	-X, r28
 63a:	12 97       	sbiw	r26, 0x02	; 2
 63c:	df cf       	rjmp	.-66     	; 0x5fc <lock+0x3a>

0000063e <unlock>:
		dispatch(dequeue(&readyQ));
	}
	ENABLE();
}

void unlock(mutex *m) {
 63e:	cf 93       	push	r28
 640:	df 93       	push	r29
 642:	fc 01       	movw	r30, r24
	
	DISABLE();
 644:	f8 94       	cli
	
	// If threads are available in the waitQ, put the current thread in the last position of the readyQ
	// and run the first thread in the waitQ
	if(m->waitQ != NULL){
 646:	82 81       	ldd	r24, Z+2	; 0x02
 648:	93 81       	ldd	r25, Z+3	; 0x03
 64a:	89 2b       	or	r24, r25
 64c:	51 f1       	breq	.+84     	; 0x6a2 <unlock+0x64>
		enqueue(current, &readyQ);
 64e:	c0 91 00 01 	lds	r28, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 652:	d0 91 01 01 	lds	r29, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
	OCR1A = 8000000/(1024 * 20);
	TCNT1 = 0x0;
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 656:	1d 82       	std	Y+5, r1	; 0x05
 658:	1c 82       	std	Y+4, r1	; 0x04
    if (*queue == NULL) {
 65a:	a0 91 20 01 	lds	r26, 0x0120	; 0x800120 <readyQ>
 65e:	b0 91 21 01 	lds	r27, 0x0121	; 0x800121 <readyQ+0x1>
 662:	10 97       	sbiw	r26, 0x00	; 0
 664:	11 f4       	brne	.+4      	; 0x66a <unlock+0x2c>
 666:	23 c0       	rjmp	.+70     	; 0x6ae <unlock+0x70>
        *queue = p;
    } else {
        thread q = *queue;
        while (q->next)
 668:	dc 01       	movw	r26, r24
 66a:	14 96       	adiw	r26, 0x04	; 4
 66c:	8d 91       	ld	r24, X+
 66e:	9c 91       	ld	r25, X
 670:	15 97       	sbiw	r26, 0x05	; 5
 672:	00 97       	sbiw	r24, 0x00	; 0
 674:	c9 f7       	brne	.-14     	; 0x668 <unlock+0x2a>
            q = q->next;
        q->next = p;
 676:	15 96       	adiw	r26, 0x05	; 5
 678:	dc 93       	st	X, r29
 67a:	ce 93       	st	-X, r28
 67c:	14 97       	sbiw	r26, 0x04	; 4
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 67e:	82 81       	ldd	r24, Z+2	; 0x02
 680:	93 81       	ldd	r25, Z+3	; 0x03
    if (*queue) {
 682:	00 97       	sbiw	r24, 0x00	; 0
 684:	69 f0       	breq	.+26     	; 0x6a0 <unlock+0x62>
        *queue = (*queue)->next;
 686:	dc 01       	movw	r26, r24
 688:	14 96       	adiw	r26, 0x04	; 4
 68a:	2d 91       	ld	r18, X+
 68c:	3c 91       	ld	r19, X
 68e:	15 97       	sbiw	r26, 0x05	; 5
 690:	33 83       	std	Z+3, r19	; 0x03
 692:	22 83       	std	Z+2, r18	; 0x02
	
	// If threads are available in the waitQ, put the current thread in the last position of the readyQ
	// and run the first thread in the waitQ
	if(m->waitQ != NULL){
		enqueue(current, &readyQ);
		dispatch(dequeue(&(m->waitQ)));
 694:	0e 94 76 01 	call	0x2ec	; 0x2ec <dispatch>
	// Else - unlock (put the locked flag to 0)
	else{
		m->locked = 0;
	}
	
	ENABLE();
 698:	78 94       	sei
}
 69a:	df 91       	pop	r29
 69c:	cf 91       	pop	r28
 69e:	08 95       	ret
 6a0:	ff cf       	rjmp	.-2      	; 0x6a0 <unlock+0x62>
		dispatch(dequeue(&(m->waitQ)));
	}
	
	// Else - unlock (put the locked flag to 0)
	else{
		m->locked = 0;
 6a2:	11 82       	std	Z+1, r1	; 0x01
 6a4:	10 82       	st	Z, r1
	}
	
	ENABLE();
 6a6:	78 94       	sei
}
 6a8:	df 91       	pop	r29
 6aa:	cf 91       	pop	r28
 6ac:	08 95       	ret
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
    if (*queue == NULL) {
        *queue = p;
 6ae:	d0 93 21 01 	sts	0x0121, r29	; 0x800121 <readyQ+0x1>
 6b2:	c0 93 20 01 	sts	0x0120, r28	; 0x800120 <readyQ>
 6b6:	e3 cf       	rjmp	.-58     	; 0x67e <unlock+0x40>

000006b8 <whatisclock>:
	
	ENABLE();
}
int whatisclock(){
	return(Timer);
}
 6b8:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <Timer>
 6bc:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <Timer+0x1>
 6c0:	08 95       	ret

000006c2 <resetclock>:
void resetclock(){
	Timer = 0;
 6c2:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <Timer+0x1>
 6c6:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <Timer>
 6ca:	08 95       	ret

000006cc <__divmodsi4>:
 6cc:	05 2e       	mov	r0, r21
 6ce:	97 fb       	bst	r25, 7
 6d0:	1e f4       	brtc	.+6      	; 0x6d8 <__divmodsi4+0xc>
 6d2:	00 94       	com	r0
 6d4:	0e 94 7d 03 	call	0x6fa	; 0x6fa <__negsi2>
 6d8:	57 fd       	sbrc	r21, 7
 6da:	07 d0       	rcall	.+14     	; 0x6ea <__divmodsi4_neg2>
 6dc:	0e 94 85 03 	call	0x70a	; 0x70a <__udivmodsi4>
 6e0:	07 fc       	sbrc	r0, 7
 6e2:	03 d0       	rcall	.+6      	; 0x6ea <__divmodsi4_neg2>
 6e4:	4e f4       	brtc	.+18     	; 0x6f8 <__divmodsi4_exit>
 6e6:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__negsi2>

000006ea <__divmodsi4_neg2>:
 6ea:	50 95       	com	r21
 6ec:	40 95       	com	r20
 6ee:	30 95       	com	r19
 6f0:	21 95       	neg	r18
 6f2:	3f 4f       	sbci	r19, 0xFF	; 255
 6f4:	4f 4f       	sbci	r20, 0xFF	; 255
 6f6:	5f 4f       	sbci	r21, 0xFF	; 255

000006f8 <__divmodsi4_exit>:
 6f8:	08 95       	ret

000006fa <__negsi2>:
 6fa:	90 95       	com	r25
 6fc:	80 95       	com	r24
 6fe:	70 95       	com	r23
 700:	61 95       	neg	r22
 702:	7f 4f       	sbci	r23, 0xFF	; 255
 704:	8f 4f       	sbci	r24, 0xFF	; 255
 706:	9f 4f       	sbci	r25, 0xFF	; 255
 708:	08 95       	ret

0000070a <__udivmodsi4>:
 70a:	a1 e2       	ldi	r26, 0x21	; 33
 70c:	1a 2e       	mov	r1, r26
 70e:	aa 1b       	sub	r26, r26
 710:	bb 1b       	sub	r27, r27
 712:	fd 01       	movw	r30, r26
 714:	0d c0       	rjmp	.+26     	; 0x730 <__udivmodsi4_ep>

00000716 <__udivmodsi4_loop>:
 716:	aa 1f       	adc	r26, r26
 718:	bb 1f       	adc	r27, r27
 71a:	ee 1f       	adc	r30, r30
 71c:	ff 1f       	adc	r31, r31
 71e:	a2 17       	cp	r26, r18
 720:	b3 07       	cpc	r27, r19
 722:	e4 07       	cpc	r30, r20
 724:	f5 07       	cpc	r31, r21
 726:	20 f0       	brcs	.+8      	; 0x730 <__udivmodsi4_ep>
 728:	a2 1b       	sub	r26, r18
 72a:	b3 0b       	sbc	r27, r19
 72c:	e4 0b       	sbc	r30, r20
 72e:	f5 0b       	sbc	r31, r21

00000730 <__udivmodsi4_ep>:
 730:	66 1f       	adc	r22, r22
 732:	77 1f       	adc	r23, r23
 734:	88 1f       	adc	r24, r24
 736:	99 1f       	adc	r25, r25
 738:	1a 94       	dec	r1
 73a:	69 f7       	brne	.-38     	; 0x716 <__udivmodsi4_loop>
 73c:	60 95       	com	r22
 73e:	70 95       	com	r23
 740:	80 95       	com	r24
 742:	90 95       	com	r25
 744:	9b 01       	movw	r18, r22
 746:	ac 01       	movw	r20, r24
 748:	bd 01       	movw	r22, r26
 74a:	cf 01       	movw	r24, r30
 74c:	08 95       	ret

0000074e <setjmp>:
 74e:	dc 01       	movw	r26, r24
 750:	2d 92       	st	X+, r2
 752:	3d 92       	st	X+, r3
 754:	4d 92       	st	X+, r4
 756:	5d 92       	st	X+, r5
 758:	6d 92       	st	X+, r6
 75a:	7d 92       	st	X+, r7
 75c:	8d 92       	st	X+, r8
 75e:	9d 92       	st	X+, r9
 760:	ad 92       	st	X+, r10
 762:	bd 92       	st	X+, r11
 764:	cd 92       	st	X+, r12
 766:	dd 92       	st	X+, r13
 768:	ed 92       	st	X+, r14
 76a:	fd 92       	st	X+, r15
 76c:	0d 93       	st	X+, r16
 76e:	1d 93       	st	X+, r17
 770:	cd 93       	st	X+, r28
 772:	dd 93       	st	X+, r29
 774:	ff 91       	pop	r31
 776:	ef 91       	pop	r30
 778:	8d b7       	in	r24, 0x3d	; 61
 77a:	8d 93       	st	X+, r24
 77c:	8e b7       	in	r24, 0x3e	; 62
 77e:	8d 93       	st	X+, r24
 780:	8f b7       	in	r24, 0x3f	; 63
 782:	8d 93       	st	X+, r24
 784:	ed 93       	st	X+, r30
 786:	fd 93       	st	X+, r31
 788:	88 27       	eor	r24, r24
 78a:	99 27       	eor	r25, r25
 78c:	09 94       	ijmp

0000078e <longjmp>:
 78e:	dc 01       	movw	r26, r24
 790:	cb 01       	movw	r24, r22
 792:	81 30       	cpi	r24, 0x01	; 1
 794:	91 05       	cpc	r25, r1
 796:	81 1d       	adc	r24, r1
 798:	2d 90       	ld	r2, X+
 79a:	3d 90       	ld	r3, X+
 79c:	4d 90       	ld	r4, X+
 79e:	5d 90       	ld	r5, X+
 7a0:	6d 90       	ld	r6, X+
 7a2:	7d 90       	ld	r7, X+
 7a4:	8d 90       	ld	r8, X+
 7a6:	9d 90       	ld	r9, X+
 7a8:	ad 90       	ld	r10, X+
 7aa:	bd 90       	ld	r11, X+
 7ac:	cd 90       	ld	r12, X+
 7ae:	dd 90       	ld	r13, X+
 7b0:	ed 90       	ld	r14, X+
 7b2:	fd 90       	ld	r15, X+
 7b4:	0d 91       	ld	r16, X+
 7b6:	1d 91       	ld	r17, X+
 7b8:	cd 91       	ld	r28, X+
 7ba:	dd 91       	ld	r29, X+
 7bc:	ed 91       	ld	r30, X+
 7be:	fd 91       	ld	r31, X+
 7c0:	0d 90       	ld	r0, X+
 7c2:	f8 94       	cli
 7c4:	fe bf       	out	0x3e, r31	; 62
 7c6:	0f be       	out	0x3f, r0	; 63
 7c8:	ed bf       	out	0x3d, r30	; 61
 7ca:	ed 91       	ld	r30, X+
 7cc:	fd 91       	ld	r31, X+
 7ce:	09 94       	ijmp

000007d0 <_exit>:
 7d0:	f8 94       	cli

000007d2 <__stop_program>:
 7d2:	ff cf       	rjmp	.-2      	; 0x7d2 <__stop_program>
