
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  000007be  00000852  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000231  00800118  00800118  0000086a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000086a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000089c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  000008dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000137e  00000000  00000000  00000984  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b80  00000000  00000000  00001d02  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000807  00000000  00000000  00002882  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000024c  00000000  00000000  0000308c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000594  00000000  00000000  000032d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bd2  00000000  00000000  0000386c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000178  00000000  00000000  0000443e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 b9 01 	jmp	0x372	; 0x372 <__vector_3>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 df 01 	jmp	0x3be	; 0x3be <__vector_7>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	ee eb       	ldi	r30, 0xBE	; 190
  70:	f7 e0       	ldi	r31, 0x07	; 7
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	a8 31       	cpi	r26, 0x18	; 24
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
  7e:	23 e0       	ldi	r18, 0x03	; 3
  80:	a8 e1       	ldi	r26, 0x18	; 24
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	a9 34       	cpi	r26, 0x49	; 73
  8a:	b2 07       	cpc	r27, r18
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 7e 01 	call	0x2fc	; 0x2fc <main>
  92:	0c 94 dd 03 	jmp	0x7ba	; 0x7ba <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <blink>:
	}
}
bool is_prime(long i){
	for(int n = 2; n < i; n++){
		if(i % n == 0){
			return(false);
  9a:	c0 e0       	ldi	r28, 0x00	; 0
  9c:	d0 e0       	ldi	r29, 0x00	; 0
  9e:	11 e0       	ldi	r17, 0x01	; 1
  a0:	8c e1       	ldi	r24, 0x1C	; 28
  a2:	91 e0       	ldi	r25, 0x01	; 1
  a4:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <lock>
  a8:	cd 2b       	or	r28, r29
  aa:	51 f4       	brne	.+20     	; 0xc0 <blink+0x26>
  ac:	10 93 ef 00 	sts	0x00EF, r17	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7fc0ef>
  b0:	c1 e0       	ldi	r28, 0x01	; 1
  b2:	d0 e0       	ldi	r29, 0x00	; 0
  b4:	8c e1       	ldi	r24, 0x1C	; 28
  b6:	91 e0       	ldi	r25, 0x01	; 1
  b8:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <lock>
  bc:	cd 2b       	or	r28, r29
  be:	b1 f3       	breq	.-20     	; 0xac <blink+0x12>
  c0:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7fc0ef>
  c4:	c0 e0       	ldi	r28, 0x00	; 0
  c6:	d0 e0       	ldi	r29, 0x00	; 0
  c8:	eb cf       	rjmp	.-42     	; 0xa0 <blink+0x6>

000000ca <writeChar>:
  ca:	cf 93       	push	r28
  cc:	df 93       	push	r29
  ce:	cd b7       	in	r28, 0x3d	; 61
  d0:	de b7       	in	r29, 0x3e	; 62
  d2:	64 97       	sbiw	r28, 0x14	; 20
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	f8 94       	cli
  d8:	de bf       	out	0x3e, r29	; 62
  da:	0f be       	out	0x3f, r0	; 63
  dc:	cd bf       	out	0x3d, r28	; 61
  de:	94 e1       	ldi	r25, 0x14	; 20
  e0:	e4 e0       	ldi	r30, 0x04	; 4
  e2:	f1 e0       	ldi	r31, 0x01	; 1
  e4:	de 01       	movw	r26, r28
  e6:	11 96       	adiw	r26, 0x01	; 1
  e8:	01 90       	ld	r0, Z+
  ea:	0d 92       	st	X+, r0
  ec:	9a 95       	dec	r25
  ee:	e1 f7       	brne	.-8      	; 0xe8 <writeChar+0x1e>
  f0:	66 30       	cpi	r22, 0x06	; 6
  f2:	71 05       	cpc	r23, r1
  f4:	50 f5       	brcc	.+84     	; 0x14a <writeChar+0x80>
  f6:	fb 01       	movw	r30, r22
  f8:	f5 95       	asr	r31
  fa:	e7 95       	ror	r30
  fc:	e4 51       	subi	r30, 0x14	; 20
  fe:	ff 4f       	sbci	r31, 0xFF	; 255
 100:	a8 2f       	mov	r26, r24
 102:	b0 e0       	ldi	r27, 0x00	; 0
 104:	d0 97       	sbiw	r26, 0x30	; 48
 106:	aa 0f       	add	r26, r26
 108:	bb 1f       	adc	r27, r27
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	8c 0f       	add	r24, r28
 110:	9d 1f       	adc	r25, r29
 112:	a8 0f       	add	r26, r24
 114:	b9 1f       	adc	r27, r25
 116:	4d 91       	ld	r20, X+
 118:	5c 91       	ld	r21, X
 11a:	61 70       	andi	r22, 0x01	; 1
 11c:	77 27       	eor	r23, r23
 11e:	df 01       	movw	r26, r30
 120:	54 96       	adiw	r26, 0x14	; 20
 122:	ca 01       	movw	r24, r20
 124:	8f 70       	andi	r24, 0x0F	; 15
 126:	99 27       	eor	r25, r25
 128:	61 30       	cpi	r22, 0x01	; 1
 12a:	71 05       	cpc	r23, r1
 12c:	b9 f0       	breq	.+46     	; 0x15c <writeChar+0x92>
 12e:	20 81       	ld	r18, Z
 130:	20 7f       	andi	r18, 0xF0	; 240
 132:	82 2b       	or	r24, r18
 134:	80 83       	st	Z, r24
 136:	35 96       	adiw	r30, 0x05	; 5
 138:	52 95       	swap	r21
 13a:	42 95       	swap	r20
 13c:	4f 70       	andi	r20, 0x0F	; 15
 13e:	45 27       	eor	r20, r21
 140:	5f 70       	andi	r21, 0x0F	; 15
 142:	45 27       	eor	r20, r21
 144:	ea 17       	cp	r30, r26
 146:	fb 07       	cpc	r31, r27
 148:	61 f7       	brne	.-40     	; 0x122 <writeChar+0x58>
 14a:	64 96       	adiw	r28, 0x14	; 20
 14c:	0f b6       	in	r0, 0x3f	; 63
 14e:	f8 94       	cli
 150:	de bf       	out	0x3e, r29	; 62
 152:	0f be       	out	0x3f, r0	; 63
 154:	cd bf       	out	0x3d, r28	; 61
 156:	df 91       	pop	r29
 158:	cf 91       	pop	r28
 15a:	08 95       	ret
 15c:	82 95       	swap	r24
 15e:	92 95       	swap	r25
 160:	90 7f       	andi	r25, 0xF0	; 240
 162:	98 27       	eor	r25, r24
 164:	80 7f       	andi	r24, 0xF0	; 240
 166:	98 27       	eor	r25, r24
 168:	20 81       	ld	r18, Z
 16a:	2f 70       	andi	r18, 0x0F	; 15
 16c:	e2 cf       	rjmp	.-60     	; 0x132 <writeChar+0x68>

0000016e <printAt>:
 16e:	8f 92       	push	r8
 170:	9f 92       	push	r9
 172:	af 92       	push	r10
 174:	bf 92       	push	r11
 176:	cf 92       	push	r12
 178:	df 92       	push	r13
 17a:	ef 92       	push	r14
 17c:	ff 92       	push	r15
 17e:	cf 93       	push	r28
 180:	df 93       	push	r29
 182:	4b 01       	movw	r8, r22
 184:	5c 01       	movw	r10, r24
 186:	ea 01       	movw	r28, r20
 188:	80 e2       	ldi	r24, 0x20	; 32
 18a:	91 e0       	ldi	r25, 0x01	; 1
 18c:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <lock>
 190:	c5 01       	movw	r24, r10
 192:	b4 01       	movw	r22, r8
 194:	24 e6       	ldi	r18, 0x64	; 100
 196:	30 e0       	ldi	r19, 0x00	; 0
 198:	40 e0       	ldi	r20, 0x00	; 0
 19a:	50 e0       	ldi	r21, 0x00	; 0
 19c:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <__divmodsi4>
 1a0:	2a e0       	ldi	r18, 0x0A	; 10
 1a2:	c2 2e       	mov	r12, r18
 1a4:	d1 2c       	mov	r13, r1
 1a6:	e1 2c       	mov	r14, r1
 1a8:	f1 2c       	mov	r15, r1
 1aa:	a7 01       	movw	r20, r14
 1ac:	96 01       	movw	r18, r12
 1ae:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <__divmodsi4>
 1b2:	be 01       	movw	r22, r28
 1b4:	80 e3       	ldi	r24, 0x30	; 48
 1b6:	82 0f       	add	r24, r18
 1b8:	0e 94 65 00 	call	0xca	; 0xca <writeChar>
 1bc:	21 96       	adiw	r28, 0x01	; 1
 1be:	c5 01       	movw	r24, r10
 1c0:	b4 01       	movw	r22, r8
 1c2:	a7 01       	movw	r20, r14
 1c4:	96 01       	movw	r18, r12
 1c6:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <__divmodsi4>
 1ca:	86 2f       	mov	r24, r22
 1cc:	be 01       	movw	r22, r28
 1ce:	80 5d       	subi	r24, 0xD0	; 208
 1d0:	0e 94 65 00 	call	0xca	; 0xca <writeChar>
 1d4:	80 e2       	ldi	r24, 0x20	; 32
 1d6:	91 e0       	ldi	r25, 0x01	; 1
 1d8:	df 91       	pop	r29
 1da:	cf 91       	pop	r28
 1dc:	ff 90       	pop	r15
 1de:	ef 90       	pop	r14
 1e0:	df 90       	pop	r13
 1e2:	cf 90       	pop	r12
 1e4:	bf 90       	pop	r11
 1e6:	af 90       	pop	r10
 1e8:	9f 90       	pop	r9
 1ea:	8f 90       	pop	r8
 1ec:	0c 94 1e 03 	jmp	0x63c	; 0x63c <unlock>

000001f0 <button>:
 1f0:	80 e8       	ldi	r24, 0x80	; 128
 1f2:	85 b9       	out	0x05, r24	; 5
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7fc0f4>
 1fa:	10 92 f9 00 	sts	0x00F9, r1	; 0x8000f9 <__TEXT_REGION_LENGTH__+0x7fc0f9>
 1fe:	44 e0       	ldi	r20, 0x04	; 4
 200:	50 e0       	ldi	r21, 0x00	; 0
 202:	60 e0       	ldi	r22, 0x00	; 0
 204:	70 e0       	ldi	r23, 0x00	; 0
 206:	cb 01       	movw	r24, r22
 208:	0e 94 b7 00 	call	0x16e	; 0x16e <printAt>
 20c:	c0 e0       	ldi	r28, 0x00	; 0
 20e:	00 e0       	ldi	r16, 0x00	; 0
 210:	10 e0       	ldi	r17, 0x00	; 0
 212:	c1 2c       	mov	r12, r1
 214:	d1 2c       	mov	r13, r1
 216:	76 01       	movw	r14, r12
 218:	88 e1       	ldi	r24, 0x18	; 24
 21a:	91 e0       	ldi	r25, 0x01	; 1
 21c:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <lock>
 220:	44 e0       	ldi	r20, 0x04	; 4
 222:	50 e0       	ldi	r21, 0x00	; 0
 224:	c7 01       	movw	r24, r14
 226:	b6 01       	movw	r22, r12
 228:	0e 94 b7 00 	call	0x16e	; 0x16e <printAt>
 22c:	1f 99       	sbic	0x03, 7	; 3
 22e:	12 c0       	rjmp	.+36     	; 0x254 <__EEPROM_REGION_LENGTH__+0x54>
 230:	c1 11       	cpse	r28, r1
 232:	0e c0       	rjmp	.+28     	; 0x250 <__EEPROM_REGION_LENGTH__+0x50>
 234:	80 91 f9 00 	lds	r24, 0x00F9	; 0x8000f9 <__TEXT_REGION_LENGTH__+0x7fc0f9>
 238:	81 30       	cpi	r24, 0x01	; 1
 23a:	09 f1       	breq	.+66     	; 0x27e <__EEPROM_REGION_LENGTH__+0x7e>
 23c:	1f 99       	sbic	0x03, 7	; 3
 23e:	04 c0       	rjmp	.+8      	; 0x248 <__EEPROM_REGION_LENGTH__+0x48>
 240:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7fc0f4>
 244:	81 30       	cpi	r24, 0x01	; 1
 246:	71 f0       	breq	.+28     	; 0x264 <__EEPROM_REGION_LENGTH__+0x64>
 248:	1f 9b       	sbis	0x03, 7	; 3
 24a:	e6 cf       	rjmp	.-52     	; 0x218 <__EEPROM_REGION_LENGTH__+0x18>
 24c:	c0 e0       	ldi	r28, 0x00	; 0
 24e:	e4 cf       	rjmp	.-56     	; 0x218 <__EEPROM_REGION_LENGTH__+0x18>
 250:	83 b1       	in	r24, 0x03	; 3
 252:	fa cf       	rjmp	.-12     	; 0x248 <__EEPROM_REGION_LENGTH__+0x48>
 254:	1f 99       	sbic	0x03, 7	; 3
 256:	f8 cf       	rjmp	.-16     	; 0x248 <__EEPROM_REGION_LENGTH__+0x48>
 258:	c1 11       	cpse	r28, r1
 25a:	f6 cf       	rjmp	.-20     	; 0x248 <__EEPROM_REGION_LENGTH__+0x48>
 25c:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7fc0f4>
 260:	81 30       	cpi	r24, 0x01	; 1
 262:	91 f7       	brne	.-28     	; 0x248 <__EEPROM_REGION_LENGTH__+0x48>
 264:	0f 5f       	subi	r16, 0xFF	; 255
 266:	1f 4f       	sbci	r17, 0xFF	; 255
 268:	80 93 f9 00 	sts	0x00F9, r24	; 0x8000f9 <__TEXT_REGION_LENGTH__+0x7fc0f9>
 26c:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7fc0f4>
 270:	c1 e0       	ldi	r28, 0x01	; 1
 272:	68 01       	movw	r12, r16
 274:	01 2e       	mov	r0, r17
 276:	00 0c       	add	r0, r0
 278:	ee 08       	sbc	r14, r14
 27a:	ff 08       	sbc	r15, r15
 27c:	cd cf       	rjmp	.-102    	; 0x218 <__EEPROM_REGION_LENGTH__+0x18>
 27e:	0f 5f       	subi	r16, 0xFF	; 255
 280:	1f 4f       	sbci	r17, 0xFF	; 255
 282:	10 92 f9 00 	sts	0x00F9, r1	; 0x8000f9 <__TEXT_REGION_LENGTH__+0x7fc0f9>
 286:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7fc0f4>
 28a:	c1 e0       	ldi	r28, 0x01	; 1
 28c:	68 01       	movw	r12, r16
 28e:	01 2e       	mov	r0, r17
 290:	00 0c       	add	r0, r0
 292:	ee 08       	sbc	r14, r14
 294:	ff 08       	sbc	r15, r15
 296:	c0 cf       	rjmp	.-128    	; 0x218 <__EEPROM_REGION_LENGTH__+0x18>

00000298 <computePrimes>:
 298:	ec 01       	movw	r28, r24
 29a:	81 2c       	mov	r8, r1
 29c:	91 2c       	mov	r9, r1
 29e:	54 01       	movw	r10, r8
 2a0:	83 94       	inc	r8
 2a2:	83 e0       	ldi	r24, 0x03	; 3
 2a4:	88 16       	cp	r8, r24
 2a6:	91 04       	cpc	r9, r1
 2a8:	a1 04       	cpc	r10, r1
 2aa:	b1 04       	cpc	r11, r1
 2ac:	e4 f0       	brlt	.+56     	; 0x2e6 <computePrimes+0x4e>
 2ae:	80 fe       	sbrs	r8, 0
 2b0:	1f c0       	rjmp	.+62     	; 0x2f0 <computePrimes+0x58>
 2b2:	83 e0       	ldi	r24, 0x03	; 3
 2b4:	c8 2e       	mov	r12, r24
 2b6:	d1 2c       	mov	r13, r1
 2b8:	e1 2c       	mov	r14, r1
 2ba:	f1 2c       	mov	r15, r1
 2bc:	0d c0       	rjmp	.+26     	; 0x2d8 <computePrimes+0x40>
 2be:	8f ef       	ldi	r24, 0xFF	; 255
 2c0:	c8 1a       	sub	r12, r24
 2c2:	d8 0a       	sbc	r13, r24
 2c4:	e8 0a       	sbc	r14, r24
 2c6:	f8 0a       	sbc	r15, r24
 2c8:	c5 01       	movw	r24, r10
 2ca:	b4 01       	movw	r22, r8
 2cc:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <__divmodsi4>
 2d0:	67 2b       	or	r22, r23
 2d2:	68 2b       	or	r22, r24
 2d4:	69 2b       	or	r22, r25
 2d6:	61 f0       	breq	.+24     	; 0x2f0 <computePrimes+0x58>
 2d8:	96 01       	movw	r18, r12
 2da:	a7 01       	movw	r20, r14
 2dc:	c8 14       	cp	r12, r8
 2de:	d9 04       	cpc	r13, r9
 2e0:	ea 04       	cpc	r14, r10
 2e2:	fb 04       	cpc	r15, r11
 2e4:	61 f7       	brne	.-40     	; 0x2be <computePrimes+0x26>
 2e6:	ae 01       	movw	r20, r28
 2e8:	c5 01       	movw	r24, r10
 2ea:	b4 01       	movw	r22, r8
 2ec:	0e 94 b7 00 	call	0x16e	; 0x16e <printAt>
 2f0:	8f ef       	ldi	r24, 0xFF	; 255
 2f2:	88 1a       	sub	r8, r24
 2f4:	98 0a       	sbc	r9, r24
 2f6:	a8 0a       	sbc	r10, r24
 2f8:	b8 0a       	sbc	r11, r24
 2fa:	d3 cf       	rjmp	.-90     	; 0x2a2 <computePrimes+0xa>

000002fc <main>:
 2fc:	e1 e6       	ldi	r30, 0x61	; 97
 2fe:	f0 e0       	ldi	r31, 0x00	; 0
 300:	80 e8       	ldi	r24, 0x80	; 128
 302:	80 83       	st	Z, r24
 304:	10 82       	st	Z, r1
 306:	87 eb       	ldi	r24, 0xB7	; 183
 308:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
 30c:	87 e0       	ldi	r24, 0x07	; 7
 30e:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>
 312:	8f e0       	ldi	r24, 0x0F	; 15
 314:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
 318:	80 ec       	ldi	r24, 0xC0	; 192
 31a:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
 31e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7fc080>
 322:	8d e0       	ldi	r24, 0x0D	; 13
 324:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
 328:	82 e0       	ldi	r24, 0x02	; 2
 32a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
 32e:	82 e4       	ldi	r24, 0x42	; 66
 330:	9f e0       	ldi	r25, 0x0F	; 15
 332:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
 336:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
 33a:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
 33e:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
 342:	8c e1       	ldi	r24, 0x1C	; 28
 344:	91 e0       	ldi	r25, 0x01	; 1
 346:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <lock>
 34a:	88 e1       	ldi	r24, 0x18	; 24
 34c:	91 e0       	ldi	r25, 0x01	; 1
 34e:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <lock>
 352:	60 e0       	ldi	r22, 0x00	; 0
 354:	70 e0       	ldi	r23, 0x00	; 0
 356:	8d e4       	ldi	r24, 0x4D	; 77
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	0e 94 25 02 	call	0x44a	; 0x44a <spawn>
 35e:	60 e0       	ldi	r22, 0x00	; 0
 360:	70 e0       	ldi	r23, 0x00	; 0
 362:	88 ef       	ldi	r24, 0xF8	; 248
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	0e 94 25 02 	call	0x44a	; 0x44a <spawn>
 36a:	80 e0       	ldi	r24, 0x00	; 0
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	0e 94 4c 01 	call	0x298	; 0x298 <computePrimes>

00000372 <__vector_3>:
		}
	}
}

// Interrupt handler for button
ISR(PCINT1_vect) {
 372:	1f 92       	push	r1
 374:	0f 92       	push	r0
 376:	0f b6       	in	r0, 0x3f	; 63
 378:	0f 92       	push	r0
 37a:	11 24       	eor	r1, r1
 37c:	2f 93       	push	r18
 37e:	3f 93       	push	r19
 380:	4f 93       	push	r20
 382:	5f 93       	push	r21
 384:	6f 93       	push	r22
 386:	7f 93       	push	r23
 388:	8f 93       	push	r24
 38a:	9f 93       	push	r25
 38c:	af 93       	push	r26
 38e:	bf 93       	push	r27
 390:	ef 93       	push	r30
 392:	ff 93       	push	r31
	unlock(&x);
 394:	88 e1       	ldi	r24, 0x18	; 24
 396:	91 e0       	ldi	r25, 0x01	; 1
 398:	0e 94 1e 03 	call	0x63c	; 0x63c <unlock>
}
 39c:	ff 91       	pop	r31
 39e:	ef 91       	pop	r30
 3a0:	bf 91       	pop	r27
 3a2:	af 91       	pop	r26
 3a4:	9f 91       	pop	r25
 3a6:	8f 91       	pop	r24
 3a8:	7f 91       	pop	r23
 3aa:	6f 91       	pop	r22
 3ac:	5f 91       	pop	r21
 3ae:	4f 91       	pop	r20
 3b0:	3f 91       	pop	r19
 3b2:	2f 91       	pop	r18
 3b4:	0f 90       	pop	r0
 3b6:	0f be       	out	0x3f, r0	; 63
 3b8:	0f 90       	pop	r0
 3ba:	1f 90       	pop	r1
 3bc:	18 95       	reti

000003be <__vector_7>:

// Interrupt handler for timer
ISR(TIMER1_COMPA_vect) {
 3be:	1f 92       	push	r1
 3c0:	0f 92       	push	r0
 3c2:	0f b6       	in	r0, 0x3f	; 63
 3c4:	0f 92       	push	r0
 3c6:	11 24       	eor	r1, r1
 3c8:	2f 93       	push	r18
 3ca:	3f 93       	push	r19
 3cc:	4f 93       	push	r20
 3ce:	5f 93       	push	r21
 3d0:	6f 93       	push	r22
 3d2:	7f 93       	push	r23
 3d4:	8f 93       	push	r24
 3d6:	9f 93       	push	r25
 3d8:	af 93       	push	r26
 3da:	bf 93       	push	r27
 3dc:	ef 93       	push	r30
 3de:	ff 93       	push	r31
	unlock(&b);
 3e0:	8c e1       	ldi	r24, 0x1C	; 28
 3e2:	91 e0       	ldi	r25, 0x01	; 1
 3e4:	0e 94 1e 03 	call	0x63c	; 0x63c <unlock>
 3e8:	ff 91       	pop	r31
 3ea:	ef 91       	pop	r30
 3ec:	bf 91       	pop	r27
 3ee:	af 91       	pop	r26
 3f0:	9f 91       	pop	r25
 3f2:	8f 91       	pop	r24
 3f4:	7f 91       	pop	r23
 3f6:	6f 91       	pop	r22
 3f8:	5f 91       	pop	r21
 3fa:	4f 91       	pop	r20
 3fc:	3f 91       	pop	r19
 3fe:	2f 91       	pop	r18
 400:	0f 90       	pop	r0
 402:	0f be       	out	0x3f, r0	; 63
 404:	0f 90       	pop	r0
 406:	1f 90       	pop	r1
 408:	18 95       	reti

0000040a <dispatch>:
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
    if (*queue) {
 40a:	cf 93       	push	r28
 40c:	df 93       	push	r29
 40e:	00 d0       	rcall	.+0      	; 0x410 <dispatch+0x6>
 410:	cd b7       	in	r28, 0x3d	; 61
 412:	de b7       	in	r29, 0x3e	; 62
 414:	9a 83       	std	Y+2, r25	; 0x02
 416:	89 83       	std	Y+1, r24	; 0x01
 418:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 41c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 420:	06 96       	adiw	r24, 0x06	; 6
 422:	0e 94 9c 03 	call	0x738	; 0x738 <setjmp>
 426:	89 2b       	or	r24, r25
 428:	29 f0       	breq	.+10     	; 0x434 <dispatch+0x2a>
 42a:	0f 90       	pop	r0
 42c:	0f 90       	pop	r0
 42e:	df 91       	pop	r29
 430:	cf 91       	pop	r28
 432:	08 95       	ret
 434:	89 81       	ldd	r24, Y+1	; 0x01
 436:	9a 81       	ldd	r25, Y+2	; 0x02
 438:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 43c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 440:	61 e0       	ldi	r22, 0x01	; 1
 442:	70 e0       	ldi	r23, 0x00	; 0
 444:	06 96       	adiw	r24, 0x06	; 6
 446:	0e 94 bc 03 	call	0x778	; 0x778 <longjmp>

0000044a <spawn>:
 44a:	cf 93       	push	r28
 44c:	df 93       	push	r29
 44e:	00 d0       	rcall	.+0      	; 0x450 <spawn+0x6>
 450:	cd b7       	in	r28, 0x3d	; 61
 452:	de b7       	in	r29, 0x3e	; 62
 454:	f8 94       	cli
 456:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <initialized>
 45a:	30 91 25 01 	lds	r19, 0x0125	; 0x800125 <initialized+0x1>
 45e:	23 2b       	or	r18, r19
 460:	11 f5       	brne	.+68     	; 0x4a6 <spawn+0x5c>
 462:	22 e0       	ldi	r18, 0x02	; 2
 464:	32 e0       	ldi	r19, 0x02	; 2
 466:	30 93 9a 01 	sts	0x019A, r19	; 0x80019a <threads+0x5>
 46a:	20 93 99 01 	sts	0x0199, r18	; 0x800199 <threads+0x4>
 46e:	2f e6       	ldi	r18, 0x6F	; 111
 470:	32 e0       	ldi	r19, 0x02	; 2
 472:	30 93 07 02 	sts	0x0207, r19	; 0x800207 <threads+0x72>
 476:	20 93 06 02 	sts	0x0206, r18	; 0x800206 <threads+0x71>
 47a:	2c ed       	ldi	r18, 0xDC	; 220
 47c:	32 e0       	ldi	r19, 0x02	; 2
 47e:	30 93 74 02 	sts	0x0274, r19	; 0x800274 <threads+0xdf>
 482:	20 93 73 02 	sts	0x0273, r18	; 0x800273 <threads+0xde>
 486:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <threads+0x14c>
 48a:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <threads+0x14b>
 48e:	21 e0       	ldi	r18, 0x01	; 1
 490:	30 e0       	ldi	r19, 0x00	; 0
 492:	30 93 25 01 	sts	0x0125, r19	; 0x800125 <initialized+0x1>
 496:	20 93 24 01 	sts	0x0124, r18	; 0x800124 <initialized>
 49a:	20 e8       	ldi	r18, 0x80	; 128
 49c:	20 93 6c 00 	sts	0x006C, r18	; 0x80006c <__TEXT_REGION_LENGTH__+0x7fc06c>
 4a0:	2d bb       	out	0x1d, r18	; 29
 4a2:	20 e9       	ldi	r18, 0x90	; 144
 4a4:	25 b9       	out	0x05, r18	; 5
 4a6:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <freeQ>
 4aa:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <freeQ+0x1>
 4ae:	3a 83       	std	Y+2, r19	; 0x02
 4b0:	29 83       	std	Y+1, r18	; 0x01
 4b2:	23 2b       	or	r18, r19
 4b4:	09 f4       	brne	.+2      	; 0x4b8 <spawn+0x6e>
 4b6:	3f c0       	rjmp	.+126    	; 0x536 <__stack+0x37>
 4b8:	e9 81       	ldd	r30, Y+1	; 0x01
 4ba:	fa 81       	ldd	r31, Y+2	; 0x02
 4bc:	44 81       	ldd	r20, Z+4	; 0x04
 4be:	55 81       	ldd	r21, Z+5	; 0x05
 4c0:	50 93 03 01 	sts	0x0103, r21	; 0x800103 <freeQ+0x1>
 4c4:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <freeQ>
 4c8:	91 83       	std	Z+1, r25	; 0x01
 4ca:	80 83       	st	Z, r24
 4cc:	73 83       	std	Z+3, r23	; 0x03
 4ce:	62 83       	std	Z+2, r22	; 0x02
 4d0:	15 82       	std	Z+5, r1	; 0x05
 4d2:	14 82       	std	Z+4, r1	; 0x04
 4d4:	cf 01       	movw	r24, r30
 4d6:	06 96       	adiw	r24, 0x06	; 6
 4d8:	0e 94 9c 03 	call	0x738	; 0x738 <setjmp>
 4dc:	01 97       	sbiw	r24, 0x01	; 1
 4de:	89 f1       	breq	.+98     	; 0x542 <__stack+0x43>
 4e0:	e9 81       	ldd	r30, Y+1	; 0x01
 4e2:	fa 81       	ldd	r31, Y+2	; 0x02
 4e4:	36 96       	adiw	r30, 0x06	; 6
 4e6:	89 81       	ldd	r24, Y+1	; 0x01
 4e8:	9a 81       	ldd	r25, Y+2	; 0x02
 4ea:	87 59       	subi	r24, 0x97	; 151
 4ec:	9f 4f       	sbci	r25, 0xFF	; 255
 4ee:	91 8b       	std	Z+17, r25	; 0x11
 4f0:	80 8b       	std	Z+16, r24	; 0x10
 4f2:	93 8b       	std	Z+19, r25	; 0x13
 4f4:	82 8b       	std	Z+18, r24	; 0x12
 4f6:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 4fa:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 4fe:	15 96       	adiw	r26, 0x05	; 5
 500:	1c 92       	st	X, r1
 502:	1e 92       	st	-X, r1
 504:	14 97       	sbiw	r26, 0x04	; 4
 506:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <readyQ>
 50a:	f0 91 27 01 	lds	r31, 0x0127	; 0x800127 <readyQ+0x1>
 50e:	30 97       	sbiw	r30, 0x00	; 0
 510:	11 f4       	brne	.+4      	; 0x516 <__stack+0x17>
 512:	12 c0       	rjmp	.+36     	; 0x538 <__stack+0x39>
 514:	fc 01       	movw	r30, r24
 516:	84 81       	ldd	r24, Z+4	; 0x04
 518:	95 81       	ldd	r25, Z+5	; 0x05
 51a:	00 97       	sbiw	r24, 0x00	; 0
 51c:	d9 f7       	brne	.-10     	; 0x514 <__stack+0x15>
 51e:	b5 83       	std	Z+5, r27	; 0x05
 520:	a4 83       	std	Z+4, r26	; 0x04
 522:	89 81       	ldd	r24, Y+1	; 0x01
 524:	9a 81       	ldd	r25, Y+2	; 0x02
 526:	0e 94 05 02 	call	0x40a	; 0x40a <dispatch>
 52a:	78 94       	sei
 52c:	0f 90       	pop	r0
 52e:	0f 90       	pop	r0
 530:	df 91       	pop	r29
 532:	cf 91       	pop	r28
 534:	08 95       	ret
 536:	ff cf       	rjmp	.-2      	; 0x536 <__stack+0x37>
 538:	b0 93 27 01 	sts	0x0127, r27	; 0x800127 <readyQ+0x1>
 53c:	a0 93 26 01 	sts	0x0126, r26	; 0x800126 <readyQ>
 540:	f0 cf       	rjmp	.-32     	; 0x522 <__stack+0x23>
 542:	78 94       	sei
 544:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 548:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 54c:	ed 91       	ld	r30, X+
 54e:	fc 91       	ld	r31, X
 550:	11 97       	sbiw	r26, 0x01	; 1
 552:	12 96       	adiw	r26, 0x02	; 2
 554:	8d 91       	ld	r24, X+
 556:	9c 91       	ld	r25, X
 558:	13 97       	sbiw	r26, 0x03	; 3
 55a:	09 95       	icall
 55c:	f8 94       	cli
 55e:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 562:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 566:	15 96       	adiw	r26, 0x05	; 5
 568:	1c 92       	st	X, r1
 56a:	1e 92       	st	-X, r1
 56c:	14 97       	sbiw	r26, 0x04	; 4
 56e:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <freeQ>
 572:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <freeQ+0x1>
 576:	30 97       	sbiw	r30, 0x00	; 0
 578:	11 f4       	brne	.+4      	; 0x57e <__stack+0x7f>
 57a:	17 c0       	rjmp	.+46     	; 0x5aa <__stack+0xab>
 57c:	fc 01       	movw	r30, r24
 57e:	84 81       	ldd	r24, Z+4	; 0x04
 580:	95 81       	ldd	r25, Z+5	; 0x05
 582:	00 97       	sbiw	r24, 0x00	; 0
 584:	d9 f7       	brne	.-10     	; 0x57c <__stack+0x7d>
 586:	b5 83       	std	Z+5, r27	; 0x05
 588:	a4 83       	std	Z+4, r26	; 0x04
 58a:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <readyQ>
 58e:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <readyQ+0x1>
 592:	00 97       	sbiw	r24, 0x00	; 0
 594:	a1 f0       	breq	.+40     	; 0x5be <__stack+0xbf>
 596:	fc 01       	movw	r30, r24
 598:	24 81       	ldd	r18, Z+4	; 0x04
 59a:	35 81       	ldd	r19, Z+5	; 0x05
 59c:	30 93 27 01 	sts	0x0127, r19	; 0x800127 <readyQ+0x1>
 5a0:	20 93 26 01 	sts	0x0126, r18	; 0x800126 <readyQ>
 5a4:	0e 94 05 02 	call	0x40a	; 0x40a <dispatch>
 5a8:	9b cf       	rjmp	.-202    	; 0x4e0 <spawn+0x96>
 5aa:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <freeQ+0x1>
 5ae:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <freeQ>
 5b2:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <readyQ>
 5b6:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <readyQ+0x1>
 5ba:	00 97       	sbiw	r24, 0x00	; 0
 5bc:	61 f7       	brne	.-40     	; 0x596 <__stack+0x97>
 5be:	ff cf       	rjmp	.-2      	; 0x5be <__stack+0xbf>

000005c0 <lock>:
	enqueue(current, &readyQ);
	dispatch(dequeue(&readyQ));
	ENABLE();
}

void lock(mutex *m) {
 5c0:	cf 93       	push	r28
 5c2:	df 93       	push	r29
 5c4:	dc 01       	movw	r26, r24
	DISABLE();
 5c6:	f8 94       	cli
	
	// If it's unlocked, lock it
	if(m->locked == 0){
 5c8:	8d 91       	ld	r24, X+
 5ca:	9c 91       	ld	r25, X
 5cc:	11 97       	sbiw	r26, 0x01	; 1
 5ce:	89 2b       	or	r24, r25
 5d0:	41 f1       	breq	.+80     	; 0x622 <lock+0x62>
	}
	
	// Else - put the current thread in the back of the line of the waitQ
	// and run the first thread in the readyQ
	else{
		enqueue(current, &(m->waitQ));
 5d2:	c0 91 00 01 	lds	r28, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 5d6:	d0 91 01 01 	lds	r29, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
	*/
	PORTB = (1 << PB7) | (1 << PB4);
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 5da:	1d 82       	std	Y+5, r1	; 0x05
 5dc:	1c 82       	std	Y+4, r1	; 0x04
	
    if (*queue == NULL) {
 5de:	12 96       	adiw	r26, 0x02	; 2
 5e0:	ed 91       	ld	r30, X+
 5e2:	fc 91       	ld	r31, X
 5e4:	13 97       	sbiw	r26, 0x03	; 3
 5e6:	30 97       	sbiw	r30, 0x00	; 0
 5e8:	11 f4       	brne	.+4      	; 0x5ee <lock+0x2e>
 5ea:	23 c0       	rjmp	.+70     	; 0x632 <lock+0x72>
    } else if(current != p){
		p->next = *queue;
		*queue = p;
    }else {
        thread q = *queue;
        while (q->next)
 5ec:	fc 01       	movw	r30, r24
 5ee:	84 81       	ldd	r24, Z+4	; 0x04
 5f0:	95 81       	ldd	r25, Z+5	; 0x05
 5f2:	00 97       	sbiw	r24, 0x00	; 0
 5f4:	d9 f7       	brne	.-10     	; 0x5ec <lock+0x2c>
            q = q->next;
        q->next = p;
 5f6:	d5 83       	std	Z+5, r29	; 0x05
 5f8:	c4 83       	std	Z+4, r28	; 0x04
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 5fa:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <readyQ>
 5fe:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <readyQ+0x1>
    if (*queue) {
 602:	00 97       	sbiw	r24, 0x00	; 0
 604:	69 f0       	breq	.+26     	; 0x620 <lock+0x60>
        *queue = (*queue)->next;
 606:	fc 01       	movw	r30, r24
 608:	24 81       	ldd	r18, Z+4	; 0x04
 60a:	35 81       	ldd	r19, Z+5	; 0x05
 60c:	30 93 27 01 	sts	0x0127, r19	; 0x800127 <readyQ+0x1>
 610:	20 93 26 01 	sts	0x0126, r18	; 0x800126 <readyQ>
	
	// Else - put the current thread in the back of the line of the waitQ
	// and run the first thread in the readyQ
	else{
		enqueue(current, &(m->waitQ));
		dispatch(dequeue(&readyQ));
 614:	0e 94 05 02 	call	0x40a	; 0x40a <dispatch>
	}
	ENABLE();
 618:	78 94       	sei
}
 61a:	df 91       	pop	r29
 61c:	cf 91       	pop	r28
 61e:	08 95       	ret
 620:	ff cf       	rjmp	.-2      	; 0x620 <lock+0x60>
void lock(mutex *m) {
	DISABLE();
	
	// If it's unlocked, lock it
	if(m->locked == 0){
		m->locked = 1;
 622:	81 e0       	ldi	r24, 0x01	; 1
 624:	90 e0       	ldi	r25, 0x00	; 0
 626:	8d 93       	st	X+, r24
 628:	9c 93       	st	X, r25
	// and run the first thread in the readyQ
	else{
		enqueue(current, &(m->waitQ));
		dispatch(dequeue(&readyQ));
	}
	ENABLE();
 62a:	78 94       	sei
}
 62c:	df 91       	pop	r29
 62e:	cf 91       	pop	r28
 630:	08 95       	ret

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
	
    if (*queue == NULL) {
        *queue = p;
 632:	13 96       	adiw	r26, 0x03	; 3
 634:	dc 93       	st	X, r29
 636:	ce 93       	st	-X, r28
 638:	12 97       	sbiw	r26, 0x02	; 2
 63a:	df cf       	rjmp	.-66     	; 0x5fa <lock+0x3a>

0000063c <unlock>:
		dispatch(dequeue(&readyQ));
	}
	ENABLE();
}

void unlock(mutex *m) {
 63c:	cf 93       	push	r28
 63e:	df 93       	push	r29
 640:	fc 01       	movw	r30, r24
	
	DISABLE();
 642:	f8 94       	cli
	
	// If threads are available in the waitQ, put the current thread in the last position of the readyQ
	// and run the first thread in the waitQ
	if(m->waitQ != NULL){
 644:	82 81       	ldd	r24, Z+2	; 0x02
 646:	93 81       	ldd	r25, Z+3	; 0x03
 648:	89 2b       	or	r24, r25
 64a:	51 f1       	breq	.+84     	; 0x6a0 <unlock+0x64>
		enqueue(current, &readyQ);
 64c:	c0 91 00 01 	lds	r28, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 650:	d0 91 01 01 	lds	r29, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
	*/
	PORTB = (1 << PB7) | (1 << PB4);
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 654:	1d 82       	std	Y+5, r1	; 0x05
 656:	1c 82       	std	Y+4, r1	; 0x04
	
    if (*queue == NULL) {
 658:	a0 91 26 01 	lds	r26, 0x0126	; 0x800126 <readyQ>
 65c:	b0 91 27 01 	lds	r27, 0x0127	; 0x800127 <readyQ+0x1>
 660:	10 97       	sbiw	r26, 0x00	; 0
 662:	11 f4       	brne	.+4      	; 0x668 <unlock+0x2c>
 664:	23 c0       	rjmp	.+70     	; 0x6ac <unlock+0x70>
    } else if(current != p){
		p->next = *queue;
		*queue = p;
    }else {
        thread q = *queue;
        while (q->next)
 666:	dc 01       	movw	r26, r24
 668:	14 96       	adiw	r26, 0x04	; 4
 66a:	8d 91       	ld	r24, X+
 66c:	9c 91       	ld	r25, X
 66e:	15 97       	sbiw	r26, 0x05	; 5
 670:	00 97       	sbiw	r24, 0x00	; 0
 672:	c9 f7       	brne	.-14     	; 0x666 <unlock+0x2a>
            q = q->next;
        q->next = p;
 674:	15 96       	adiw	r26, 0x05	; 5
 676:	dc 93       	st	X, r29
 678:	ce 93       	st	-X, r28
 67a:	14 97       	sbiw	r26, 0x04	; 4
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 67c:	82 81       	ldd	r24, Z+2	; 0x02
 67e:	93 81       	ldd	r25, Z+3	; 0x03
    if (*queue) {
 680:	00 97       	sbiw	r24, 0x00	; 0
 682:	69 f0       	breq	.+26     	; 0x69e <unlock+0x62>
        *queue = (*queue)->next;
 684:	dc 01       	movw	r26, r24
 686:	14 96       	adiw	r26, 0x04	; 4
 688:	2d 91       	ld	r18, X+
 68a:	3c 91       	ld	r19, X
 68c:	15 97       	sbiw	r26, 0x05	; 5
 68e:	33 83       	std	Z+3, r19	; 0x03
 690:	22 83       	std	Z+2, r18	; 0x02
	
	// If threads are available in the waitQ, put the current thread in the last position of the readyQ
	// and run the first thread in the waitQ
	if(m->waitQ != NULL){
		enqueue(current, &readyQ);
		dispatch(dequeue(&(m->waitQ)));
 692:	0e 94 05 02 	call	0x40a	; 0x40a <dispatch>
	// Else - unlock (put the locked flag to 0)
	else{
		m->locked = 0;
	}
	
	ENABLE();
 696:	78 94       	sei
}
 698:	df 91       	pop	r29
 69a:	cf 91       	pop	r28
 69c:	08 95       	ret
 69e:	ff cf       	rjmp	.-2      	; 0x69e <unlock+0x62>
		dispatch(dequeue(&(m->waitQ)));
	}
	
	// Else - unlock (put the locked flag to 0)
	else{
		m->locked = 0;
 6a0:	11 82       	std	Z+1, r1	; 0x01
 6a2:	10 82       	st	Z, r1
	}
	
	ENABLE();
 6a4:	78 94       	sei
}
 6a6:	df 91       	pop	r29
 6a8:	cf 91       	pop	r28
 6aa:	08 95       	ret

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
	
    if (*queue == NULL) {
        *queue = p;
 6ac:	d0 93 27 01 	sts	0x0127, r29	; 0x800127 <readyQ+0x1>
 6b0:	c0 93 26 01 	sts	0x0126, r28	; 0x800126 <readyQ>
 6b4:	e3 cf       	rjmp	.-58     	; 0x67c <unlock+0x40>

000006b6 <__divmodsi4>:
 6b6:	05 2e       	mov	r0, r21
 6b8:	97 fb       	bst	r25, 7
 6ba:	1e f4       	brtc	.+6      	; 0x6c2 <__divmodsi4+0xc>
 6bc:	00 94       	com	r0
 6be:	0e 94 72 03 	call	0x6e4	; 0x6e4 <__negsi2>
 6c2:	57 fd       	sbrc	r21, 7
 6c4:	07 d0       	rcall	.+14     	; 0x6d4 <__divmodsi4_neg2>
 6c6:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <__udivmodsi4>
 6ca:	07 fc       	sbrc	r0, 7
 6cc:	03 d0       	rcall	.+6      	; 0x6d4 <__divmodsi4_neg2>
 6ce:	4e f4       	brtc	.+18     	; 0x6e2 <__divmodsi4_exit>
 6d0:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__negsi2>

000006d4 <__divmodsi4_neg2>:
 6d4:	50 95       	com	r21
 6d6:	40 95       	com	r20
 6d8:	30 95       	com	r19
 6da:	21 95       	neg	r18
 6dc:	3f 4f       	sbci	r19, 0xFF	; 255
 6de:	4f 4f       	sbci	r20, 0xFF	; 255
 6e0:	5f 4f       	sbci	r21, 0xFF	; 255

000006e2 <__divmodsi4_exit>:
 6e2:	08 95       	ret

000006e4 <__negsi2>:
 6e4:	90 95       	com	r25
 6e6:	80 95       	com	r24
 6e8:	70 95       	com	r23
 6ea:	61 95       	neg	r22
 6ec:	7f 4f       	sbci	r23, 0xFF	; 255
 6ee:	8f 4f       	sbci	r24, 0xFF	; 255
 6f0:	9f 4f       	sbci	r25, 0xFF	; 255
 6f2:	08 95       	ret

000006f4 <__udivmodsi4>:
 6f4:	a1 e2       	ldi	r26, 0x21	; 33
 6f6:	1a 2e       	mov	r1, r26
 6f8:	aa 1b       	sub	r26, r26
 6fa:	bb 1b       	sub	r27, r27
 6fc:	fd 01       	movw	r30, r26
 6fe:	0d c0       	rjmp	.+26     	; 0x71a <__udivmodsi4_ep>

00000700 <__udivmodsi4_loop>:
 700:	aa 1f       	adc	r26, r26
 702:	bb 1f       	adc	r27, r27
 704:	ee 1f       	adc	r30, r30
 706:	ff 1f       	adc	r31, r31
 708:	a2 17       	cp	r26, r18
 70a:	b3 07       	cpc	r27, r19
 70c:	e4 07       	cpc	r30, r20
 70e:	f5 07       	cpc	r31, r21
 710:	20 f0       	brcs	.+8      	; 0x71a <__udivmodsi4_ep>
 712:	a2 1b       	sub	r26, r18
 714:	b3 0b       	sbc	r27, r19
 716:	e4 0b       	sbc	r30, r20
 718:	f5 0b       	sbc	r31, r21

0000071a <__udivmodsi4_ep>:
 71a:	66 1f       	adc	r22, r22
 71c:	77 1f       	adc	r23, r23
 71e:	88 1f       	adc	r24, r24
 720:	99 1f       	adc	r25, r25
 722:	1a 94       	dec	r1
 724:	69 f7       	brne	.-38     	; 0x700 <__udivmodsi4_loop>
 726:	60 95       	com	r22
 728:	70 95       	com	r23
 72a:	80 95       	com	r24
 72c:	90 95       	com	r25
 72e:	9b 01       	movw	r18, r22
 730:	ac 01       	movw	r20, r24
 732:	bd 01       	movw	r22, r26
 734:	cf 01       	movw	r24, r30
 736:	08 95       	ret

00000738 <setjmp>:
 738:	dc 01       	movw	r26, r24
 73a:	2d 92       	st	X+, r2
 73c:	3d 92       	st	X+, r3
 73e:	4d 92       	st	X+, r4
 740:	5d 92       	st	X+, r5
 742:	6d 92       	st	X+, r6
 744:	7d 92       	st	X+, r7
 746:	8d 92       	st	X+, r8
 748:	9d 92       	st	X+, r9
 74a:	ad 92       	st	X+, r10
 74c:	bd 92       	st	X+, r11
 74e:	cd 92       	st	X+, r12
 750:	dd 92       	st	X+, r13
 752:	ed 92       	st	X+, r14
 754:	fd 92       	st	X+, r15
 756:	0d 93       	st	X+, r16
 758:	1d 93       	st	X+, r17
 75a:	cd 93       	st	X+, r28
 75c:	dd 93       	st	X+, r29
 75e:	ff 91       	pop	r31
 760:	ef 91       	pop	r30
 762:	8d b7       	in	r24, 0x3d	; 61
 764:	8d 93       	st	X+, r24
 766:	8e b7       	in	r24, 0x3e	; 62
 768:	8d 93       	st	X+, r24
 76a:	8f b7       	in	r24, 0x3f	; 63
 76c:	8d 93       	st	X+, r24
 76e:	ed 93       	st	X+, r30
 770:	fd 93       	st	X+, r31
 772:	88 27       	eor	r24, r24
 774:	99 27       	eor	r25, r25
 776:	09 94       	ijmp

00000778 <longjmp>:
 778:	dc 01       	movw	r26, r24
 77a:	cb 01       	movw	r24, r22
 77c:	81 30       	cpi	r24, 0x01	; 1
 77e:	91 05       	cpc	r25, r1
 780:	81 1d       	adc	r24, r1
 782:	2d 90       	ld	r2, X+
 784:	3d 90       	ld	r3, X+
 786:	4d 90       	ld	r4, X+
 788:	5d 90       	ld	r5, X+
 78a:	6d 90       	ld	r6, X+
 78c:	7d 90       	ld	r7, X+
 78e:	8d 90       	ld	r8, X+
 790:	9d 90       	ld	r9, X+
 792:	ad 90       	ld	r10, X+
 794:	bd 90       	ld	r11, X+
 796:	cd 90       	ld	r12, X+
 798:	dd 90       	ld	r13, X+
 79a:	ed 90       	ld	r14, X+
 79c:	fd 90       	ld	r15, X+
 79e:	0d 91       	ld	r16, X+
 7a0:	1d 91       	ld	r17, X+
 7a2:	cd 91       	ld	r28, X+
 7a4:	dd 91       	ld	r29, X+
 7a6:	ed 91       	ld	r30, X+
 7a8:	fd 91       	ld	r31, X+
 7aa:	0d 90       	ld	r0, X+
 7ac:	f8 94       	cli
 7ae:	fe bf       	out	0x3e, r31	; 62
 7b0:	0f be       	out	0x3f, r0	; 63
 7b2:	ed bf       	out	0x3d, r30	; 61
 7b4:	ed 91       	ld	r30, X+
 7b6:	fd 91       	ld	r31, X+
 7b8:	09 94       	ijmp

000007ba <_exit>:
 7ba:	f8 94       	cli

000007bc <__stop_program>:
 7bc:	ff cf       	rjmp	.-2      	; 0x7bc <__stop_program>
