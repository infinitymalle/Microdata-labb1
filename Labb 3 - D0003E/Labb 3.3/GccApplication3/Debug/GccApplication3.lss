
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000790  00000824  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000790  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000022e  00800118  00800118  0000083c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000083c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000086c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000008ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001207  00000000  00000000  0000094c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b8a  00000000  00000000  00001b53  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000760  00000000  00000000  000026dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000023c  00000000  00000000  00002e40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000058e  00000000  00000000  0000307c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000acd  00000000  00000000  0000360a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  000040d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 9e 01 	jmp	0x33c	; 0x33c <__vector_3>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 c6 01 	jmp	0x38c	; 0x38c <__vector_7>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	e0 e9       	ldi	r30, 0x90	; 144
  70:	f7 e0       	ldi	r31, 0x07	; 7
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	a8 31       	cpi	r26, 0x18	; 24
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
  7e:	23 e0       	ldi	r18, 0x03	; 3
  80:	a8 e1       	ldi	r26, 0x18	; 24
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	a6 34       	cpi	r26, 0x46	; 70
  8a:	b2 07       	cpc	r27, r18
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 72 01 	call	0x2e4	; 0x2e4 <main>
  92:	0c 94 c6 03 	jmp	0x78c	; 0x78c <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <blink>:
	}
}
bool is_prime(long i){
	for(int n = 2; n < i; n++){
		if(i % n == 0){
			return(false);
  9a:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <on>
  9e:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <on+0x1>
  a2:	89 2b       	or	r24, r25
  a4:	39 f0       	breq	.+14     	; 0xb4 <blink+0x1a>
  a6:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7fc0ef>
  aa:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <on+0x1>
  ae:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <on>
  b2:	08 95       	ret
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7fc0ef>
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <on+0x1>
  c2:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <on>
  c6:	08 95       	ret

000000c8 <writeChar>:
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	cd b7       	in	r28, 0x3d	; 61
  ce:	de b7       	in	r29, 0x3e	; 62
  d0:	64 97       	sbiw	r28, 0x14	; 20
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	f8 94       	cli
  d6:	de bf       	out	0x3e, r29	; 62
  d8:	0f be       	out	0x3f, r0	; 63
  da:	cd bf       	out	0x3d, r28	; 61
  dc:	94 e1       	ldi	r25, 0x14	; 20
  de:	e4 e0       	ldi	r30, 0x04	; 4
  e0:	f1 e0       	ldi	r31, 0x01	; 1
  e2:	de 01       	movw	r26, r28
  e4:	11 96       	adiw	r26, 0x01	; 1
  e6:	01 90       	ld	r0, Z+
  e8:	0d 92       	st	X+, r0
  ea:	9a 95       	dec	r25
  ec:	e1 f7       	brne	.-8      	; 0xe6 <writeChar+0x1e>
  ee:	66 30       	cpi	r22, 0x06	; 6
  f0:	71 05       	cpc	r23, r1
  f2:	50 f5       	brcc	.+84     	; 0x148 <writeChar+0x80>
  f4:	fb 01       	movw	r30, r22
  f6:	f5 95       	asr	r31
  f8:	e7 95       	ror	r30
  fa:	e4 51       	subi	r30, 0x14	; 20
  fc:	ff 4f       	sbci	r31, 0xFF	; 255
  fe:	a8 2f       	mov	r26, r24
 100:	b0 e0       	ldi	r27, 0x00	; 0
 102:	d0 97       	sbiw	r26, 0x30	; 48
 104:	aa 0f       	add	r26, r26
 106:	bb 1f       	adc	r27, r27
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	8c 0f       	add	r24, r28
 10e:	9d 1f       	adc	r25, r29
 110:	a8 0f       	add	r26, r24
 112:	b9 1f       	adc	r27, r25
 114:	4d 91       	ld	r20, X+
 116:	5c 91       	ld	r21, X
 118:	61 70       	andi	r22, 0x01	; 1
 11a:	77 27       	eor	r23, r23
 11c:	df 01       	movw	r26, r30
 11e:	54 96       	adiw	r26, 0x14	; 20
 120:	ca 01       	movw	r24, r20
 122:	8f 70       	andi	r24, 0x0F	; 15
 124:	99 27       	eor	r25, r25
 126:	61 30       	cpi	r22, 0x01	; 1
 128:	71 05       	cpc	r23, r1
 12a:	b9 f0       	breq	.+46     	; 0x15a <writeChar+0x92>
 12c:	20 81       	ld	r18, Z
 12e:	20 7f       	andi	r18, 0xF0	; 240
 130:	82 2b       	or	r24, r18
 132:	80 83       	st	Z, r24
 134:	35 96       	adiw	r30, 0x05	; 5
 136:	52 95       	swap	r21
 138:	42 95       	swap	r20
 13a:	4f 70       	andi	r20, 0x0F	; 15
 13c:	45 27       	eor	r20, r21
 13e:	5f 70       	andi	r21, 0x0F	; 15
 140:	45 27       	eor	r20, r21
 142:	ea 17       	cp	r30, r26
 144:	fb 07       	cpc	r31, r27
 146:	61 f7       	brne	.-40     	; 0x120 <writeChar+0x58>
 148:	64 96       	adiw	r28, 0x14	; 20
 14a:	0f b6       	in	r0, 0x3f	; 63
 14c:	f8 94       	cli
 14e:	de bf       	out	0x3e, r29	; 62
 150:	0f be       	out	0x3f, r0	; 63
 152:	cd bf       	out	0x3d, r28	; 61
 154:	df 91       	pop	r29
 156:	cf 91       	pop	r28
 158:	08 95       	ret
 15a:	82 95       	swap	r24
 15c:	92 95       	swap	r25
 15e:	90 7f       	andi	r25, 0xF0	; 240
 160:	98 27       	eor	r25, r24
 162:	80 7f       	andi	r24, 0xF0	; 240
 164:	98 27       	eor	r25, r24
 166:	20 81       	ld	r18, Z
 168:	2f 70       	andi	r18, 0x0F	; 15
 16a:	e2 cf       	rjmp	.-60     	; 0x130 <writeChar+0x68>

0000016c <printAt>:
 16c:	8f 92       	push	r8
 16e:	9f 92       	push	r9
 170:	af 92       	push	r10
 172:	bf 92       	push	r11
 174:	cf 92       	push	r12
 176:	df 92       	push	r13
 178:	ef 92       	push	r14
 17a:	ff 92       	push	r15
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
 180:	4b 01       	movw	r8, r22
 182:	5c 01       	movw	r10, r24
 184:	ea 01       	movw	r28, r20
 186:	8d e1       	ldi	r24, 0x1D	; 29
 188:	91 e0       	ldi	r25, 0x01	; 1
 18a:	0e 94 c9 02 	call	0x592	; 0x592 <lock>
 18e:	c5 01       	movw	r24, r10
 190:	b4 01       	movw	r22, r8
 192:	24 e6       	ldi	r18, 0x64	; 100
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	40 e0       	ldi	r20, 0x00	; 0
 198:	50 e0       	ldi	r21, 0x00	; 0
 19a:	0e 94 44 03 	call	0x688	; 0x688 <__divmodsi4>
 19e:	2a e0       	ldi	r18, 0x0A	; 10
 1a0:	c2 2e       	mov	r12, r18
 1a2:	d1 2c       	mov	r13, r1
 1a4:	e1 2c       	mov	r14, r1
 1a6:	f1 2c       	mov	r15, r1
 1a8:	a7 01       	movw	r20, r14
 1aa:	96 01       	movw	r18, r12
 1ac:	0e 94 44 03 	call	0x688	; 0x688 <__divmodsi4>
 1b0:	be 01       	movw	r22, r28
 1b2:	80 e3       	ldi	r24, 0x30	; 48
 1b4:	82 0f       	add	r24, r18
 1b6:	0e 94 64 00 	call	0xc8	; 0xc8 <writeChar>
 1ba:	21 96       	adiw	r28, 0x01	; 1
 1bc:	c5 01       	movw	r24, r10
 1be:	b4 01       	movw	r22, r8
 1c0:	a7 01       	movw	r20, r14
 1c2:	96 01       	movw	r18, r12
 1c4:	0e 94 44 03 	call	0x688	; 0x688 <__divmodsi4>
 1c8:	86 2f       	mov	r24, r22
 1ca:	be 01       	movw	r22, r28
 1cc:	80 5d       	subi	r24, 0xD0	; 208
 1ce:	0e 94 64 00 	call	0xc8	; 0xc8 <writeChar>
 1d2:	8d e1       	ldi	r24, 0x1D	; 29
 1d4:	91 e0       	ldi	r25, 0x01	; 1
 1d6:	df 91       	pop	r29
 1d8:	cf 91       	pop	r28
 1da:	ff 90       	pop	r15
 1dc:	ef 90       	pop	r14
 1de:	df 90       	pop	r13
 1e0:	cf 90       	pop	r12
 1e2:	bf 90       	pop	r11
 1e4:	af 90       	pop	r10
 1e6:	9f 90       	pop	r9
 1e8:	8f 90       	pop	r8
 1ea:	0c 94 07 03 	jmp	0x60e	; 0x60e <unlock>

000001ee <button>:
 1ee:	1f 99       	sbic	0x03, 7	; 3
 1f0:	2f c0       	rjmp	.+94     	; 0x250 <__EEPROM_REGION_LENGTH__+0x50>
 1f2:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 1f6:	88 23       	and	r24, r24
 1f8:	81 f0       	breq	.+32     	; 0x21a <__EEPROM_REGION_LENGTH__+0x1a>
 1fa:	83 b1       	in	r24, 0x03	; 3
 1fc:	1f 99       	sbic	0x03, 7	; 3
 1fe:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <__data_end>
 202:	60 91 19 01 	lds	r22, 0x0119	; 0x800119 <press>
 206:	70 91 1a 01 	lds	r23, 0x011A	; 0x80011a <press+0x1>
 20a:	07 2e       	mov	r0, r23
 20c:	00 0c       	add	r0, r0
 20e:	88 0b       	sbc	r24, r24
 210:	99 0b       	sbc	r25, r25
 212:	44 e0       	ldi	r20, 0x04	; 4
 214:	50 e0       	ldi	r21, 0x00	; 0
 216:	0c 94 b6 00 	jmp	0x16c	; 0x16c <printAt>
 21a:	80 91 f9 00 	lds	r24, 0x00F9	; 0x8000f9 <__TEXT_REGION_LENGTH__+0x7fc0f9>
 21e:	81 30       	cpi	r24, 0x01	; 1
 220:	f1 f0       	breq	.+60     	; 0x25e <__EEPROM_REGION_LENGTH__+0x5e>
 222:	1f 99       	sbic	0x03, 7	; 3
 224:	eb cf       	rjmp	.-42     	; 0x1fc <button+0xe>
 226:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7fc0f4>
 22a:	81 30       	cpi	r24, 0x01	; 1
 22c:	39 f7       	brne	.-50     	; 0x1fc <button+0xe>
 22e:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <press>
 232:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <press+0x1>
 236:	2f 5f       	subi	r18, 0xFF	; 255
 238:	3f 4f       	sbci	r19, 0xFF	; 255
 23a:	30 93 1a 01 	sts	0x011A, r19	; 0x80011a <press+0x1>
 23e:	20 93 19 01 	sts	0x0119, r18	; 0x800119 <press>
 242:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
 246:	80 93 f9 00 	sts	0x00F9, r24	; 0x8000f9 <__TEXT_REGION_LENGTH__+0x7fc0f9>
 24a:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7fc0f4>
 24e:	d9 cf       	rjmp	.-78     	; 0x202 <__EEPROM_REGION_LENGTH__+0x2>
 250:	1f 99       	sbic	0x03, 7	; 3
 252:	d4 cf       	rjmp	.-88     	; 0x1fc <button+0xe>
 254:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 258:	88 23       	and	r24, r24
 25a:	29 f3       	breq	.-54     	; 0x226 <__EEPROM_REGION_LENGTH__+0x26>
 25c:	cf cf       	rjmp	.-98     	; 0x1fc <button+0xe>
 25e:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <press>
 262:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <press+0x1>
 266:	2f 5f       	subi	r18, 0xFF	; 255
 268:	3f 4f       	sbci	r19, 0xFF	; 255
 26a:	30 93 1a 01 	sts	0x011A, r19	; 0x80011a <press+0x1>
 26e:	20 93 19 01 	sts	0x0119, r18	; 0x800119 <press>
 272:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
 276:	10 92 f9 00 	sts	0x00F9, r1	; 0x8000f9 <__TEXT_REGION_LENGTH__+0x7fc0f9>
 27a:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7fc0f4>
 27e:	c1 cf       	rjmp	.-126    	; 0x202 <__EEPROM_REGION_LENGTH__+0x2>

00000280 <computePrimes>:
 280:	ec 01       	movw	r28, r24
 282:	81 2c       	mov	r8, r1
 284:	91 2c       	mov	r9, r1
 286:	54 01       	movw	r10, r8
 288:	83 94       	inc	r8
 28a:	83 e0       	ldi	r24, 0x03	; 3
 28c:	88 16       	cp	r8, r24
 28e:	91 04       	cpc	r9, r1
 290:	a1 04       	cpc	r10, r1
 292:	b1 04       	cpc	r11, r1
 294:	e4 f0       	brlt	.+56     	; 0x2ce <computePrimes+0x4e>
 296:	80 fe       	sbrs	r8, 0
 298:	1f c0       	rjmp	.+62     	; 0x2d8 <computePrimes+0x58>
 29a:	83 e0       	ldi	r24, 0x03	; 3
 29c:	c8 2e       	mov	r12, r24
 29e:	d1 2c       	mov	r13, r1
 2a0:	e1 2c       	mov	r14, r1
 2a2:	f1 2c       	mov	r15, r1
 2a4:	0d c0       	rjmp	.+26     	; 0x2c0 <computePrimes+0x40>
 2a6:	8f ef       	ldi	r24, 0xFF	; 255
 2a8:	c8 1a       	sub	r12, r24
 2aa:	d8 0a       	sbc	r13, r24
 2ac:	e8 0a       	sbc	r14, r24
 2ae:	f8 0a       	sbc	r15, r24
 2b0:	c5 01       	movw	r24, r10
 2b2:	b4 01       	movw	r22, r8
 2b4:	0e 94 44 03 	call	0x688	; 0x688 <__divmodsi4>
 2b8:	67 2b       	or	r22, r23
 2ba:	68 2b       	or	r22, r24
 2bc:	69 2b       	or	r22, r25
 2be:	61 f0       	breq	.+24     	; 0x2d8 <computePrimes+0x58>
 2c0:	96 01       	movw	r18, r12
 2c2:	a7 01       	movw	r20, r14
 2c4:	c8 14       	cp	r12, r8
 2c6:	d9 04       	cpc	r13, r9
 2c8:	ea 04       	cpc	r14, r10
 2ca:	fb 04       	cpc	r15, r11
 2cc:	61 f7       	brne	.-40     	; 0x2a6 <computePrimes+0x26>
 2ce:	ae 01       	movw	r20, r28
 2d0:	c5 01       	movw	r24, r10
 2d2:	b4 01       	movw	r22, r8
 2d4:	0e 94 b6 00 	call	0x16c	; 0x16c <printAt>
 2d8:	8f ef       	ldi	r24, 0xFF	; 255
 2da:	88 1a       	sub	r8, r24
 2dc:	98 0a       	sbc	r9, r24
 2de:	a8 0a       	sbc	r10, r24
 2e0:	b8 0a       	sbc	r11, r24
 2e2:	d3 cf       	rjmp	.-90     	; 0x28a <computePrimes+0xa>

000002e4 <main>:
 2e4:	e1 e6       	ldi	r30, 0x61	; 97
 2e6:	f0 e0       	ldi	r31, 0x00	; 0
 2e8:	80 e8       	ldi	r24, 0x80	; 128
 2ea:	80 83       	st	Z, r24
 2ec:	10 82       	st	Z, r1
 2ee:	87 eb       	ldi	r24, 0xB7	; 183
 2f0:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
 2f4:	87 e0       	ldi	r24, 0x07	; 7
 2f6:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>
 2fa:	8f e0       	ldi	r24, 0x0F	; 15
 2fc:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
 300:	80 ec       	ldi	r24, 0xC0	; 192
 302:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
 306:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7fc080>
 30a:	8d e0       	ldi	r24, 0x0D	; 13
 30c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
 310:	82 e0       	ldi	r24, 0x02	; 2
 312:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
 316:	82 e4       	ldi	r24, 0x42	; 66
 318:	9f e0       	ldi	r25, 0x0F	; 15
 31a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
 31e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
 322:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
 326:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7fc0f4>
 330:	10 92 f9 00 	sts	0x00F9, r1	; 0x8000f9 <__TEXT_REGION_LENGTH__+0x7fc0f9>
 334:	80 e0       	ldi	r24, 0x00	; 0
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	0e 94 40 01 	call	0x280	; 0x280 <computePrimes>

0000033c <__vector_3>:
	}
	printAt(press, 4);
}

// Interrupt handler for button
ISR(PCINT1_vect) {
 33c:	1f 92       	push	r1
 33e:	0f 92       	push	r0
 340:	0f b6       	in	r0, 0x3f	; 63
 342:	0f 92       	push	r0
 344:	11 24       	eor	r1, r1
 346:	2f 93       	push	r18
 348:	3f 93       	push	r19
 34a:	4f 93       	push	r20
 34c:	5f 93       	push	r21
 34e:	6f 93       	push	r22
 350:	7f 93       	push	r23
 352:	8f 93       	push	r24
 354:	9f 93       	push	r25
 356:	af 93       	push	r26
 358:	bf 93       	push	r27
 35a:	ef 93       	push	r30
 35c:	ff 93       	push	r31
	spawn(button, 0);
 35e:	60 e0       	ldi	r22, 0x00	; 0
 360:	70 e0       	ldi	r23, 0x00	; 0
 362:	87 ef       	ldi	r24, 0xF7	; 247
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	0e 94 0e 02 	call	0x41c	; 0x41c <spawn>
}
 36a:	ff 91       	pop	r31
 36c:	ef 91       	pop	r30
 36e:	bf 91       	pop	r27
 370:	af 91       	pop	r26
 372:	9f 91       	pop	r25
 374:	8f 91       	pop	r24
 376:	7f 91       	pop	r23
 378:	6f 91       	pop	r22
 37a:	5f 91       	pop	r21
 37c:	4f 91       	pop	r20
 37e:	3f 91       	pop	r19
 380:	2f 91       	pop	r18
 382:	0f 90       	pop	r0
 384:	0f be       	out	0x3f, r0	; 63
 386:	0f 90       	pop	r0
 388:	1f 90       	pop	r1
 38a:	18 95       	reti

0000038c <__vector_7>:

// Interrupt handler for timer
ISR(TIMER1_COMPA_vect) {
 38c:	1f 92       	push	r1
 38e:	0f 92       	push	r0
 390:	0f b6       	in	r0, 0x3f	; 63
 392:	0f 92       	push	r0
 394:	11 24       	eor	r1, r1
 396:	2f 93       	push	r18
 398:	3f 93       	push	r19
 39a:	4f 93       	push	r20
 39c:	5f 93       	push	r21
 39e:	6f 93       	push	r22
 3a0:	7f 93       	push	r23
 3a2:	8f 93       	push	r24
 3a4:	9f 93       	push	r25
 3a6:	af 93       	push	r26
 3a8:	bf 93       	push	r27
 3aa:	ef 93       	push	r30
 3ac:	ff 93       	push	r31
	spawn(blink, 0);
 3ae:	60 e0       	ldi	r22, 0x00	; 0
 3b0:	70 e0       	ldi	r23, 0x00	; 0
 3b2:	8d e4       	ldi	r24, 0x4D	; 77
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	0e 94 0e 02 	call	0x41c	; 0x41c <spawn>
 3ba:	ff 91       	pop	r31
 3bc:	ef 91       	pop	r30
 3be:	bf 91       	pop	r27
 3c0:	af 91       	pop	r26
 3c2:	9f 91       	pop	r25
 3c4:	8f 91       	pop	r24
 3c6:	7f 91       	pop	r23
 3c8:	6f 91       	pop	r22
 3ca:	5f 91       	pop	r21
 3cc:	4f 91       	pop	r20
 3ce:	3f 91       	pop	r19
 3d0:	2f 91       	pop	r18
 3d2:	0f 90       	pop	r0
 3d4:	0f be       	out	0x3f, r0	; 63
 3d6:	0f 90       	pop	r0
 3d8:	1f 90       	pop	r1
 3da:	18 95       	reti

000003dc <dispatch>:
        while (1) ;  // not much else to do...
    }
    return p;
}

static void dispatch(thread next) {
 3dc:	cf 93       	push	r28
 3de:	df 93       	push	r29
 3e0:	00 d0       	rcall	.+0      	; 0x3e2 <dispatch+0x6>
 3e2:	cd b7       	in	r28, 0x3d	; 61
 3e4:	de b7       	in	r29, 0x3e	; 62
 3e6:	9a 83       	std	Y+2, r25	; 0x02
 3e8:	89 83       	std	Y+1, r24	; 0x01
    if (setjmp(current->context) == 0) {
 3ea:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3ee:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3f2:	06 96       	adiw	r24, 0x06	; 6
 3f4:	0e 94 85 03 	call	0x70a	; 0x70a <setjmp>
 3f8:	89 2b       	or	r24, r25
 3fa:	29 f0       	breq	.+10     	; 0x406 <__DATA_REGION_LENGTH__+0x6>
        current = next;
        longjmp(next->context,1);
    }
}
 3fc:	0f 90       	pop	r0
 3fe:	0f 90       	pop	r0
 400:	df 91       	pop	r29
 402:	cf 91       	pop	r28
 404:	08 95       	ret
    return p;
}

static void dispatch(thread next) {
    if (setjmp(current->context) == 0) {
        current = next;
 406:	89 81       	ldd	r24, Y+1	; 0x01
 408:	9a 81       	ldd	r25, Y+2	; 0x02
 40a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 40e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
        longjmp(next->context,1);
 412:	61 e0       	ldi	r22, 0x01	; 1
 414:	70 e0       	ldi	r23, 0x00	; 0
 416:	06 96       	adiw	r24, 0x06	; 6
 418:	0e 94 a5 03 	call	0x74a	; 0x74a <longjmp>

0000041c <spawn>:
    }
}

void spawn(void (* function)(int), int arg) {
 41c:	cf 93       	push	r28
 41e:	df 93       	push	r29
 420:	00 d0       	rcall	.+0      	; 0x422 <spawn+0x6>
 422:	cd b7       	in	r28, 0x3d	; 61
 424:	de b7       	in	r29, 0x3e	; 62
    thread newp;

    DISABLE();
 426:	f8 94       	cli
    if (!initialized) initialize();
 428:	20 91 21 01 	lds	r18, 0x0121	; 0x800121 <initialized>
 42c:	30 91 22 01 	lds	r19, 0x0122	; 0x800122 <initialized+0x1>
 430:	23 2b       	or	r18, r19
 432:	11 f5       	brne	.+68     	; 0x478 <spawn+0x5c>
int initialized = 0;

static void initialize(void) {
    int i;
    for (i=0; i<NTHREADS-1; i++)
        threads[i].next = &threads[i+1];
 434:	2f ef       	ldi	r18, 0xFF	; 255
 436:	31 e0       	ldi	r19, 0x01	; 1
 438:	30 93 97 01 	sts	0x0197, r19	; 0x800197 <threads+0x5>
 43c:	20 93 96 01 	sts	0x0196, r18	; 0x800196 <threads+0x4>
 440:	2c e6       	ldi	r18, 0x6C	; 108
 442:	32 e0       	ldi	r19, 0x02	; 2
 444:	30 93 04 02 	sts	0x0204, r19	; 0x800204 <threads+0x72>
 448:	20 93 03 02 	sts	0x0203, r18	; 0x800203 <threads+0x71>
 44c:	29 ed       	ldi	r18, 0xD9	; 217
 44e:	32 e0       	ldi	r19, 0x02	; 2
 450:	30 93 71 02 	sts	0x0271, r19	; 0x800271 <threads+0xdf>
 454:	20 93 70 02 	sts	0x0270, r18	; 0x800270 <threads+0xde>
    threads[NTHREADS-1].next = NULL;
 458:	10 92 de 02 	sts	0x02DE, r1	; 0x8002de <threads+0x14c>
 45c:	10 92 dd 02 	sts	0x02DD, r1	; 0x8002dd <threads+0x14b>

    initialized = 1;
 460:	21 e0       	ldi	r18, 0x01	; 1
 462:	30 e0       	ldi	r19, 0x00	; 0
 464:	30 93 22 01 	sts	0x0122, r19	; 0x800122 <initialized+0x1>
 468:	20 93 21 01 	sts	0x0121, r18	; 0x800121 <initialized>
	
	/*
		Interrupts are enabled on the 7th pin of PORTB
	*/
	PCMSK1 = (1 << PCINT15);
 46c:	20 e8       	ldi	r18, 0x80	; 128
 46e:	20 93 6c 00 	sts	0x006C, r18	; 0x80006c <__TEXT_REGION_LENGTH__+0x7fc06c>
	EIMSK = (1 << PCIE1);
 472:	2d bb       	out	0x1d, r18	; 29
	
	/*
		Enables Joystick
	*/
	PORTB = (1 << PB7) | (1 << PB4);
 474:	20 e9       	ldi	r18, 0x90	; 144
 476:	25 b9       	out	0x05, r18	; 5
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 478:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <freeQ>
 47c:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <freeQ+0x1>
 480:	3a 83       	std	Y+2, r19	; 0x02
 482:	29 83       	std	Y+1, r18	; 0x01
    if (*queue) {
 484:	23 2b       	or	r18, r19
 486:	09 f4       	brne	.+2      	; 0x48a <spawn+0x6e>
 488:	3f c0       	rjmp	.+126    	; 0x508 <__stack+0x9>
        *queue = (*queue)->next;
 48a:	e9 81       	ldd	r30, Y+1	; 0x01
 48c:	fa 81       	ldd	r31, Y+2	; 0x02
 48e:	44 81       	ldd	r20, Z+4	; 0x04
 490:	55 81       	ldd	r21, Z+5	; 0x05
 492:	50 93 03 01 	sts	0x0103, r21	; 0x800103 <freeQ+0x1>
 496:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <freeQ>

    DISABLE();
    if (!initialized) initialize();

    newp = dequeue(&freeQ);
    newp->function = function;
 49a:	91 83       	std	Z+1, r25	; 0x01
 49c:	80 83       	st	Z, r24
    newp->arg = arg;
 49e:	73 83       	std	Z+3, r23	; 0x03
 4a0:	62 83       	std	Z+2, r22	; 0x02
    newp->next = NULL;
 4a2:	15 82       	std	Z+5, r1	; 0x05
 4a4:	14 82       	std	Z+4, r1	; 0x04
    if (setjmp(newp->context) == 1) {
 4a6:	cf 01       	movw	r24, r30
 4a8:	06 96       	adiw	r24, 0x06	; 6
 4aa:	0e 94 85 03 	call	0x70a	; 0x70a <setjmp>
 4ae:	01 97       	sbiw	r24, 0x01	; 1
 4b0:	89 f1       	breq	.+98     	; 0x514 <__stack+0x15>
        current->function(current->arg);
        DISABLE();
        enqueue(current, &freeQ);
        dispatch(dequeue(&readyQ));
    }
    SETSTACK(&newp->context, &newp->stack);
 4b2:	e9 81       	ldd	r30, Y+1	; 0x01
 4b4:	fa 81       	ldd	r31, Y+2	; 0x02
 4b6:	36 96       	adiw	r30, 0x06	; 6
 4b8:	89 81       	ldd	r24, Y+1	; 0x01
 4ba:	9a 81       	ldd	r25, Y+2	; 0x02
 4bc:	87 59       	subi	r24, 0x97	; 151
 4be:	9f 4f       	sbci	r25, 0xFF	; 255
 4c0:	91 8b       	std	Z+17, r25	; 0x11
 4c2:	80 8b       	std	Z+16, r24	; 0x10
 4c4:	93 8b       	std	Z+19, r25	; 0x13
 4c6:	82 8b       	std	Z+18, r24	; 0x12

	enqueue(current, &readyQ);
 4c8:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 4cc:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
	*/
	PORTB = (1 << PB7) | (1 << PB4);
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 4d0:	15 96       	adiw	r26, 0x05	; 5
 4d2:	1c 92       	st	X, r1
 4d4:	1e 92       	st	-X, r1
 4d6:	14 97       	sbiw	r26, 0x04	; 4
	
    if (*queue == NULL) {
 4d8:	e0 91 23 01 	lds	r30, 0x0123	; 0x800123 <readyQ>
 4dc:	f0 91 24 01 	lds	r31, 0x0124	; 0x800124 <readyQ+0x1>
 4e0:	30 97       	sbiw	r30, 0x00	; 0
 4e2:	11 f4       	brne	.+4      	; 0x4e8 <spawn+0xcc>
 4e4:	12 c0       	rjmp	.+36     	; 0x50a <__stack+0xb>
    } else if(current != p){
		p->next = *queue;
		*queue = p;
    }else {
        thread q = *queue;
        while (q->next)
 4e6:	fc 01       	movw	r30, r24
 4e8:	84 81       	ldd	r24, Z+4	; 0x04
 4ea:	95 81       	ldd	r25, Z+5	; 0x05
 4ec:	00 97       	sbiw	r24, 0x00	; 0
 4ee:	d9 f7       	brne	.-10     	; 0x4e6 <spawn+0xca>
            q = q->next;
        q->next = p;
 4f0:	b5 83       	std	Z+5, r27	; 0x05
 4f2:	a4 83       	std	Z+4, r26	; 0x04
        dispatch(dequeue(&readyQ));
    }
    SETSTACK(&newp->context, &newp->stack);

	enqueue(current, &readyQ);
	dispatch(newp);
 4f4:	89 81       	ldd	r24, Y+1	; 0x01
 4f6:	9a 81       	ldd	r25, Y+2	; 0x02
 4f8:	0e 94 ee 01 	call	0x3dc	; 0x3dc <dispatch>
    ENABLE();
 4fc:	78 94       	sei
}
 4fe:	0f 90       	pop	r0
 500:	0f 90       	pop	r0
 502:	df 91       	pop	r29
 504:	cf 91       	pop	r28
 506:	08 95       	ret
 508:	ff cf       	rjmp	.-2      	; 0x508 <__stack+0x9>

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
	
    if (*queue == NULL) {
        *queue = p;
 50a:	b0 93 24 01 	sts	0x0124, r27	; 0x800124 <readyQ+0x1>
 50e:	a0 93 23 01 	sts	0x0123, r26	; 0x800123 <readyQ>
 512:	f0 cf       	rjmp	.-32     	; 0x4f4 <spawn+0xd8>
    newp = dequeue(&freeQ);
    newp->function = function;
    newp->arg = arg;
    newp->next = NULL;
    if (setjmp(newp->context) == 1) {
        ENABLE();
 514:	78 94       	sei
        current->function(current->arg);
 516:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 51a:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 51e:	ed 91       	ld	r30, X+
 520:	fc 91       	ld	r31, X
 522:	11 97       	sbiw	r26, 0x01	; 1
 524:	12 96       	adiw	r26, 0x02	; 2
 526:	8d 91       	ld	r24, X+
 528:	9c 91       	ld	r25, X
 52a:	13 97       	sbiw	r26, 0x03	; 3
 52c:	09 95       	icall
        DISABLE();
 52e:	f8 94       	cli
        enqueue(current, &freeQ);
 530:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 534:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
	*/
	PORTB = (1 << PB7) | (1 << PB4);
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 538:	15 96       	adiw	r26, 0x05	; 5
 53a:	1c 92       	st	X, r1
 53c:	1e 92       	st	-X, r1
 53e:	14 97       	sbiw	r26, 0x04	; 4
	
    if (*queue == NULL) {
 540:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <freeQ>
 544:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <freeQ+0x1>
 548:	30 97       	sbiw	r30, 0x00	; 0
 54a:	11 f4       	brne	.+4      	; 0x550 <__stack+0x51>
 54c:	17 c0       	rjmp	.+46     	; 0x57c <__stack+0x7d>
    } else if(current != p){
		p->next = *queue;
		*queue = p;
    }else {
        thread q = *queue;
        while (q->next)
 54e:	fc 01       	movw	r30, r24
 550:	84 81       	ldd	r24, Z+4	; 0x04
 552:	95 81       	ldd	r25, Z+5	; 0x05
 554:	00 97       	sbiw	r24, 0x00	; 0
 556:	d9 f7       	brne	.-10     	; 0x54e <__stack+0x4f>
            q = q->next;
        q->next = p;
 558:	b5 83       	std	Z+5, r27	; 0x05
 55a:	a4 83       	std	Z+4, r26	; 0x04
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 55c:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <readyQ>
 560:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <readyQ+0x1>
    if (*queue) {
 564:	00 97       	sbiw	r24, 0x00	; 0
 566:	a1 f0       	breq	.+40     	; 0x590 <__stack+0x91>
        *queue = (*queue)->next;
 568:	fc 01       	movw	r30, r24
 56a:	24 81       	ldd	r18, Z+4	; 0x04
 56c:	35 81       	ldd	r19, Z+5	; 0x05
 56e:	30 93 24 01 	sts	0x0124, r19	; 0x800124 <readyQ+0x1>
 572:	20 93 23 01 	sts	0x0123, r18	; 0x800123 <readyQ>
    if (setjmp(newp->context) == 1) {
        ENABLE();
        current->function(current->arg);
        DISABLE();
        enqueue(current, &freeQ);
        dispatch(dequeue(&readyQ));
 576:	0e 94 ee 01 	call	0x3dc	; 0x3dc <dispatch>
 57a:	9b cf       	rjmp	.-202    	; 0x4b2 <spawn+0x96>

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
	
    if (*queue == NULL) {
        *queue = p;
 57c:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <freeQ+0x1>
 580:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <freeQ>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 584:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <readyQ>
 588:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <readyQ+0x1>
    if (*queue) {
 58c:	00 97       	sbiw	r24, 0x00	; 0
 58e:	61 f7       	brne	.-40     	; 0x568 <__stack+0x69>
 590:	ff cf       	rjmp	.-2      	; 0x590 <__stack+0x91>

00000592 <lock>:
	enqueue(current, &readyQ);
	dispatch(dequeue(&readyQ));
	ENABLE();
}*/

void lock(mutex *m) {
 592:	cf 93       	push	r28
 594:	df 93       	push	r29
 596:	dc 01       	movw	r26, r24
	DISABLE();
 598:	f8 94       	cli
	
	// If it's unlocked, lock it
	if(m->locked == 0){
 59a:	8d 91       	ld	r24, X+
 59c:	9c 91       	ld	r25, X
 59e:	11 97       	sbiw	r26, 0x01	; 1
 5a0:	89 2b       	or	r24, r25
 5a2:	41 f1       	breq	.+80     	; 0x5f4 <lock+0x62>
	}
	
	// Else - put the current thread in the back of the line of the waitQ
	// and run the first thread in the readyQ
	else{
		enqueue(current, &(m->waitQ));
 5a4:	c0 91 00 01 	lds	r28, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 5a8:	d0 91 01 01 	lds	r29, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
	*/
	PORTB = (1 << PB7) | (1 << PB4);
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 5ac:	1d 82       	std	Y+5, r1	; 0x05
 5ae:	1c 82       	std	Y+4, r1	; 0x04
	
    if (*queue == NULL) {
 5b0:	12 96       	adiw	r26, 0x02	; 2
 5b2:	ed 91       	ld	r30, X+
 5b4:	fc 91       	ld	r31, X
 5b6:	13 97       	sbiw	r26, 0x03	; 3
 5b8:	30 97       	sbiw	r30, 0x00	; 0
 5ba:	11 f4       	brne	.+4      	; 0x5c0 <lock+0x2e>
 5bc:	23 c0       	rjmp	.+70     	; 0x604 <lock+0x72>
    } else if(current != p){
		p->next = *queue;
		*queue = p;
    }else {
        thread q = *queue;
        while (q->next)
 5be:	fc 01       	movw	r30, r24
 5c0:	84 81       	ldd	r24, Z+4	; 0x04
 5c2:	95 81       	ldd	r25, Z+5	; 0x05
 5c4:	00 97       	sbiw	r24, 0x00	; 0
 5c6:	d9 f7       	brne	.-10     	; 0x5be <lock+0x2c>
            q = q->next;
        q->next = p;
 5c8:	d5 83       	std	Z+5, r29	; 0x05
 5ca:	c4 83       	std	Z+4, r28	; 0x04
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 5cc:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <readyQ>
 5d0:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <readyQ+0x1>
    if (*queue) {
 5d4:	00 97       	sbiw	r24, 0x00	; 0
 5d6:	69 f0       	breq	.+26     	; 0x5f2 <lock+0x60>
        *queue = (*queue)->next;
 5d8:	fc 01       	movw	r30, r24
 5da:	24 81       	ldd	r18, Z+4	; 0x04
 5dc:	35 81       	ldd	r19, Z+5	; 0x05
 5de:	30 93 24 01 	sts	0x0124, r19	; 0x800124 <readyQ+0x1>
 5e2:	20 93 23 01 	sts	0x0123, r18	; 0x800123 <readyQ>
	
	// Else - put the current thread in the back of the line of the waitQ
	// and run the first thread in the readyQ
	else{
		enqueue(current, &(m->waitQ));
		dispatch(dequeue(&readyQ));
 5e6:	0e 94 ee 01 	call	0x3dc	; 0x3dc <dispatch>
	}
	ENABLE();
 5ea:	78 94       	sei
}
 5ec:	df 91       	pop	r29
 5ee:	cf 91       	pop	r28
 5f0:	08 95       	ret
 5f2:	ff cf       	rjmp	.-2      	; 0x5f2 <lock+0x60>
void lock(mutex *m) {
	DISABLE();
	
	// If it's unlocked, lock it
	if(m->locked == 0){
		m->locked = 1;
 5f4:	81 e0       	ldi	r24, 0x01	; 1
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	8d 93       	st	X+, r24
 5fa:	9c 93       	st	X, r25
	// and run the first thread in the readyQ
	else{
		enqueue(current, &(m->waitQ));
		dispatch(dequeue(&readyQ));
	}
	ENABLE();
 5fc:	78 94       	sei
}
 5fe:	df 91       	pop	r29
 600:	cf 91       	pop	r28
 602:	08 95       	ret

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
	
    if (*queue == NULL) {
        *queue = p;
 604:	13 96       	adiw	r26, 0x03	; 3
 606:	dc 93       	st	X, r29
 608:	ce 93       	st	-X, r28
 60a:	12 97       	sbiw	r26, 0x02	; 2
 60c:	df cf       	rjmp	.-66     	; 0x5cc <lock+0x3a>

0000060e <unlock>:
		dispatch(dequeue(&readyQ));
	}
	ENABLE();
}

void unlock(mutex *m) {
 60e:	cf 93       	push	r28
 610:	df 93       	push	r29
 612:	fc 01       	movw	r30, r24
	
	DISABLE();
 614:	f8 94       	cli
	
	// If threads are available in the waitQ, put the current thread in the last position of the readyQ
	// and run the first thread in the waitQ
	if(m->waitQ != NULL){
 616:	82 81       	ldd	r24, Z+2	; 0x02
 618:	93 81       	ldd	r25, Z+3	; 0x03
 61a:	89 2b       	or	r24, r25
 61c:	51 f1       	breq	.+84     	; 0x672 <unlock+0x64>
		enqueue(current, &readyQ);
 61e:	c0 91 00 01 	lds	r28, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 622:	d0 91 01 01 	lds	r29, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
	*/
	PORTB = (1 << PB7) | (1 << PB4);
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 626:	1d 82       	std	Y+5, r1	; 0x05
 628:	1c 82       	std	Y+4, r1	; 0x04
	
    if (*queue == NULL) {
 62a:	a0 91 23 01 	lds	r26, 0x0123	; 0x800123 <readyQ>
 62e:	b0 91 24 01 	lds	r27, 0x0124	; 0x800124 <readyQ+0x1>
 632:	10 97       	sbiw	r26, 0x00	; 0
 634:	11 f4       	brne	.+4      	; 0x63a <unlock+0x2c>
 636:	23 c0       	rjmp	.+70     	; 0x67e <unlock+0x70>
    } else if(current != p){
		p->next = *queue;
		*queue = p;
    }else {
        thread q = *queue;
        while (q->next)
 638:	dc 01       	movw	r26, r24
 63a:	14 96       	adiw	r26, 0x04	; 4
 63c:	8d 91       	ld	r24, X+
 63e:	9c 91       	ld	r25, X
 640:	15 97       	sbiw	r26, 0x05	; 5
 642:	00 97       	sbiw	r24, 0x00	; 0
 644:	c9 f7       	brne	.-14     	; 0x638 <unlock+0x2a>
            q = q->next;
        q->next = p;
 646:	15 96       	adiw	r26, 0x05	; 5
 648:	dc 93       	st	X, r29
 64a:	ce 93       	st	-X, r28
 64c:	14 97       	sbiw	r26, 0x04	; 4
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 64e:	82 81       	ldd	r24, Z+2	; 0x02
 650:	93 81       	ldd	r25, Z+3	; 0x03
    if (*queue) {
 652:	00 97       	sbiw	r24, 0x00	; 0
 654:	69 f0       	breq	.+26     	; 0x670 <unlock+0x62>
        *queue = (*queue)->next;
 656:	dc 01       	movw	r26, r24
 658:	14 96       	adiw	r26, 0x04	; 4
 65a:	2d 91       	ld	r18, X+
 65c:	3c 91       	ld	r19, X
 65e:	15 97       	sbiw	r26, 0x05	; 5
 660:	33 83       	std	Z+3, r19	; 0x03
 662:	22 83       	std	Z+2, r18	; 0x02
	
	// If threads are available in the waitQ, put the current thread in the last position of the readyQ
	// and run the first thread in the waitQ
	if(m->waitQ != NULL){
		enqueue(current, &readyQ);
		dispatch(dequeue(&(m->waitQ)));
 664:	0e 94 ee 01 	call	0x3dc	; 0x3dc <dispatch>
	// Else - unlock (put the locked flag to 0)
	else{
		m->locked = 0;
	}
	
	ENABLE();
 668:	78 94       	sei
}
 66a:	df 91       	pop	r29
 66c:	cf 91       	pop	r28
 66e:	08 95       	ret
 670:	ff cf       	rjmp	.-2      	; 0x670 <unlock+0x62>
		dispatch(dequeue(&(m->waitQ)));
	}
	
	// Else - unlock (put the locked flag to 0)
	else{
		m->locked = 0;
 672:	11 82       	std	Z+1, r1	; 0x01
 674:	10 82       	st	Z, r1
	}
	
	ENABLE();
 676:	78 94       	sei
}
 678:	df 91       	pop	r29
 67a:	cf 91       	pop	r28
 67c:	08 95       	ret

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
	
    if (*queue == NULL) {
        *queue = p;
 67e:	d0 93 24 01 	sts	0x0124, r29	; 0x800124 <readyQ+0x1>
 682:	c0 93 23 01 	sts	0x0123, r28	; 0x800123 <readyQ>
 686:	e3 cf       	rjmp	.-58     	; 0x64e <unlock+0x40>

00000688 <__divmodsi4>:
 688:	05 2e       	mov	r0, r21
 68a:	97 fb       	bst	r25, 7
 68c:	1e f4       	brtc	.+6      	; 0x694 <__divmodsi4+0xc>
 68e:	00 94       	com	r0
 690:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <__negsi2>
 694:	57 fd       	sbrc	r21, 7
 696:	07 d0       	rcall	.+14     	; 0x6a6 <__divmodsi4_neg2>
 698:	0e 94 63 03 	call	0x6c6	; 0x6c6 <__udivmodsi4>
 69c:	07 fc       	sbrc	r0, 7
 69e:	03 d0       	rcall	.+6      	; 0x6a6 <__divmodsi4_neg2>
 6a0:	4e f4       	brtc	.+18     	; 0x6b4 <__divmodsi4_exit>
 6a2:	0c 94 5b 03 	jmp	0x6b6	; 0x6b6 <__negsi2>

000006a6 <__divmodsi4_neg2>:
 6a6:	50 95       	com	r21
 6a8:	40 95       	com	r20
 6aa:	30 95       	com	r19
 6ac:	21 95       	neg	r18
 6ae:	3f 4f       	sbci	r19, 0xFF	; 255
 6b0:	4f 4f       	sbci	r20, 0xFF	; 255
 6b2:	5f 4f       	sbci	r21, 0xFF	; 255

000006b4 <__divmodsi4_exit>:
 6b4:	08 95       	ret

000006b6 <__negsi2>:
 6b6:	90 95       	com	r25
 6b8:	80 95       	com	r24
 6ba:	70 95       	com	r23
 6bc:	61 95       	neg	r22
 6be:	7f 4f       	sbci	r23, 0xFF	; 255
 6c0:	8f 4f       	sbci	r24, 0xFF	; 255
 6c2:	9f 4f       	sbci	r25, 0xFF	; 255
 6c4:	08 95       	ret

000006c6 <__udivmodsi4>:
 6c6:	a1 e2       	ldi	r26, 0x21	; 33
 6c8:	1a 2e       	mov	r1, r26
 6ca:	aa 1b       	sub	r26, r26
 6cc:	bb 1b       	sub	r27, r27
 6ce:	fd 01       	movw	r30, r26
 6d0:	0d c0       	rjmp	.+26     	; 0x6ec <__udivmodsi4_ep>

000006d2 <__udivmodsi4_loop>:
 6d2:	aa 1f       	adc	r26, r26
 6d4:	bb 1f       	adc	r27, r27
 6d6:	ee 1f       	adc	r30, r30
 6d8:	ff 1f       	adc	r31, r31
 6da:	a2 17       	cp	r26, r18
 6dc:	b3 07       	cpc	r27, r19
 6de:	e4 07       	cpc	r30, r20
 6e0:	f5 07       	cpc	r31, r21
 6e2:	20 f0       	brcs	.+8      	; 0x6ec <__udivmodsi4_ep>
 6e4:	a2 1b       	sub	r26, r18
 6e6:	b3 0b       	sbc	r27, r19
 6e8:	e4 0b       	sbc	r30, r20
 6ea:	f5 0b       	sbc	r31, r21

000006ec <__udivmodsi4_ep>:
 6ec:	66 1f       	adc	r22, r22
 6ee:	77 1f       	adc	r23, r23
 6f0:	88 1f       	adc	r24, r24
 6f2:	99 1f       	adc	r25, r25
 6f4:	1a 94       	dec	r1
 6f6:	69 f7       	brne	.-38     	; 0x6d2 <__udivmodsi4_loop>
 6f8:	60 95       	com	r22
 6fa:	70 95       	com	r23
 6fc:	80 95       	com	r24
 6fe:	90 95       	com	r25
 700:	9b 01       	movw	r18, r22
 702:	ac 01       	movw	r20, r24
 704:	bd 01       	movw	r22, r26
 706:	cf 01       	movw	r24, r30
 708:	08 95       	ret

0000070a <setjmp>:
 70a:	dc 01       	movw	r26, r24
 70c:	2d 92       	st	X+, r2
 70e:	3d 92       	st	X+, r3
 710:	4d 92       	st	X+, r4
 712:	5d 92       	st	X+, r5
 714:	6d 92       	st	X+, r6
 716:	7d 92       	st	X+, r7
 718:	8d 92       	st	X+, r8
 71a:	9d 92       	st	X+, r9
 71c:	ad 92       	st	X+, r10
 71e:	bd 92       	st	X+, r11
 720:	cd 92       	st	X+, r12
 722:	dd 92       	st	X+, r13
 724:	ed 92       	st	X+, r14
 726:	fd 92       	st	X+, r15
 728:	0d 93       	st	X+, r16
 72a:	1d 93       	st	X+, r17
 72c:	cd 93       	st	X+, r28
 72e:	dd 93       	st	X+, r29
 730:	ff 91       	pop	r31
 732:	ef 91       	pop	r30
 734:	8d b7       	in	r24, 0x3d	; 61
 736:	8d 93       	st	X+, r24
 738:	8e b7       	in	r24, 0x3e	; 62
 73a:	8d 93       	st	X+, r24
 73c:	8f b7       	in	r24, 0x3f	; 63
 73e:	8d 93       	st	X+, r24
 740:	ed 93       	st	X+, r30
 742:	fd 93       	st	X+, r31
 744:	88 27       	eor	r24, r24
 746:	99 27       	eor	r25, r25
 748:	09 94       	ijmp

0000074a <longjmp>:
 74a:	dc 01       	movw	r26, r24
 74c:	cb 01       	movw	r24, r22
 74e:	81 30       	cpi	r24, 0x01	; 1
 750:	91 05       	cpc	r25, r1
 752:	81 1d       	adc	r24, r1
 754:	2d 90       	ld	r2, X+
 756:	3d 90       	ld	r3, X+
 758:	4d 90       	ld	r4, X+
 75a:	5d 90       	ld	r5, X+
 75c:	6d 90       	ld	r6, X+
 75e:	7d 90       	ld	r7, X+
 760:	8d 90       	ld	r8, X+
 762:	9d 90       	ld	r9, X+
 764:	ad 90       	ld	r10, X+
 766:	bd 90       	ld	r11, X+
 768:	cd 90       	ld	r12, X+
 76a:	dd 90       	ld	r13, X+
 76c:	ed 90       	ld	r14, X+
 76e:	fd 90       	ld	r15, X+
 770:	0d 91       	ld	r16, X+
 772:	1d 91       	ld	r17, X+
 774:	cd 91       	ld	r28, X+
 776:	dd 91       	ld	r29, X+
 778:	ed 91       	ld	r30, X+
 77a:	fd 91       	ld	r31, X+
 77c:	0d 90       	ld	r0, X+
 77e:	f8 94       	cli
 780:	fe bf       	out	0x3e, r31	; 62
 782:	0f be       	out	0x3f, r0	; 63
 784:	ed bf       	out	0x3d, r30	; 61
 786:	ed 91       	ld	r30, X+
 788:	fd 91       	ld	r31, X+
 78a:	09 94       	ijmp

0000078c <_exit>:
 78c:	f8 94       	cli

0000078e <__stop_program>:
 78e:	ff cf       	rjmp	.-2      	; 0x78e <__stop_program>
