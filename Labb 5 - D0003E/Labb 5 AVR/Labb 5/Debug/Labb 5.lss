
Labb 5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00002140  000021d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002140  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000353  0080011c  0080011c  000021f0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000021f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002220  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000258  00000000  00000000  00002260  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002b8a  00000000  00000000  000024b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000104d  00000000  00000000  00005042  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001666  00000000  00000000  0000608f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c4c  00000000  00000000  000076f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000974  00000000  00000000  00008344  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000264a  00000000  00000000  00008cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f8  00000000  00000000  0000b302  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
       4:	0c 94 40 05 	jmp	0xa80	; 0xa80 <__vector_1>
       8:	0c 94 af 05 	jmp	0xb5e	; 0xb5e <__vector_2>
       c:	0c 94 1e 06 	jmp	0xc3c	; 0xc3c <__vector_3>
      10:	0c 94 8d 06 	jmp	0xd1a	; 0xd1a <__vector_4>
      14:	0c 94 fc 06 	jmp	0xdf8	; 0xdf8 <__vector_5>
      18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      1c:	0c 94 67 0d 	jmp	0x1ace	; 0x1ace <__vector_7>
      20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      24:	0c 94 15 0d 	jmp	0x1a2a	; 0x1a2a <__vector_9>
      28:	0c 94 6b 07 	jmp	0xed6	; 0xed6 <__vector_10>
      2c:	0c 94 da 07 	jmp	0xfb4	; 0xfb4 <__vector_11>
      30:	0c 94 49 08 	jmp	0x1092	; 0x1092 <__vector_12>
      34:	0c 94 b8 08 	jmp	0x1170	; 0x1170 <__vector_13>
      38:	0c 94 27 09 	jmp	0x124e	; 0x124e <__vector_14>
      3c:	0c 94 96 09 	jmp	0x132c	; 0x132c <__vector_15>
      40:	0c 94 05 0a 	jmp	0x140a	; 0x140a <__vector_16>
      44:	0c 94 74 0a 	jmp	0x14e8	; 0x14e8 <__vector_17>
      48:	0c 94 e3 0a 	jmp	0x15c6	; 0x15c6 <__vector_18>
      4c:	0c 94 52 0b 	jmp	0x16a4	; 0x16a4 <__vector_19>
      50:	0c 94 c1 0b 	jmp	0x1782	; 0x1782 <__vector_20>
      54:	0c 94 30 0c 	jmp	0x1860	; 0x1860 <__vector_21>
      58:	0c 94 9f 0c 	jmp	0x193e	; 0x193e <__vector_22>

0000005c <__ctors_end>:
      5c:	11 24       	eor	r1, r1
      5e:	1f be       	out	0x3f, r1	; 63
      60:	cf ef       	ldi	r28, 0xFF	; 255
      62:	d4 e0       	ldi	r29, 0x04	; 4
      64:	de bf       	out	0x3e, r29	; 62
      66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
      68:	11 e0       	ldi	r17, 0x01	; 1
      6a:	a0 e0       	ldi	r26, 0x00	; 0
      6c:	b1 e0       	ldi	r27, 0x01	; 1
      6e:	e0 e4       	ldi	r30, 0x40	; 64
      70:	f1 e2       	ldi	r31, 0x21	; 33
      72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
      74:	05 90       	lpm	r0, Z+
      76:	0d 92       	st	X+, r0
      78:	ac 31       	cpi	r26, 0x1C	; 28
      7a:	b1 07       	cpc	r27, r17
      7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
      7e:	24 e0       	ldi	r18, 0x04	; 4
      80:	ac e1       	ldi	r26, 0x1C	; 28
      82:	b1 e0       	ldi	r27, 0x01	; 1
      84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
      86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
      88:	af 36       	cpi	r26, 0x6F	; 111
      8a:	b2 07       	cpc	r27, r18
      8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
      8e:	0e 94 46 03 	call	0x68c	; 0x68c <main>
      92:	0c 94 9e 10 	jmp	0x213c	; 0x213c <_exit>

00000096 <__bad_interrupt>:
      96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <carLeave>:
		}
	}
	updateDisp(self);
}

void carLeave(Bridge *self){
      9a:	fc 01       	movw	r30, r24
	if(self->carsOnBridge > 0){
      9c:	84 81       	ldd	r24, Z+4	; 0x04
      9e:	95 81       	ldd	r25, Z+5	; 0x05
      a0:	18 16       	cp	r1, r24
      a2:	19 06       	cpc	r1, r25
      a4:	44 f4       	brge	.+16     	; 0xb6 <carLeave+0x1c>
		self->carsOnBridge--;
      a6:	01 97       	sbiw	r24, 0x01	; 1
      a8:	95 83       	std	Z+5, r25	; 0x05
      aa:	84 83       	std	Z+4, r24	; 0x04
		self->carspassed++;
      ac:	86 85       	ldd	r24, Z+14	; 0x0e
      ae:	97 85       	ldd	r25, Z+15	; 0x0f
      b0:	01 96       	adiw	r24, 0x01	; 1
      b2:	97 87       	std	Z+15, r25	; 0x0f
      b4:	86 87       	std	Z+14, r24	; 0x0e
      b6:	08 95       	ret

000000b8 <changeSouth>:
	}
}

void changeSouth(Bridge *self){
	self->southLight = 1;
      b8:	21 e0       	ldi	r18, 0x01	; 1
      ba:	30 e0       	ldi	r19, 0x00	; 0
      bc:	fc 01       	movw	r30, r24
      be:	33 87       	std	Z+11, r19	; 0x0b
      c0:	22 87       	std	Z+10, r18	; 0x0a
      c2:	08 95       	ret

000000c4 <changeNorth>:
}

void changeNorth(Bridge *self){
	self->northLight = 1;
      c4:	21 e0       	ldi	r18, 0x01	; 1
      c6:	30 e0       	ldi	r19, 0x00	; 0
      c8:	fc 01       	movw	r30, r24
      ca:	35 87       	std	Z+13, r19	; 0x0d
      cc:	24 87       	std	Z+12, r18	; 0x0c
      ce:	08 95       	ret

000000d0 <changeDirection>:
		carRun(self);
		LCDDR8 = 1;
	}
}

void changeDirection(Bridge *self){
      d0:	cf 92       	push	r12
      d2:	df 92       	push	r13
      d4:	ef 92       	push	r14
      d6:	ff 92       	push	r15
      d8:	0f 93       	push	r16
      da:	1f 93       	push	r17
      dc:	cf 93       	push	r28
      de:	df 93       	push	r29
      e0:	ec 01       	movw	r28, r24
	if((self->queueNorth == 0) && (self->queueSouth == 0)){
      e2:	88 85       	ldd	r24, Y+8	; 0x08
      e4:	99 85       	ldd	r25, Y+9	; 0x09
      e6:	89 2b       	or	r24, r25
      e8:	c9 f4       	brne	.+50     	; 0x11c <changeDirection+0x4c>
      ea:	8e 81       	ldd	r24, Y+6	; 0x06
      ec:	9f 81       	ldd	r25, Y+7	; 0x07
      ee:	89 2b       	or	r24, r25
      f0:	a9 f4       	brne	.+42     	; 0x11c <changeDirection+0x4c>
		ASYNC(self->outputs, transmit, 2);
      f2:	0a 89       	ldd	r16, Y+18	; 0x12
      f4:	1b 89       	ldd	r17, Y+19	; 0x13
      f6:	68 94       	set
      f8:	cc 24       	eor	r12, r12
      fa:	c1 f8       	bld	r12, 1
      fc:	d1 2c       	mov	r13, r1
      fe:	0f 2e       	mov	r0, r31
     100:	f9 e9       	ldi	r31, 0x99	; 153
     102:	ef 2e       	mov	r14, r31
     104:	f3 e0       	ldi	r31, 0x03	; 3
     106:	ff 2e       	mov	r15, r31
     108:	f0 2d       	mov	r31, r0
     10a:	20 e0       	ldi	r18, 0x00	; 0
     10c:	30 e0       	ldi	r19, 0x00	; 0
     10e:	a9 01       	movw	r20, r18
     110:	60 e0       	ldi	r22, 0x00	; 0
     112:	70 e0       	ldi	r23, 0x00	; 0
     114:	cb 01       	movw	r24, r22
     116:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <async>
     11a:	54 c0       	rjmp	.+168    	; 0x1c4 <changeDirection+0xf4>
	}else if (self->southLight){
     11c:	8a 85       	ldd	r24, Y+10	; 0x0a
     11e:	9b 85       	ldd	r25, Y+11	; 0x0b
     120:	89 2b       	or	r24, r25
     122:	29 f1       	breq	.+74     	; 0x16e <changeDirection+0x9e>
		self->southLight = 0;
     124:	1b 86       	std	Y+11, r1	; 0x0b
     126:	1a 86       	std	Y+10, r1	; 0x0a
		AFTER(MSEC(5000), self, changeNorth, NULL);
     128:	c1 2c       	mov	r12, r1
     12a:	d1 2c       	mov	r13, r1
     12c:	0f 2e       	mov	r0, r31
     12e:	f2 e6       	ldi	r31, 0x62	; 98
     130:	ef 2e       	mov	r14, r31
     132:	f0 e0       	ldi	r31, 0x00	; 0
     134:	ff 2e       	mov	r15, r31
     136:	f0 2d       	mov	r31, r0
     138:	8e 01       	movw	r16, r28
     13a:	20 e0       	ldi	r18, 0x00	; 0
     13c:	30 e0       	ldi	r19, 0x00	; 0
     13e:	a9 01       	movw	r20, r18
     140:	6a e5       	ldi	r22, 0x5A	; 90
     142:	72 e6       	ldi	r23, 0x62	; 98
     144:	82 e0       	ldi	r24, 0x02	; 2
     146:	90 e0       	ldi	r25, 0x00	; 0
     148:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <async>
		ASYNC(self->outputs, transmit, 0);
     14c:	0a 89       	ldd	r16, Y+18	; 0x12
     14e:	1b 89       	ldd	r17, Y+19	; 0x13
     150:	0f 2e       	mov	r0, r31
     152:	f9 e9       	ldi	r31, 0x99	; 153
     154:	ef 2e       	mov	r14, r31
     156:	f3 e0       	ldi	r31, 0x03	; 3
     158:	ff 2e       	mov	r15, r31
     15a:	f0 2d       	mov	r31, r0
     15c:	20 e0       	ldi	r18, 0x00	; 0
     15e:	30 e0       	ldi	r19, 0x00	; 0
     160:	a9 01       	movw	r20, r18
     162:	60 e0       	ldi	r22, 0x00	; 0
     164:	70 e0       	ldi	r23, 0x00	; 0
     166:	cb 01       	movw	r24, r22
     168:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <async>
     16c:	2b c0       	rjmp	.+86     	; 0x1c4 <changeDirection+0xf4>
	}else if (self->northLight){
     16e:	8c 85       	ldd	r24, Y+12	; 0x0c
     170:	9d 85       	ldd	r25, Y+13	; 0x0d
     172:	89 2b       	or	r24, r25
     174:	39 f1       	breq	.+78     	; 0x1c4 <changeDirection+0xf4>
		self->northLight = 0;
     176:	1d 86       	std	Y+13, r1	; 0x0d
     178:	1c 86       	std	Y+12, r1	; 0x0c
		AFTER(MSEC(5000), self, changeSouth, NULL);
     17a:	c1 2c       	mov	r12, r1
     17c:	d1 2c       	mov	r13, r1
     17e:	0f 2e       	mov	r0, r31
     180:	fc e5       	ldi	r31, 0x5C	; 92
     182:	ef 2e       	mov	r14, r31
     184:	f0 e0       	ldi	r31, 0x00	; 0
     186:	ff 2e       	mov	r15, r31
     188:	f0 2d       	mov	r31, r0
     18a:	8e 01       	movw	r16, r28
     18c:	20 e0       	ldi	r18, 0x00	; 0
     18e:	30 e0       	ldi	r19, 0x00	; 0
     190:	a9 01       	movw	r20, r18
     192:	6a e5       	ldi	r22, 0x5A	; 90
     194:	72 e6       	ldi	r23, 0x62	; 98
     196:	82 e0       	ldi	r24, 0x02	; 2
     198:	90 e0       	ldi	r25, 0x00	; 0
     19a:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <async>
		ASYNC(self->outputs, transmit, 1);
     19e:	0a 89       	ldd	r16, Y+18	; 0x12
     1a0:	1b 89       	ldd	r17, Y+19	; 0x13
     1a2:	cc 24       	eor	r12, r12
     1a4:	c3 94       	inc	r12
     1a6:	d1 2c       	mov	r13, r1
     1a8:	0f 2e       	mov	r0, r31
     1aa:	f9 e9       	ldi	r31, 0x99	; 153
     1ac:	ef 2e       	mov	r14, r31
     1ae:	f3 e0       	ldi	r31, 0x03	; 3
     1b0:	ff 2e       	mov	r15, r31
     1b2:	f0 2d       	mov	r31, r0
     1b4:	20 e0       	ldi	r18, 0x00	; 0
     1b6:	30 e0       	ldi	r19, 0x00	; 0
     1b8:	a9 01       	movw	r20, r18
     1ba:	60 e0       	ldi	r22, 0x00	; 0
     1bc:	70 e0       	ldi	r23, 0x00	; 0
     1be:	cb 01       	movw	r24, r22
     1c0:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <async>
	}
}
     1c4:	df 91       	pop	r29
     1c6:	cf 91       	pop	r28
     1c8:	1f 91       	pop	r17
     1ca:	0f 91       	pop	r16
     1cc:	ff 90       	pop	r15
     1ce:	ef 90       	pop	r14
     1d0:	df 90       	pop	r13
     1d2:	cf 90       	pop	r12
     1d4:	08 95       	ret

000001d6 <updateDisp>:

void changeNorth(Bridge *self){
	self->northLight = 1;
}

void updateDisp(Bridge *self){
     1d6:	cf 92       	push	r12
     1d8:	df 92       	push	r13
     1da:	ef 92       	push	r14
     1dc:	ff 92       	push	r15
     1de:	0f 93       	push	r16
     1e0:	1f 93       	push	r17
     1e2:	cf 93       	push	r28
     1e4:	df 93       	push	r29
     1e6:	ec 01       	movw	r28, r24
	ASYNC(self->gui, setleft, self->queueSouth);
     1e8:	08 89       	ldd	r16, Y+16	; 0x10
     1ea:	19 89       	ldd	r17, Y+17	; 0x11
     1ec:	ce 80       	ldd	r12, Y+6	; 0x06
     1ee:	df 80       	ldd	r13, Y+7	; 0x07
     1f0:	0f 2e       	mov	r0, r31
     1f2:	f0 eb       	ldi	r31, 0xB0	; 176
     1f4:	ef 2e       	mov	r14, r31
     1f6:	f2 e0       	ldi	r31, 0x02	; 2
     1f8:	ff 2e       	mov	r15, r31
     1fa:	f0 2d       	mov	r31, r0
     1fc:	20 e0       	ldi	r18, 0x00	; 0
     1fe:	30 e0       	ldi	r19, 0x00	; 0
     200:	a9 01       	movw	r20, r18
     202:	60 e0       	ldi	r22, 0x00	; 0
     204:	70 e0       	ldi	r23, 0x00	; 0
     206:	cb 01       	movw	r24, r22
     208:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <async>
	ASYNC(self->gui, setmiddle, self->carsOnBridge);
     20c:	08 89       	ldd	r16, Y+16	; 0x10
     20e:	19 89       	ldd	r17, Y+17	; 0x11
     210:	cc 80       	ldd	r12, Y+4	; 0x04
     212:	dd 80       	ldd	r13, Y+5	; 0x05
     214:	0f 2e       	mov	r0, r31
     216:	f9 eb       	ldi	r31, 0xB9	; 185
     218:	ef 2e       	mov	r14, r31
     21a:	f2 e0       	ldi	r31, 0x02	; 2
     21c:	ff 2e       	mov	r15, r31
     21e:	f0 2d       	mov	r31, r0
     220:	20 e0       	ldi	r18, 0x00	; 0
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	a9 01       	movw	r20, r18
     226:	60 e0       	ldi	r22, 0x00	; 0
     228:	70 e0       	ldi	r23, 0x00	; 0
     22a:	cb 01       	movw	r24, r22
     22c:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <async>
	ASYNC(self->gui, setright, self->queueNorth);
     230:	08 89       	ldd	r16, Y+16	; 0x10
     232:	19 89       	ldd	r17, Y+17	; 0x11
     234:	c8 84       	ldd	r12, Y+8	; 0x08
     236:	d9 84       	ldd	r13, Y+9	; 0x09
     238:	0f 2e       	mov	r0, r31
     23a:	f2 ec       	ldi	r31, 0xC2	; 194
     23c:	ef 2e       	mov	r14, r31
     23e:	f2 e0       	ldi	r31, 0x02	; 2
     240:	ff 2e       	mov	r15, r31
     242:	f0 2d       	mov	r31, r0
     244:	20 e0       	ldi	r18, 0x00	; 0
     246:	30 e0       	ldi	r19, 0x00	; 0
     248:	a9 01       	movw	r20, r18
     24a:	60 e0       	ldi	r22, 0x00	; 0
     24c:	70 e0       	ldi	r23, 0x00	; 0
     24e:	cb 01       	movw	r24, r22
     250:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <async>
     254:	df 91       	pop	r29
     256:	cf 91       	pop	r28
     258:	1f 91       	pop	r17
     25a:	0f 91       	pop	r16
     25c:	ff 90       	pop	r15
     25e:	ef 90       	pop	r14
     260:	df 90       	pop	r13
     262:	cf 90       	pop	r12
     264:	08 95       	ret

00000266 <carRun>:
		AFTER(MSEC(5000), self, changeSouth, NULL);
		ASYNC(self->outputs, transmit, 1);
	}
}

void carRun(Bridge *self){
     266:	cf 92       	push	r12
     268:	df 92       	push	r13
     26a:	ef 92       	push	r14
     26c:	ff 92       	push	r15
     26e:	0f 93       	push	r16
     270:	1f 93       	push	r17
     272:	cf 93       	push	r28
     274:	df 93       	push	r29
     276:	ec 01       	movw	r28, r24
	if((self->southLight == 1) && (self->queueSouth > 0)){			//left
     278:	8a 85       	ldd	r24, Y+10	; 0x0a
     27a:	9b 85       	ldd	r25, Y+11	; 0x0b
     27c:	01 97       	sbiw	r24, 0x01	; 1
     27e:	71 f5       	brne	.+92     	; 0x2dc <carRun+0x76>
     280:	8e 81       	ldd	r24, Y+6	; 0x06
     282:	9f 81       	ldd	r25, Y+7	; 0x07
     284:	18 16       	cp	r1, r24
     286:	19 06       	cpc	r1, r25
     288:	4c f5       	brge	.+82     	; 0x2dc <carRun+0x76>
		self->queueSouth--;
     28a:	01 97       	sbiw	r24, 0x01	; 1
     28c:	9f 83       	std	Y+7, r25	; 0x07
     28e:	8e 83       	std	Y+6, r24	; 0x06
		self->carsOnBridge++;
     290:	8c 81       	ldd	r24, Y+4	; 0x04
     292:	9d 81       	ldd	r25, Y+5	; 0x05
     294:	01 96       	adiw	r24, 0x01	; 1
     296:	9d 83       	std	Y+5, r25	; 0x05
     298:	8c 83       	std	Y+4, r24	; 0x04
		AFTER(MSEC(5000), self, carLeave, NULL);
     29a:	c1 2c       	mov	r12, r1
     29c:	d1 2c       	mov	r13, r1
     29e:	0f 2e       	mov	r0, r31
     2a0:	fd e4       	ldi	r31, 0x4D	; 77
     2a2:	ef 2e       	mov	r14, r31
     2a4:	f0 e0       	ldi	r31, 0x00	; 0
     2a6:	ff 2e       	mov	r15, r31
     2a8:	f0 2d       	mov	r31, r0
     2aa:	8e 01       	movw	r16, r28
     2ac:	20 e0       	ldi	r18, 0x00	; 0
     2ae:	30 e0       	ldi	r19, 0x00	; 0
     2b0:	a9 01       	movw	r20, r18
     2b2:	6a e5       	ldi	r22, 0x5A	; 90
     2b4:	72 e6       	ldi	r23, 0x62	; 98
     2b6:	82 e0       	ldi	r24, 0x02	; 2
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <async>
		if((self->carspassed >= 5) && (self->queueNorth > 0)){ // 5 bilar + 5 sekunder(5 bilar till) blir 10 bilar
     2be:	8e 85       	ldd	r24, Y+14	; 0x0e
     2c0:	9f 85       	ldd	r25, Y+15	; 0x0f
     2c2:	05 97       	sbiw	r24, 0x05	; 5
     2c4:	e4 f1       	brlt	.+120    	; 0x33e <carRun+0xd8>
     2c6:	88 85       	ldd	r24, Y+8	; 0x08
     2c8:	99 85       	ldd	r25, Y+9	; 0x09
     2ca:	18 16       	cp	r1, r24
     2cc:	19 06       	cpc	r1, r25
     2ce:	bc f5       	brge	.+110    	; 0x33e <carRun+0xd8>
			self->carspassed = 0;
     2d0:	1f 86       	std	Y+15, r1	; 0x0f
     2d2:	1e 86       	std	Y+14, r1	; 0x0e
			changeDirection(self);
     2d4:	ce 01       	movw	r24, r28
     2d6:	0e 94 68 00 	call	0xd0	; 0xd0 <changeDirection>
     2da:	31 c0       	rjmp	.+98     	; 0x33e <carRun+0xd8>
		}
	}else if((self->northLight == 1) && (self->queueNorth > 0)){	//right
     2dc:	8c 85       	ldd	r24, Y+12	; 0x0c
     2de:	9d 85       	ldd	r25, Y+13	; 0x0d
     2e0:	01 97       	sbiw	r24, 0x01	; 1
     2e2:	69 f5       	brne	.+90     	; 0x33e <carRun+0xd8>
     2e4:	88 85       	ldd	r24, Y+8	; 0x08
     2e6:	99 85       	ldd	r25, Y+9	; 0x09
     2e8:	18 16       	cp	r1, r24
     2ea:	19 06       	cpc	r1, r25
     2ec:	44 f5       	brge	.+80     	; 0x33e <carRun+0xd8>
		self->queueNorth--;
     2ee:	01 97       	sbiw	r24, 0x01	; 1
     2f0:	99 87       	std	Y+9, r25	; 0x09
     2f2:	88 87       	std	Y+8, r24	; 0x08
		self->carsOnBridge++;
     2f4:	8c 81       	ldd	r24, Y+4	; 0x04
     2f6:	9d 81       	ldd	r25, Y+5	; 0x05
     2f8:	01 96       	adiw	r24, 0x01	; 1
     2fa:	9d 83       	std	Y+5, r25	; 0x05
     2fc:	8c 83       	std	Y+4, r24	; 0x04
		AFTER(MSEC(5000), self, carLeave, NULL);
     2fe:	c1 2c       	mov	r12, r1
     300:	d1 2c       	mov	r13, r1
     302:	0f 2e       	mov	r0, r31
     304:	fd e4       	ldi	r31, 0x4D	; 77
     306:	ef 2e       	mov	r14, r31
     308:	f0 e0       	ldi	r31, 0x00	; 0
     30a:	ff 2e       	mov	r15, r31
     30c:	f0 2d       	mov	r31, r0
     30e:	8e 01       	movw	r16, r28
     310:	20 e0       	ldi	r18, 0x00	; 0
     312:	30 e0       	ldi	r19, 0x00	; 0
     314:	a9 01       	movw	r20, r18
     316:	6a e5       	ldi	r22, 0x5A	; 90
     318:	72 e6       	ldi	r23, 0x62	; 98
     31a:	82 e0       	ldi	r24, 0x02	; 2
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <async>
		if((self->carspassed >= 5) && (self->queueSouth > 0)) { // 5 bilar + 5 sekunder(5 bilar till) blir 10 bilar
     322:	8e 85       	ldd	r24, Y+14	; 0x0e
     324:	9f 85       	ldd	r25, Y+15	; 0x0f
     326:	05 97       	sbiw	r24, 0x05	; 5
     328:	54 f0       	brlt	.+20     	; 0x33e <carRun+0xd8>
     32a:	8e 81       	ldd	r24, Y+6	; 0x06
     32c:	9f 81       	ldd	r25, Y+7	; 0x07
     32e:	18 16       	cp	r1, r24
     330:	19 06       	cpc	r1, r25
     332:	2c f4       	brge	.+10     	; 0x33e <carRun+0xd8>
			self->carspassed = 0;
     334:	1f 86       	std	Y+15, r1	; 0x0f
     336:	1e 86       	std	Y+14, r1	; 0x0e
			changeDirection(self);
     338:	ce 01       	movw	r24, r28
     33a:	0e 94 68 00 	call	0xd0	; 0xd0 <changeDirection>
		}
	}
	updateDisp(self);
     33e:	ce 01       	movw	r24, r28
     340:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <updateDisp>
}
     344:	df 91       	pop	r29
     346:	cf 91       	pop	r28
     348:	1f 91       	pop	r17
     34a:	0f 91       	pop	r16
     34c:	ff 90       	pop	r15
     34e:	ef 90       	pop	r14
     350:	df 90       	pop	r13
     352:	cf 90       	pop	r12
     354:	08 95       	ret

00000356 <addcar>:
#include <stdbool.h>
#include "Bridge.h"


void addcar(Bridge *self, int sensor){
	if (sensor == 0x4){
     356:	64 30       	cpi	r22, 0x04	; 4
     358:	71 05       	cpc	r23, r1
     35a:	41 f4       	brne	.+16     	; 0x36c <addcar+0x16>
		self->queueSouth++;
     35c:	fc 01       	movw	r30, r24
     35e:	26 81       	ldd	r18, Z+6	; 0x06
     360:	37 81       	ldd	r19, Z+7	; 0x07
     362:	2f 5f       	subi	r18, 0xFF	; 255
     364:	3f 4f       	sbci	r19, 0xFF	; 255
     366:	37 83       	std	Z+7, r19	; 0x07
     368:	26 83       	std	Z+6, r18	; 0x06
     36a:	08 95       	ret
	}
	else if(sensor == 0x1){
     36c:	61 30       	cpi	r22, 0x01	; 1
     36e:	71 05       	cpc	r23, r1
     370:	41 f4       	brne	.+16     	; 0x382 <addcar+0x2c>
		self->queueNorth++;
     372:	fc 01       	movw	r30, r24
     374:	20 85       	ldd	r18, Z+8	; 0x08
     376:	31 85       	ldd	r19, Z+9	; 0x09
     378:	2f 5f       	subi	r18, 0xFF	; 255
     37a:	3f 4f       	sbci	r19, 0xFF	; 255
     37c:	31 87       	std	Z+9, r19	; 0x09
     37e:	20 87       	std	Z+8, r18	; 0x08
     380:	08 95       	ret
	}
	else if(sensor == (0x8 || 0x2)){
     382:	61 30       	cpi	r22, 0x01	; 1
     384:	71 05       	cpc	r23, r1
     386:	29 f4       	brne	.+10     	; 0x392 <addcar+0x3c>
		carRun(self);
     388:	0e 94 33 01 	call	0x266	; 0x266 <carRun>
		LCDDR8 = 1;
     38c:	81 e0       	ldi	r24, 0x01	; 1
     38e:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7fc0f4>
     392:	08 95       	ret

00000394 <USART_Init>:
	
	#define FOCS 8000000
	#define BAUD 9600
	#define MYUBRR (FOCS/16/BAUD-1)
	
	UBRR0H = (unsigned char) (MYUBRR>>8);
     394:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7fc0c5>
	UBRR0L = (unsigned char) MYUBRR;
     398:	83 e3       	ldi	r24, 0x33	; 51
     39a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7fc0c4>
	
	UCSR0B = (1 << TXEN0) | (1 << RXCIE0) | (1 << RXEN0);
     39e:	88 e9       	ldi	r24, 0x98	; 152
     3a0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7fc0c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
     3a4:	86 e0       	ldi	r24, 0x06	; 6
     3a6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7fc0c2>
     3aa:	08 95       	ret

000003ac <writeChar>:
	writeChar( (num % 100) / 10 + '0', pp);
	pp++;
	writeChar( num % 10 + '0', pp);
}

void writeChar(char ch, int pos){
     3ac:	cf 93       	push	r28
     3ae:	df 93       	push	r29
     3b0:	cd b7       	in	r28, 0x3d	; 61
     3b2:	de b7       	in	r29, 0x3e	; 62
     3b4:	64 97       	sbiw	r28, 0x14	; 20
     3b6:	0f b6       	in	r0, 0x3f	; 63
     3b8:	f8 94       	cli
     3ba:	de bf       	out	0x3e, r29	; 62
     3bc:	0f be       	out	0x3f, r0	; 63
     3be:	cd bf       	out	0x3d, r28	; 61
	// All the numbers
	// 0 - 0x1551, 1 - 0x0110, 2 - 0x1E11, 3 - 0x1B11, 4 - 0x0B50, 5 - 0x1B41, 6 - 0x1F41, 7 - 0x0111, 8 - 0x1F51, 9 - 0x0B51
	uint16_t scc[] = {0x1551, 0x0110, 0x1E11, 0x1B11, 0x0B50, 0x1B41, 0x1F41, 0x0111, 0x1F51, 0x0B51};
     3c0:	94 e1       	ldi	r25, 0x14	; 20
     3c2:	e8 e0       	ldi	r30, 0x08	; 8
     3c4:	f1 e0       	ldi	r31, 0x01	; 1
     3c6:	de 01       	movw	r26, r28
     3c8:	11 96       	adiw	r26, 0x01	; 1
     3ca:	01 90       	ld	r0, Z+
     3cc:	0d 92       	st	X+, r0
     3ce:	9a 95       	dec	r25
     3d0:	e1 f7       	brne	.-8      	; 0x3ca <writeChar+0x1e>
	
	if(pos >= 0 && pos <= 5){
     3d2:	66 30       	cpi	r22, 0x06	; 6
     3d4:	71 05       	cpc	r23, r1
     3d6:	08 f0       	brcs	.+2      	; 0x3da <writeChar+0x2e>
     3d8:	54 c0       	rjmp	.+168    	; 0x482 <__DATA_REGION_LENGTH__+0x82>
		if (ch >= '0' || ch <= '9'){
			int pair = pos / 2;					      // Make sure it's either pair 0,1 - 2,3 or 4,5
     3da:	fb 01       	movw	r30, r22
     3dc:	77 23       	and	r23, r23
     3de:	0c f4       	brge	.+2      	; 0x3e2 <writeChar+0x36>
     3e0:	31 96       	adiw	r30, 0x01	; 1
     3e2:	f5 95       	asr	r31
     3e4:	e7 95       	ror	r30
			uint8_t *lcddr = (uint8_t *) 0xEC + pair; // Point to register position 0xEC which is LCDDR0 and add pair to get LCDDR0, LCDDR1 or LCDDR2
     3e6:	e4 51       	subi	r30, 0x14	; 20
     3e8:	ff 4f       	sbci	r31, 0xFF	; 255
			uint16_t num = scc[ch - '0'];			  // Get the hexadecimal number from the list
     3ea:	a8 2f       	mov	r26, r24
     3ec:	b0 e0       	ldi	r27, 0x00	; 0
     3ee:	d0 97       	sbiw	r26, 0x30	; 48
     3f0:	aa 0f       	add	r26, r26
     3f2:	bb 1f       	adc	r27, r27
     3f4:	81 e0       	ldi	r24, 0x01	; 1
     3f6:	90 e0       	ldi	r25, 0x00	; 0
     3f8:	8c 0f       	add	r24, r28
     3fa:	9d 1f       	adc	r25, r29
     3fc:	a8 0f       	add	r26, r24
     3fe:	b9 1f       	adc	r27, r25
     400:	0d 90       	ld	r0, X+
     402:	bc 91       	ld	r27, X
     404:	a0 2d       	mov	r26, r0
			for (int i = 0; i <= 3; i++) {			  // Loop through every number in the hexadecimal number
     406:	40 e0       	ldi	r20, 0x00	; 0
     408:	50 e0       	ldi	r21, 0x00	; 0
     40a:	38 c0       	rjmp	.+112    	; 0x47c <__DATA_REGION_LENGTH__+0x7c>
				int nibble = num & 0xF;				  // Get the least significant number in the hex
     40c:	cd 01       	movw	r24, r26
     40e:	8f 70       	andi	r24, 0x0F	; 15
     410:	99 27       	eor	r25, r25
				
				if(pos % 2 == 1) {				      // Check if the nibble parts should be in the left or right number in the pair
     412:	9b 01       	movw	r18, r22
     414:	21 70       	andi	r18, 0x01	; 1
     416:	30 78       	andi	r19, 0x80	; 128
     418:	33 23       	and	r19, r19
     41a:	34 f4       	brge	.+12     	; 0x428 <__DATA_REGION_LENGTH__+0x28>
     41c:	21 50       	subi	r18, 0x01	; 1
     41e:	31 09       	sbc	r19, r1
     420:	2e 6f       	ori	r18, 0xFE	; 254
     422:	3f 6f       	ori	r19, 0xFF	; 255
     424:	2f 5f       	subi	r18, 0xFF	; 255
     426:	3f 4f       	sbci	r19, 0xFF	; 255
     428:	21 30       	cpi	r18, 0x01	; 1
     42a:	31 05       	cpc	r19, r1
     42c:	89 f4       	brne	.+34     	; 0x450 <__DATA_REGION_LENGTH__+0x50>
					nibble *= 0x10;					  // If pos % 2 == 1 -> nibble will load in right digit
     42e:	82 95       	swap	r24
     430:	92 95       	swap	r25
     432:	90 7f       	andi	r25, 0xF0	; 240
     434:	98 27       	eor	r25, r24
     436:	80 7f       	andi	r24, 0xF0	; 240
     438:	98 27       	eor	r25, r24
					if(lcddr == &LCDDR0){
     43a:	ec 3e       	cpi	r30, 0xEC	; 236
     43c:	f1 05       	cpc	r31, r1
     43e:	21 f4       	brne	.+8      	; 0x448 <__DATA_REGION_LENGTH__+0x48>
						*lcddr = *lcddr & 0xD;
     440:	20 81       	ld	r18, Z
     442:	2d 70       	andi	r18, 0x0D	; 13
     444:	20 83       	st	Z, r18
     446:	0e c0       	rjmp	.+28     	; 0x464 <__DATA_REGION_LENGTH__+0x64>
					}
					else{
						*lcddr = *lcddr & 0xF;
     448:	20 81       	ld	r18, Z
     44a:	2f 70       	andi	r18, 0x0F	; 15
     44c:	20 83       	st	Z, r18
     44e:	0a c0       	rjmp	.+20     	; 0x464 <__DATA_REGION_LENGTH__+0x64>
					}
					}else{
					if(lcddr == &LCDDR0){
     450:	ec 3e       	cpi	r30, 0xEC	; 236
     452:	f1 05       	cpc	r31, r1
     454:	21 f4       	brne	.+8      	; 0x45e <__DATA_REGION_LENGTH__+0x5e>
						*lcddr = *lcddr & 0xD0;
     456:	20 81       	ld	r18, Z
     458:	20 7d       	andi	r18, 0xD0	; 208
     45a:	20 83       	st	Z, r18
     45c:	03 c0       	rjmp	.+6      	; 0x464 <__DATA_REGION_LENGTH__+0x64>
						}else{
						*lcddr = *lcddr & 0xF0;
     45e:	20 81       	ld	r18, Z
     460:	20 7f       	andi	r18, 0xF0	; 240
     462:	20 83       	st	Z, r18
					}
				}
				
				*lcddr = *lcddr | nibble;			  // Write the nibble to the digit
     464:	90 81       	ld	r25, Z
     466:	89 2b       	or	r24, r25
     468:	80 83       	st	Z, r24
				lcddr += 5;							  // Go to LCDDRx + 5
     46a:	35 96       	adiw	r30, 0x05	; 5
				num /= 0x10;						  // Next nibble
     46c:	b2 95       	swap	r27
     46e:	a2 95       	swap	r26
     470:	af 70       	andi	r26, 0x0F	; 15
     472:	ab 27       	eor	r26, r27
     474:	bf 70       	andi	r27, 0x0F	; 15
     476:	ab 27       	eor	r26, r27
	if(pos >= 0 && pos <= 5){
		if (ch >= '0' || ch <= '9'){
			int pair = pos / 2;					      // Make sure it's either pair 0,1 - 2,3 or 4,5
			uint8_t *lcddr = (uint8_t *) 0xEC + pair; // Point to register position 0xEC which is LCDDR0 and add pair to get LCDDR0, LCDDR1 or LCDDR2
			uint16_t num = scc[ch - '0'];			  // Get the hexadecimal number from the list
			for (int i = 0; i <= 3; i++) {			  // Loop through every number in the hexadecimal number
     478:	4f 5f       	subi	r20, 0xFF	; 255
     47a:	5f 4f       	sbci	r21, 0xFF	; 255
     47c:	44 30       	cpi	r20, 0x04	; 4
     47e:	51 05       	cpc	r21, r1
     480:	2c f2       	brlt	.-118    	; 0x40c <__DATA_REGION_LENGTH__+0xc>
				lcddr += 5;							  // Go to LCDDRx + 5
				num /= 0x10;						  // Next nibble
			}
		}
	}
}
     482:	64 96       	adiw	r28, 0x14	; 20
     484:	0f b6       	in	r0, 0x3f	; 63
     486:	f8 94       	cli
     488:	de bf       	out	0x3e, r29	; 62
     48a:	0f be       	out	0x3f, r0	; 63
     48c:	cd bf       	out	0x3d, r28	; 61
     48e:	df 91       	pop	r29
     490:	cf 91       	pop	r28
     492:	08 95       	ret

00000494 <printAt>:
	
	UCSR0B = (1 << TXEN0) | (1 << RXCIE0) | (1 << RXEN0);
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
}

void printAt(long num, int pos) {
     494:	8f 92       	push	r8
     496:	9f 92       	push	r9
     498:	af 92       	push	r10
     49a:	bf 92       	push	r11
     49c:	cf 92       	push	r12
     49e:	df 92       	push	r13
     4a0:	ef 92       	push	r14
     4a2:	ff 92       	push	r15
     4a4:	cf 93       	push	r28
     4a6:	df 93       	push	r29
     4a8:	4b 01       	movw	r8, r22
     4aa:	5c 01       	movw	r10, r24
     4ac:	ea 01       	movw	r28, r20
	int pp = pos;
	writeChar( (num % 100) / 10 + '0', pp);
     4ae:	24 e6       	ldi	r18, 0x64	; 100
     4b0:	30 e0       	ldi	r19, 0x00	; 0
     4b2:	40 e0       	ldi	r20, 0x00	; 0
     4b4:	50 e0       	ldi	r21, 0x00	; 0
     4b6:	0e 94 1c 10 	call	0x2038	; 0x2038 <__divmodsi4>
     4ba:	0f 2e       	mov	r0, r31
     4bc:	fa e0       	ldi	r31, 0x0A	; 10
     4be:	cf 2e       	mov	r12, r31
     4c0:	d1 2c       	mov	r13, r1
     4c2:	e1 2c       	mov	r14, r1
     4c4:	f1 2c       	mov	r15, r1
     4c6:	f0 2d       	mov	r31, r0
     4c8:	a7 01       	movw	r20, r14
     4ca:	96 01       	movw	r18, r12
     4cc:	0e 94 1c 10 	call	0x2038	; 0x2038 <__divmodsi4>
     4d0:	be 01       	movw	r22, r28
     4d2:	80 e3       	ldi	r24, 0x30	; 48
     4d4:	82 0f       	add	r24, r18
     4d6:	0e 94 d6 01 	call	0x3ac	; 0x3ac <writeChar>
	pp++;
     4da:	21 96       	adiw	r28, 0x01	; 1
	writeChar( num % 10 + '0', pp);
     4dc:	c5 01       	movw	r24, r10
     4de:	b4 01       	movw	r22, r8
     4e0:	a7 01       	movw	r20, r14
     4e2:	96 01       	movw	r18, r12
     4e4:	0e 94 1c 10 	call	0x2038	; 0x2038 <__divmodsi4>
     4e8:	86 2f       	mov	r24, r22
     4ea:	be 01       	movw	r22, r28
     4ec:	80 5d       	subi	r24, 0xD0	; 208
     4ee:	0e 94 d6 01 	call	0x3ac	; 0x3ac <writeChar>
}
     4f2:	df 91       	pop	r29
     4f4:	cf 91       	pop	r28
     4f6:	ff 90       	pop	r15
     4f8:	ef 90       	pop	r14
     4fa:	df 90       	pop	r13
     4fc:	cf 90       	pop	r12
     4fe:	bf 90       	pop	r11
     500:	af 90       	pop	r10
     502:	9f 90       	pop	r9
     504:	8f 90       	pop	r8
     506:	08 95       	ret

00000508 <LCD_Init>:
		LCDCS    - Asynchronous clock source
		LCDMUX's - Duty = 1/4, Bias = 1/3
		LCDPM's  - Number of Segments = 25
	*/
	
	LCDCRB = (1 << LCDCS) | (1 << LCDMUX1) | (1 << LCDMUX0) | (1 << LCDPM2) | (1 << LCDPM1) | (1 << LCDPM0) | LCDCRB;
     508:	e5 ee       	ldi	r30, 0xE5	; 229
     50a:	f0 e0       	ldi	r31, 0x00	; 0
     50c:	80 81       	ld	r24, Z
     50e:	87 6b       	ori	r24, 0xB7	; 183
     510:	80 83       	st	Z, r24
	/*
		LCD Frame Rate Register:
		LCDCD's - Prescaler setting N = 16
	*/
	
	LCDFRR = (1 << LCDCD2) | (1 << LCDCD1) | (1 << LCDCD0) | LCDFRR;
     512:	e6 ee       	ldi	r30, 0xE6	; 230
     514:	f0 e0       	ldi	r31, 0x00	; 0
     516:	80 81       	ld	r24, Z
     518:	87 60       	ori	r24, 0x07	; 7
     51a:	80 83       	st	Z, r24
		LCD Contrast Control Register
		None of the LCDDC's used = 300 microseconds
		LCDCC's = 3,35V
	*/
	
	LCDCCR = (1 << LCDCC3) | (1 << LCDCC2) | (1 << LCDCC1) | (1 << LCDCC0) | LCDCCR;
     51c:	e7 ee       	ldi	r30, 0xE7	; 231
     51e:	f0 e0       	ldi	r31, 0x00	; 0
     520:	80 81       	ld	r24, Z
     522:	8f 60       	ori	r24, 0x0F	; 15
     524:	80 83       	st	Z, r24
	
	/*
		LCDEN = LCD Enabled
		LCDAB = Low Power Waveform
	*/
	LCDCRA = (1 << LCDEN) | (1 << LCDAB) | LCDCRA;
     526:	e4 ee       	ldi	r30, 0xE4	; 228
     528:	f0 e0       	ldi	r31, 0x00	; 0
     52a:	80 81       	ld	r24, Z
     52c:	80 6c       	ori	r24, 0xC0	; 192
     52e:	80 83       	st	Z, r24
	printAt(0, 0);
     530:	40 e0       	ldi	r20, 0x00	; 0
     532:	50 e0       	ldi	r21, 0x00	; 0
     534:	60 e0       	ldi	r22, 0x00	; 0
     536:	70 e0       	ldi	r23, 0x00	; 0
     538:	cb 01       	movw	r24, r22
     53a:	0e 94 4a 02 	call	0x494	; 0x494 <printAt>
	printAt(0, 2);
     53e:	42 e0       	ldi	r20, 0x02	; 2
     540:	50 e0       	ldi	r21, 0x00	; 0
     542:	60 e0       	ldi	r22, 0x00	; 0
     544:	70 e0       	ldi	r23, 0x00	; 0
     546:	cb 01       	movw	r24, r22
     548:	0e 94 4a 02 	call	0x494	; 0x494 <printAt>
	printAt(0, 4);
     54c:	44 e0       	ldi	r20, 0x04	; 4
     54e:	50 e0       	ldi	r21, 0x00	; 0
     550:	60 e0       	ldi	r22, 0x00	; 0
     552:	70 e0       	ldi	r23, 0x00	; 0
     554:	cb 01       	movw	r24, r22
     556:	0e 94 4a 02 	call	0x494	; 0x494 <printAt>
	
	USART_Init();
     55a:	0e 94 ca 01 	call	0x394	; 0x394 <USART_Init>
     55e:	08 95       	ret

00000560 <setleft>:
}


void setleft(GUI *self, int val){
	//self->leftDisp = val;
	printAt(val, 0);
     560:	07 2e       	mov	r0, r23
     562:	00 0c       	add	r0, r0
     564:	88 0b       	sbc	r24, r24
     566:	99 0b       	sbc	r25, r25
     568:	40 e0       	ldi	r20, 0x00	; 0
     56a:	50 e0       	ldi	r21, 0x00	; 0
     56c:	0e 94 4a 02 	call	0x494	; 0x494 <printAt>
     570:	08 95       	ret

00000572 <setmiddle>:
}
void setmiddle(GUI *self, int val){
	//self->middleDisp = val;
	printAt(val, 2);
     572:	07 2e       	mov	r0, r23
     574:	00 0c       	add	r0, r0
     576:	88 0b       	sbc	r24, r24
     578:	99 0b       	sbc	r25, r25
     57a:	42 e0       	ldi	r20, 0x02	; 2
     57c:	50 e0       	ldi	r21, 0x00	; 0
     57e:	0e 94 4a 02 	call	0x494	; 0x494 <printAt>
     582:	08 95       	ret

00000584 <setright>:
}
void setright(GUI *self, int val){
	//self->rightDisp = val;
	printAt(val, 4);
     584:	07 2e       	mov	r0, r23
     586:	00 0c       	add	r0, r0
     588:	88 0b       	sbc	r24, r24
     58a:	99 0b       	sbc	r25, r25
     58c:	44 e0       	ldi	r20, 0x04	; 4
     58e:	50 e0       	ldi	r21, 0x00	; 0
     590:	0e 94 4a 02 	call	0x494	; 0x494 <printAt>
     594:	08 95       	ret

00000596 <newcar>:
#define bit3 (1 << 2)
#define bit4 (1 << 3)



void newcar(Inputs *self){
     596:	cf 92       	push	r12
     598:	df 92       	push	r13
     59a:	ef 92       	push	r14
     59c:	ff 92       	push	r15
     59e:	0f 93       	push	r16
     5a0:	1f 93       	push	r17
     5a2:	cf 93       	push	r28
     5a4:	df 93       	push	r29
     5a6:	1f 92       	push	r1
     5a8:	cd b7       	in	r28, 0x3d	; 61
     5aa:	de b7       	in	r29, 0x3e	; 62
     5ac:	fc 01       	movw	r30, r24
	while( ! (UCSR0A & (1 << RXC0)));
     5ae:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7fc0c0>
     5b2:	99 23       	and	r25, r25
     5b4:	e4 f7       	brge	.-8      	; 0x5ae <newcar+0x18>
	volatile uint8_t putin = UDR0;
     5b6:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fc0c6>
     5ba:	99 83       	std	Y+1, r25	; 0x01
	
	if (putin & bit1){
     5bc:	99 81       	ldd	r25, Y+1	; 0x01
     5be:	90 ff       	sbrs	r25, 0
     5c0:	14 c0       	rjmp	.+40     	; 0x5ea <newcar+0x54>
		ASYNC(self->bridge, addcar,bit1);
     5c2:	04 81       	ldd	r16, Z+4	; 0x04
     5c4:	15 81       	ldd	r17, Z+5	; 0x05
     5c6:	cc 24       	eor	r12, r12
     5c8:	c3 94       	inc	r12
     5ca:	d1 2c       	mov	r13, r1
     5cc:	0f 2e       	mov	r0, r31
     5ce:	fb ea       	ldi	r31, 0xAB	; 171
     5d0:	ef 2e       	mov	r14, r31
     5d2:	f1 e0       	ldi	r31, 0x01	; 1
     5d4:	ff 2e       	mov	r15, r31
     5d6:	f0 2d       	mov	r31, r0
     5d8:	20 e0       	ldi	r18, 0x00	; 0
     5da:	30 e0       	ldi	r19, 0x00	; 0
     5dc:	a9 01       	movw	r20, r18
     5de:	60 e0       	ldi	r22, 0x00	; 0
     5e0:	70 e0       	ldi	r23, 0x00	; 0
     5e2:	cb 01       	movw	r24, r22
     5e4:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <async>
     5e8:	47 c0       	rjmp	.+142    	; 0x678 <newcar+0xe2>
	}else if(putin & bit2){
     5ea:	89 81       	ldd	r24, Y+1	; 0x01
     5ec:	81 ff       	sbrs	r24, 1
     5ee:	15 c0       	rjmp	.+42     	; 0x61a <newcar+0x84>
		ASYNC(self->bridge, addcar,bit2);
     5f0:	04 81       	ldd	r16, Z+4	; 0x04
     5f2:	15 81       	ldd	r17, Z+5	; 0x05
     5f4:	68 94       	set
     5f6:	cc 24       	eor	r12, r12
     5f8:	c1 f8       	bld	r12, 1
     5fa:	d1 2c       	mov	r13, r1
     5fc:	0f 2e       	mov	r0, r31
     5fe:	fb ea       	ldi	r31, 0xAB	; 171
     600:	ef 2e       	mov	r14, r31
     602:	f1 e0       	ldi	r31, 0x01	; 1
     604:	ff 2e       	mov	r15, r31
     606:	f0 2d       	mov	r31, r0
     608:	20 e0       	ldi	r18, 0x00	; 0
     60a:	30 e0       	ldi	r19, 0x00	; 0
     60c:	a9 01       	movw	r20, r18
     60e:	60 e0       	ldi	r22, 0x00	; 0
     610:	70 e0       	ldi	r23, 0x00	; 0
     612:	cb 01       	movw	r24, r22
     614:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <async>
     618:	2f c0       	rjmp	.+94     	; 0x678 <newcar+0xe2>
	}else if(putin & bit3){
     61a:	89 81       	ldd	r24, Y+1	; 0x01
     61c:	82 ff       	sbrs	r24, 2
     61e:	15 c0       	rjmp	.+42     	; 0x64a <newcar+0xb4>
		ASYNC(self->bridge, addcar,bit3);
     620:	04 81       	ldd	r16, Z+4	; 0x04
     622:	15 81       	ldd	r17, Z+5	; 0x05
     624:	68 94       	set
     626:	cc 24       	eor	r12, r12
     628:	c2 f8       	bld	r12, 2
     62a:	d1 2c       	mov	r13, r1
     62c:	0f 2e       	mov	r0, r31
     62e:	fb ea       	ldi	r31, 0xAB	; 171
     630:	ef 2e       	mov	r14, r31
     632:	f1 e0       	ldi	r31, 0x01	; 1
     634:	ff 2e       	mov	r15, r31
     636:	f0 2d       	mov	r31, r0
     638:	20 e0       	ldi	r18, 0x00	; 0
     63a:	30 e0       	ldi	r19, 0x00	; 0
     63c:	a9 01       	movw	r20, r18
     63e:	60 e0       	ldi	r22, 0x00	; 0
     640:	70 e0       	ldi	r23, 0x00	; 0
     642:	cb 01       	movw	r24, r22
     644:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <async>
     648:	17 c0       	rjmp	.+46     	; 0x678 <newcar+0xe2>
	}else if(putin & bit4){
     64a:	89 81       	ldd	r24, Y+1	; 0x01
     64c:	83 ff       	sbrs	r24, 3
     64e:	14 c0       	rjmp	.+40     	; 0x678 <newcar+0xe2>
		ASYNC(self->bridge, addcar,bit4);
     650:	04 81       	ldd	r16, Z+4	; 0x04
     652:	15 81       	ldd	r17, Z+5	; 0x05
     654:	68 94       	set
     656:	cc 24       	eor	r12, r12
     658:	c3 f8       	bld	r12, 3
     65a:	d1 2c       	mov	r13, r1
     65c:	0f 2e       	mov	r0, r31
     65e:	fb ea       	ldi	r31, 0xAB	; 171
     660:	ef 2e       	mov	r14, r31
     662:	f1 e0       	ldi	r31, 0x01	; 1
     664:	ff 2e       	mov	r15, r31
     666:	f0 2d       	mov	r31, r0
     668:	20 e0       	ldi	r18, 0x00	; 0
     66a:	30 e0       	ldi	r19, 0x00	; 0
     66c:	a9 01       	movw	r20, r18
     66e:	60 e0       	ldi	r22, 0x00	; 0
     670:	70 e0       	ldi	r23, 0x00	; 0
     672:	cb 01       	movw	r24, r22
     674:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <async>
		//int putin = UDR0;	
		//ASYNC(self->bridge, addcar, putin);
	//}
	
	
     678:	0f 90       	pop	r0
     67a:	df 91       	pop	r29
     67c:	cf 91       	pop	r28
     67e:	1f 91       	pop	r17
     680:	0f 91       	pop	r16
     682:	ff 90       	pop	r15
     684:	ef 90       	pop	r14
     686:	df 90       	pop	r13
     688:	cf 90       	pop	r12
     68a:	08 95       	ret

0000068c <main>:
#include <avr/io.h>
#include "Inputs.h"



int main(void){
     68c:	0f 93       	push	r16
     68e:	1f 93       	push	r17
     690:	cf 93       	push	r28
     692:	df 93       	push	r29
     694:	cd b7       	in	r28, 0x3d	; 61
     696:	de b7       	in	r29, 0x3e	; 62
     698:	a4 97       	sbiw	r28, 0x24	; 36
     69a:	0f b6       	in	r0, 0x3f	; 63
     69c:	f8 94       	cli
     69e:	de bf       	out	0x3e, r29	; 62
     6a0:	0f be       	out	0x3f, r0	; 63
     6a2:	cd bf       	out	0x3d, r28	; 61
	CLKPR = 0x80;
     6a4:	e1 e6       	ldi	r30, 0x61	; 97
     6a6:	f0 e0       	ldi	r31, 0x00	; 0
     6a8:	80 e8       	ldi	r24, 0x80	; 128
     6aa:	80 83       	st	Z, r24
	CLKPR = 0x00;
     6ac:	10 82       	st	Z, r1
	
	GUI gui = initGUI();
     6ae:	1a 82       	std	Y+2, r1	; 0x02
     6b0:	19 82       	std	Y+1, r1	; 0x01
     6b2:	1c 82       	std	Y+4, r1	; 0x04
     6b4:	1b 82       	std	Y+3, r1	; 0x03
	Outputs outputs = initOutputs(0);
     6b6:	1e 82       	std	Y+6, r1	; 0x06
     6b8:	1d 82       	std	Y+5, r1	; 0x05
     6ba:	18 86       	std	Y+8, r1	; 0x08
     6bc:	1f 82       	std	Y+7, r1	; 0x07
     6be:	1a 86       	std	Y+10, r1	; 0x0a
     6c0:	19 86       	std	Y+9, r1	; 0x09
	Bridge bridge = initBridge(0, 0, 0, 0, 0, 0, &gui, &outputs);
     6c2:	1c 86       	std	Y+12, r1	; 0x0c
     6c4:	1b 86       	std	Y+11, r1	; 0x0b
     6c6:	1e 86       	std	Y+14, r1	; 0x0e
     6c8:	1d 86       	std	Y+13, r1	; 0x0d
     6ca:	18 8a       	std	Y+16, r1	; 0x10
     6cc:	1f 86       	std	Y+15, r1	; 0x0f
     6ce:	1a 8a       	std	Y+18, r1	; 0x12
     6d0:	19 8a       	std	Y+17, r1	; 0x11
     6d2:	1c 8a       	std	Y+20, r1	; 0x14
     6d4:	1b 8a       	std	Y+19, r1	; 0x13
     6d6:	1e 8a       	std	Y+22, r1	; 0x16
     6d8:	1d 8a       	std	Y+21, r1	; 0x15
     6da:	18 8e       	std	Y+24, r1	; 0x18
     6dc:	1f 8a       	std	Y+23, r1	; 0x17
     6de:	1a 8e       	std	Y+26, r1	; 0x1a
     6e0:	19 8e       	std	Y+25, r1	; 0x19
     6e2:	8e 01       	movw	r16, r28
     6e4:	0f 5f       	subi	r16, 0xFF	; 255
     6e6:	1f 4f       	sbci	r17, 0xFF	; 255
     6e8:	1c 8f       	std	Y+28, r17	; 0x1c
     6ea:	0b 8f       	std	Y+27, r16	; 0x1b
     6ec:	ce 01       	movw	r24, r28
     6ee:	05 96       	adiw	r24, 0x05	; 5
     6f0:	9e 8f       	std	Y+30, r25	; 0x1e
     6f2:	8d 8f       	std	Y+29, r24	; 0x1d
	Inputs input = initInputs(&bridge);
     6f4:	18 a2       	std	Y+32, r1	; 0x20
     6f6:	1f 8e       	std	Y+31, r1	; 0x1f
     6f8:	1a a2       	std	Y+34, r1	; 0x22
     6fa:	19 a2       	std	Y+33, r1	; 0x21
     6fc:	06 96       	adiw	r24, 0x06	; 6
     6fe:	9c a3       	std	Y+36, r25	; 0x24
     700:	8b a3       	std	Y+35, r24	; 0x23
	
	
	INSTALL(&input, newcar, IRQ_USART0_RX);
     702:	48 e0       	ldi	r20, 0x08	; 8
     704:	6b ec       	ldi	r22, 0xCB	; 203
     706:	72 e0       	ldi	r23, 0x02	; 2
     708:	44 96       	adiw	r24, 0x14	; 20
     70a:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <install>
	
	return TINYTIMBER(&gui, LCD_Init, NULL);
     70e:	40 e0       	ldi	r20, 0x00	; 0
     710:	50 e0       	ldi	r21, 0x00	; 0
     712:	64 e8       	ldi	r22, 0x84	; 132
     714:	72 e0       	ldi	r23, 0x02	; 2
     716:	c8 01       	movw	r24, r16
     718:	0e 94 05 10 	call	0x200a	; 0x200a <tinytimber>
}
     71c:	a4 96       	adiw	r28, 0x24	; 36
     71e:	0f b6       	in	r0, 0x3f	; 63
     720:	f8 94       	cli
     722:	de bf       	out	0x3e, r29	; 62
     724:	0f be       	out	0x3f, r0	; 63
     726:	cd bf       	out	0x3d, r28	; 61
     728:	df 91       	pop	r29
     72a:	cf 91       	pop	r28
     72c:	1f 91       	pop	r17
     72e:	0f 91       	pop	r16
     730:	08 95       	ret

00000732 <transmit>:
#include "Outputs.h"

void transmit(Outputs *self, int lightStatus){
     732:	fc 01       	movw	r30, r24
	if (lightStatus == 0){
     734:	61 15       	cp	r22, r1
     736:	71 05       	cpc	r23, r1
     738:	29 f4       	brne	.+10     	; 0x744 <transmit+0x12>
		self->data = 0b1001;
     73a:	89 e0       	ldi	r24, 0x09	; 9
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	95 83       	std	Z+5, r25	; 0x05
     740:	84 83       	std	Z+4, r24	; 0x04
     742:	0c c0       	rjmp	.+24     	; 0x75c <transmit+0x2a>
	}
	else if(lightStatus == 1){
     744:	61 30       	cpi	r22, 0x01	; 1
     746:	71 05       	cpc	r23, r1
     748:	29 f4       	brne	.+10     	; 0x754 <transmit+0x22>
		self->data = 0b0110;
     74a:	86 e0       	ldi	r24, 0x06	; 6
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	95 83       	std	Z+5, r25	; 0x05
     750:	84 83       	std	Z+4, r24	; 0x04
     752:	04 c0       	rjmp	.+8      	; 0x75c <transmit+0x2a>
	}else{
		self->data = 0b1010;
     754:	8a e0       	ldi	r24, 0x0A	; 10
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	95 83       	std	Z+5, r25	; 0x05
     75a:	84 83       	std	Z+4, r24	; 0x04
	}
	
	while (!(UCSR0A & (1 << UDRE0)));
     75c:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7fc0c0>
     760:	95 ff       	sbrs	r25, 5
     762:	fc cf       	rjmp	.-8      	; 0x75c <transmit+0x2a>
	UDR0 = self->data;
     764:	84 81       	ldd	r24, Z+4	; 0x04
     766:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fc0c6>
     76a:	08 95       	ret

0000076c <initialize>:
    Time now;
    DISABLE(status);
    TIMERGET(now);
    ENABLE(status);
    return now - (status ? current->msg->baseline : timestamp);
}
     76c:	cf 93       	push	r28
     76e:	df 93       	push	r29
     770:	00 d0       	rcall	.+0      	; 0x772 <initialize+0x6>
     772:	00 d0       	rcall	.+0      	; 0x774 <initialize+0x8>
     774:	cd b7       	in	r28, 0x3d	; 61
     776:	de b7       	in	r29, 0x3e	; 62
     778:	80 e0       	ldi	r24, 0x00	; 0
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	18 c0       	rjmp	.+48     	; 0x7ae <initialize+0x42>
     77e:	ac 01       	movw	r20, r24
     780:	4f 5f       	subi	r20, 0xFF	; 255
     782:	5f 4f       	sbci	r21, 0xFF	; 255
     784:	9a 01       	movw	r18, r20
     786:	22 95       	swap	r18
     788:	32 95       	swap	r19
     78a:	30 7f       	andi	r19, 0xF0	; 240
     78c:	32 27       	eor	r19, r18
     78e:	20 7f       	andi	r18, 0xF0	; 240
     790:	32 27       	eor	r19, r18
     792:	21 50       	subi	r18, 0x01	; 1
     794:	3e 4f       	sbci	r19, 0xFE	; 254
     796:	82 95       	swap	r24
     798:	92 95       	swap	r25
     79a:	90 7f       	andi	r25, 0xF0	; 240
     79c:	98 27       	eor	r25, r24
     79e:	80 7f       	andi	r24, 0xF0	; 240
     7a0:	98 27       	eor	r25, r24
     7a2:	fc 01       	movw	r30, r24
     7a4:	e1 50       	subi	r30, 0x01	; 1
     7a6:	fe 4f       	sbci	r31, 0xFE	; 254
     7a8:	31 83       	std	Z+1, r19	; 0x01
     7aa:	20 83       	st	Z, r18
     7ac:	ca 01       	movw	r24, r20
     7ae:	8e 30       	cpi	r24, 0x0E	; 14
     7b0:	91 05       	cpc	r25, r1
     7b2:	2c f3       	brlt	.-54     	; 0x77e <initialize+0x12>
     7b4:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <messages+0xe1>
     7b8:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <messages+0xe0>
     7bc:	80 e0       	ldi	r24, 0x00	; 0
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	15 c0       	rjmp	.+42     	; 0x7ec <initialize+0x80>
     7c2:	ac 01       	movw	r20, r24
     7c4:	4f 5f       	subi	r20, 0xFF	; 255
     7c6:	5f 4f       	sbci	r21, 0xFF	; 255
     7c8:	6d e1       	ldi	r22, 0x1D	; 29
     7ca:	64 9f       	mul	r22, r20
     7cc:	90 01       	movw	r18, r0
     7ce:	65 9f       	mul	r22, r21
     7d0:	30 0d       	add	r19, r0
     7d2:	11 24       	eor	r1, r1
     7d4:	26 5b       	subi	r18, 0xB6	; 182
     7d6:	3e 4f       	sbci	r19, 0xFE	; 254
     7d8:	68 9f       	mul	r22, r24
     7da:	f0 01       	movw	r30, r0
     7dc:	69 9f       	mul	r22, r25
     7de:	f0 0d       	add	r31, r0
     7e0:	11 24       	eor	r1, r1
     7e2:	e6 5b       	subi	r30, 0xB6	; 182
     7e4:	fe 4f       	sbci	r31, 0xFE	; 254
     7e6:	31 83       	std	Z+1, r19	; 0x01
     7e8:	20 83       	st	Z, r18
     7ea:	ca 01       	movw	r24, r20
     7ec:	83 30       	cpi	r24, 0x03	; 3
     7ee:	91 05       	cpc	r25, r1
     7f0:	44 f3       	brlt	.-48     	; 0x7c2 <initialize+0x56>
     7f2:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <threads+0x58>
     7f6:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <threads+0x57>
     7fa:	1a 82       	std	Y+2, r1	; 0x02
     7fc:	19 82       	std	Y+1, r1	; 0x01
     7fe:	32 c0       	rjmp	.+100    	; 0x864 <initialize+0xf8>
     800:	2d e1       	ldi	r18, 0x1D	; 29
     802:	49 81       	ldd	r20, Y+1	; 0x01
     804:	5a 81       	ldd	r21, Y+2	; 0x02
     806:	24 9f       	mul	r18, r20
     808:	c0 01       	movw	r24, r0
     80a:	25 9f       	mul	r18, r21
     80c:	90 0d       	add	r25, r0
     80e:	11 24       	eor	r1, r1
     810:	fc 01       	movw	r30, r24
     812:	e0 5b       	subi	r30, 0xB0	; 176
     814:	fe 4f       	sbci	r31, 0xFE	; 254
     816:	fc 83       	std	Y+4, r31	; 0x04
     818:	eb 83       	std	Y+3, r30	; 0x03
     81a:	cf 01       	movw	r24, r30
     81c:	0e 94 5d 10 	call	0x20ba	; 0x20ba <setjmp>
     820:	20 e6       	ldi	r18, 0x60	; 96
     822:	49 81       	ldd	r20, Y+1	; 0x01
     824:	5a 81       	ldd	r21, Y+2	; 0x02
     826:	24 9f       	mul	r18, r20
     828:	c0 01       	movw	r24, r0
     82a:	25 9f       	mul	r18, r21
     82c:	90 0d       	add	r25, r0
     82e:	11 24       	eor	r1, r1
     830:	85 5b       	subi	r24, 0xB5	; 181
     832:	9c 4f       	sbci	r25, 0xFC	; 252
     834:	eb 81       	ldd	r30, Y+3	; 0x03
     836:	fc 81       	ldd	r31, Y+4	; 0x04
     838:	91 8b       	std	Z+17, r25	; 0x11
     83a:	80 8b       	std	Z+16, r24	; 0x10
     83c:	93 8b       	std	Z+19, r25	; 0x13
     83e:	82 8b       	std	Z+18, r24	; 0x12
     840:	82 e9       	ldi	r24, 0x92	; 146
     842:	9f e0       	ldi	r25, 0x0F	; 15
     844:	96 8b       	std	Z+22, r25	; 0x16
     846:	85 8b       	std	Z+21, r24	; 0x15
     848:	8d e1       	ldi	r24, 0x1D	; 29
     84a:	84 9f       	mul	r24, r20
     84c:	f0 01       	movw	r30, r0
     84e:	85 9f       	mul	r24, r21
     850:	f0 0d       	add	r31, r0
     852:	11 24       	eor	r1, r1
     854:	e6 5b       	subi	r30, 0xB6	; 182
     856:	fe 4f       	sbci	r31, 0xFE	; 254
     858:	15 82       	std	Z+5, r1	; 0x05
     85a:	14 82       	std	Z+4, r1	; 0x04
     85c:	4f 5f       	subi	r20, 0xFF	; 255
     85e:	5f 4f       	sbci	r21, 0xFF	; 255
     860:	5a 83       	std	Y+2, r21	; 0x02
     862:	49 83       	std	Y+1, r20	; 0x01
     864:	29 81       	ldd	r18, Y+1	; 0x01
     866:	3a 81       	ldd	r19, Y+2	; 0x02
     868:	24 30       	cpi	r18, 0x04	; 4
     86a:	31 05       	cpc	r19, r1
     86c:	4c f2       	brlt	.-110    	; 0x800 <initialize+0x94>
     86e:	e2 ee       	ldi	r30, 0xE2	; 226
     870:	f1 e0       	ldi	r31, 0x01	; 1
     872:	11 82       	std	Z+1, r1	; 0x01
     874:	10 82       	st	Z, r1
     876:	15 82       	std	Z+5, r1	; 0x05
     878:	14 82       	std	Z+4, r1	; 0x04
     87a:	13 82       	std	Z+3, r1	; 0x03
     87c:	12 82       	std	Z+2, r1	; 0x02
     87e:	e1 e6       	ldi	r30, 0x61	; 97
     880:	f0 e0       	ldi	r31, 0x00	; 0
     882:	80 e8       	ldi	r24, 0x80	; 128
     884:	80 83       	st	Z, r24
     886:	10 82       	st	Z, r1
     888:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     88c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     890:	84 e0       	ldi	r24, 0x04	; 4
     892:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
     896:	81 e0       	ldi	r24, 0x01	; 1
     898:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
     89c:	0f 90       	pop	r0
     89e:	0f 90       	pop	r0
     8a0:	0f 90       	pop	r0
     8a2:	0f 90       	pop	r0
     8a4:	df 91       	pop	r29
     8a6:	cf 91       	pop	r28
     8a8:	08 95       	ret

000008aa <dispatch>:
     8aa:	cf 93       	push	r28
     8ac:	df 93       	push	r29
     8ae:	00 d0       	rcall	.+0      	; 0x8b0 <dispatch+0x6>
     8b0:	cd b7       	in	r28, 0x3d	; 61
     8b2:	de b7       	in	r29, 0x3e	; 62
     8b4:	9a 83       	std	Y+2, r25	; 0x02
     8b6:	89 83       	std	Y+1, r24	; 0x01
     8b8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     8bc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     8c0:	06 96       	adiw	r24, 0x06	; 6
     8c2:	0e 94 5d 10 	call	0x20ba	; 0x20ba <setjmp>
     8c6:	89 2b       	or	r24, r25
     8c8:	59 f4       	brne	.+22     	; 0x8e0 <dispatch+0x36>
     8ca:	89 81       	ldd	r24, Y+1	; 0x01
     8cc:	9a 81       	ldd	r25, Y+2	; 0x02
     8ce:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     8d2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     8d6:	61 e0       	ldi	r22, 0x01	; 1
     8d8:	70 e0       	ldi	r23, 0x00	; 0
     8da:	06 96       	adiw	r24, 0x06	; 6
     8dc:	0e 94 7d 10 	call	0x20fa	; 0x20fa <longjmp>
     8e0:	0f 90       	pop	r0
     8e2:	0f 90       	pop	r0
     8e4:	df 91       	pop	r29
     8e6:	cf 91       	pop	r28
     8e8:	08 95       	ret

000008ea <enqueueByDeadline>:
     8ea:	0f 93       	push	r16
     8ec:	1f 93       	push	r17
     8ee:	cf 93       	push	r28
     8f0:	df 93       	push	r29
     8f2:	dc 01       	movw	r26, r24
     8f4:	cb 01       	movw	r24, r22
     8f6:	eb 01       	movw	r28, r22
     8f8:	e8 81       	ld	r30, Y
     8fa:	f9 81       	ldd	r31, Y+1	; 0x01
     8fc:	c0 e0       	ldi	r28, 0x00	; 0
     8fe:	d0 e0       	ldi	r29, 0x00	; 0
     900:	04 c0       	rjmp	.+8      	; 0x90a <enqueueByDeadline+0x20>
     902:	ef 01       	movw	r28, r30
     904:	01 90       	ld	r0, Z+
     906:	f0 81       	ld	r31, Z
     908:	e0 2d       	mov	r30, r0
     90a:	30 97       	sbiw	r30, 0x00	; 0
     90c:	79 f0       	breq	.+30     	; 0x92c <enqueueByDeadline+0x42>
     90e:	06 81       	ldd	r16, Z+6	; 0x06
     910:	17 81       	ldd	r17, Z+7	; 0x07
     912:	20 85       	ldd	r18, Z+8	; 0x08
     914:	31 85       	ldd	r19, Z+9	; 0x09
     916:	16 96       	adiw	r26, 0x06	; 6
     918:	4d 91       	ld	r20, X+
     91a:	5d 91       	ld	r21, X+
     91c:	6d 91       	ld	r22, X+
     91e:	7c 91       	ld	r23, X
     920:	19 97       	sbiw	r26, 0x09	; 9
     922:	40 17       	cp	r20, r16
     924:	51 07       	cpc	r21, r17
     926:	62 07       	cpc	r22, r18
     928:	73 07       	cpc	r23, r19
     92a:	5c f7       	brge	.-42     	; 0x902 <enqueueByDeadline+0x18>
     92c:	11 96       	adiw	r26, 0x01	; 1
     92e:	fc 93       	st	X, r31
     930:	ee 93       	st	-X, r30
     932:	20 97       	sbiw	r28, 0x00	; 0
     934:	21 f4       	brne	.+8      	; 0x93e <enqueueByDeadline+0x54>
     936:	fc 01       	movw	r30, r24
     938:	b1 83       	std	Z+1, r27	; 0x01
     93a:	a0 83       	st	Z, r26
     93c:	02 c0       	rjmp	.+4      	; 0x942 <enqueueByDeadline+0x58>
     93e:	b9 83       	std	Y+1, r27	; 0x01
     940:	a8 83       	st	Y, r26
     942:	df 91       	pop	r29
     944:	cf 91       	pop	r28
     946:	1f 91       	pop	r17
     948:	0f 91       	pop	r16
     94a:	08 95       	ret

0000094c <enqueueByBaseline>:
     94c:	0f 93       	push	r16
     94e:	1f 93       	push	r17
     950:	cf 93       	push	r28
     952:	df 93       	push	r29
     954:	dc 01       	movw	r26, r24
     956:	cb 01       	movw	r24, r22
     958:	eb 01       	movw	r28, r22
     95a:	e8 81       	ld	r30, Y
     95c:	f9 81       	ldd	r31, Y+1	; 0x01
     95e:	c0 e0       	ldi	r28, 0x00	; 0
     960:	d0 e0       	ldi	r29, 0x00	; 0
     962:	04 c0       	rjmp	.+8      	; 0x96c <enqueueByBaseline+0x20>
     964:	ef 01       	movw	r28, r30
     966:	01 90       	ld	r0, Z+
     968:	f0 81       	ld	r31, Z
     96a:	e0 2d       	mov	r30, r0
     96c:	30 97       	sbiw	r30, 0x00	; 0
     96e:	79 f0       	breq	.+30     	; 0x98e <enqueueByBaseline+0x42>
     970:	02 81       	ldd	r16, Z+2	; 0x02
     972:	13 81       	ldd	r17, Z+3	; 0x03
     974:	24 81       	ldd	r18, Z+4	; 0x04
     976:	35 81       	ldd	r19, Z+5	; 0x05
     978:	12 96       	adiw	r26, 0x02	; 2
     97a:	4d 91       	ld	r20, X+
     97c:	5d 91       	ld	r21, X+
     97e:	6d 91       	ld	r22, X+
     980:	7c 91       	ld	r23, X
     982:	15 97       	sbiw	r26, 0x05	; 5
     984:	40 17       	cp	r20, r16
     986:	51 07       	cpc	r21, r17
     988:	62 07       	cpc	r22, r18
     98a:	73 07       	cpc	r23, r19
     98c:	5c f7       	brge	.-42     	; 0x964 <enqueueByBaseline+0x18>
     98e:	11 96       	adiw	r26, 0x01	; 1
     990:	fc 93       	st	X, r31
     992:	ee 93       	st	-X, r30
     994:	20 97       	sbiw	r28, 0x00	; 0
     996:	21 f4       	brne	.+8      	; 0x9a0 <enqueueByBaseline+0x54>
     998:	fc 01       	movw	r30, r24
     99a:	b1 83       	std	Z+1, r27	; 0x01
     99c:	a0 83       	st	Z, r26
     99e:	02 c0       	rjmp	.+4      	; 0x9a4 <enqueueByBaseline+0x58>
     9a0:	b9 83       	std	Y+1, r27	; 0x01
     9a2:	a8 83       	st	Y, r26
     9a4:	df 91       	pop	r29
     9a6:	cf 91       	pop	r28
     9a8:	1f 91       	pop	r17
     9aa:	0f 91       	pop	r16
     9ac:	08 95       	ret

000009ae <dequeue>:
     9ae:	dc 01       	movw	r26, r24
     9b0:	ed 91       	ld	r30, X+
     9b2:	fc 91       	ld	r31, X
     9b4:	11 97       	sbiw	r26, 0x01	; 1
     9b6:	30 97       	sbiw	r30, 0x00	; 0
     9b8:	59 f4       	brne	.+22     	; 0x9d0 <dequeue+0x22>
     9ba:	8f ef       	ldi	r24, 0xFF	; 255
     9bc:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
     9c0:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
     9c4:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
     9c8:	81 e0       	ldi	r24, 0x01	; 1
     9ca:	83 bf       	out	0x33, r24	; 51
     9cc:	88 95       	sleep
     9ce:	fc cf       	rjmp	.-8      	; 0x9c8 <dequeue+0x1a>
     9d0:	20 81       	ld	r18, Z
     9d2:	31 81       	ldd	r19, Z+1	; 0x01
     9d4:	2d 93       	st	X+, r18
     9d6:	3c 93       	st	X, r19
     9d8:	cf 01       	movw	r24, r30
     9da:	08 95       	ret

000009dc <insert>:
     9dc:	fb 01       	movw	r30, r22
     9de:	20 81       	ld	r18, Z
     9e0:	31 81       	ldd	r19, Z+1	; 0x01
     9e2:	fc 01       	movw	r30, r24
     9e4:	31 83       	std	Z+1, r19	; 0x01
     9e6:	20 83       	st	Z, r18
     9e8:	fb 01       	movw	r30, r22
     9ea:	91 83       	std	Z+1, r25	; 0x01
     9ec:	80 83       	st	Z, r24
     9ee:	08 95       	ret

000009f0 <push>:
     9f0:	fb 01       	movw	r30, r22
     9f2:	20 81       	ld	r18, Z
     9f4:	31 81       	ldd	r19, Z+1	; 0x01
     9f6:	fc 01       	movw	r30, r24
     9f8:	31 83       	std	Z+1, r19	; 0x01
     9fa:	20 83       	st	Z, r18
     9fc:	fb 01       	movw	r30, r22
     9fe:	91 83       	std	Z+1, r25	; 0x01
     a00:	80 83       	st	Z, r24
     a02:	08 95       	ret

00000a04 <pop>:
     a04:	dc 01       	movw	r26, r24
     a06:	ed 91       	ld	r30, X+
     a08:	fc 91       	ld	r31, X
     a0a:	11 97       	sbiw	r26, 0x01	; 1
     a0c:	20 81       	ld	r18, Z
     a0e:	31 81       	ldd	r19, Z+1	; 0x01
     a10:	2d 93       	st	X+, r18
     a12:	3c 93       	st	X, r19
     a14:	cf 01       	movw	r24, r30
     a16:	08 95       	ret

00000a18 <schedule>:
     a18:	cf 93       	push	r28
     a1a:	df 93       	push	r29
     a1c:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <activeStack>
     a20:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <activeStack+0x1>
     a24:	c2 81       	ldd	r28, Z+2	; 0x02
     a26:	d3 81       	ldd	r29, Z+3	; 0x03
     a28:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <msgQ>
     a2c:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <msgQ+0x1>
     a30:	30 97       	sbiw	r30, 0x00	; 0
     a32:	19 f1       	breq	.+70     	; 0xa7a <schedule+0x62>
     a34:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <threadPool>
     a38:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <threadPool+0x1>
     a3c:	89 2b       	or	r24, r25
     a3e:	e9 f0       	breq	.+58     	; 0xa7a <schedule+0x62>
     a40:	20 97       	sbiw	r28, 0x00	; 0
     a42:	69 f0       	breq	.+26     	; 0xa5e <schedule+0x46>
     a44:	86 81       	ldd	r24, Z+6	; 0x06
     a46:	97 81       	ldd	r25, Z+7	; 0x07
     a48:	a0 85       	ldd	r26, Z+8	; 0x08
     a4a:	b1 85       	ldd	r27, Z+9	; 0x09
     a4c:	4e 81       	ldd	r20, Y+6	; 0x06
     a4e:	5f 81       	ldd	r21, Y+7	; 0x07
     a50:	68 85       	ldd	r22, Y+8	; 0x08
     a52:	79 85       	ldd	r23, Y+9	; 0x09
     a54:	84 1b       	sub	r24, r20
     a56:	95 0b       	sbc	r25, r21
     a58:	a6 0b       	sbc	r26, r22
     a5a:	b7 0b       	sbc	r27, r23
     a5c:	72 f4       	brpl	.+28     	; 0xa7a <schedule+0x62>
     a5e:	84 e0       	ldi	r24, 0x04	; 4
     a60:	91 e0       	ldi	r25, 0x01	; 1
     a62:	0e 94 02 05 	call	0xa04	; 0xa04 <pop>
     a66:	62 e0       	ldi	r22, 0x02	; 2
     a68:	71 e0       	ldi	r23, 0x01	; 1
     a6a:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <push>
     a6e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <activeStack>
     a72:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <activeStack+0x1>
     a76:	0e 94 55 04 	call	0x8aa	; 0x8aa <dispatch>
     a7a:	df 91       	pop	r29
     a7c:	cf 91       	pop	r28
     a7e:	08 95       	ret

00000a80 <__vector_1>:
     a80:	1f 92       	push	r1
     a82:	0f 92       	push	r0
     a84:	0f b6       	in	r0, 0x3f	; 63
     a86:	0f 92       	push	r0
     a88:	11 24       	eor	r1, r1
     a8a:	0f 93       	push	r16
     a8c:	1f 93       	push	r17
     a8e:	2f 93       	push	r18
     a90:	3f 93       	push	r19
     a92:	4f 93       	push	r20
     a94:	5f 93       	push	r21
     a96:	6f 93       	push	r22
     a98:	7f 93       	push	r23
     a9a:	8f 93       	push	r24
     a9c:	9f 93       	push	r25
     a9e:	af 93       	push	r26
     aa0:	bf 93       	push	r27
     aa2:	ef 93       	push	r30
     aa4:	ff 93       	push	r31
     aa6:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
     aaa:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
     aae:	ac 01       	movw	r20, r24
     ab0:	09 2e       	mov	r0, r25
     ab2:	00 0c       	add	r0, r0
     ab4:	66 0b       	sbc	r22, r22
     ab6:	77 0b       	sbc	r23, r23
     ab8:	9a 01       	movw	r18, r20
     aba:	11 27       	eor	r17, r17
     abc:	00 27       	eor	r16, r16
     abe:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     ac2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     ac6:	60 e0       	ldi	r22, 0x00	; 0
     ac8:	70 e0       	ldi	r23, 0x00	; 0
     aca:	40 2b       	or	r20, r16
     acc:	51 2b       	or	r21, r17
     ace:	62 2b       	or	r22, r18
     ad0:	73 2b       	or	r23, r19
     ad2:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <timestamp>
     ad6:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <timestamp+0x1>
     ada:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <timestamp+0x2>
     ade:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <timestamp+0x3>
     ae2:	b0 9b       	sbis	0x16, 0	; 22
     ae4:	1a c0       	rjmp	.+52     	; 0xb1a <__vector_1+0x9a>
     ae6:	01 96       	adiw	r24, 0x01	; 1
     ae8:	09 2e       	mov	r0, r25
     aea:	00 0c       	add	r0, r0
     aec:	aa 0b       	sbc	r26, r26
     aee:	bb 0b       	sbc	r27, r27
     af0:	bc 01       	movw	r22, r24
     af2:	55 27       	eor	r21, r21
     af4:	44 27       	eor	r20, r20
     af6:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     afa:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     afe:	a0 e0       	ldi	r26, 0x00	; 0
     b00:	b0 e0       	ldi	r27, 0x00	; 0
     b02:	84 2b       	or	r24, r20
     b04:	95 2b       	or	r25, r21
     b06:	a6 2b       	or	r26, r22
     b08:	b7 2b       	or	r27, r23
     b0a:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
     b0e:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
     b12:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
     b16:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
     b1a:	e0 91 be 01 	lds	r30, 0x01BE	; 0x8001be <mtable>
     b1e:	f0 91 bf 01 	lds	r31, 0x01BF	; 0x8001bf <mtable+0x1>
     b22:	30 97       	sbiw	r30, 0x00	; 0
     b24:	39 f0       	breq	.+14     	; 0xb34 <__vector_1+0xb4>
     b26:	60 e0       	ldi	r22, 0x00	; 0
     b28:	70 e0       	ldi	r23, 0x00	; 0
     b2a:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <otable>
     b2e:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <otable+0x1>
     b32:	09 95       	icall
     b34:	0e 94 0c 05 	call	0xa18	; 0xa18 <schedule>
     b38:	ff 91       	pop	r31
     b3a:	ef 91       	pop	r30
     b3c:	bf 91       	pop	r27
     b3e:	af 91       	pop	r26
     b40:	9f 91       	pop	r25
     b42:	8f 91       	pop	r24
     b44:	7f 91       	pop	r23
     b46:	6f 91       	pop	r22
     b48:	5f 91       	pop	r21
     b4a:	4f 91       	pop	r20
     b4c:	3f 91       	pop	r19
     b4e:	2f 91       	pop	r18
     b50:	1f 91       	pop	r17
     b52:	0f 91       	pop	r16
     b54:	0f 90       	pop	r0
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	0f 90       	pop	r0
     b5a:	1f 90       	pop	r1
     b5c:	18 95       	reti

00000b5e <__vector_2>:
     b5e:	1f 92       	push	r1
     b60:	0f 92       	push	r0
     b62:	0f b6       	in	r0, 0x3f	; 63
     b64:	0f 92       	push	r0
     b66:	11 24       	eor	r1, r1
     b68:	0f 93       	push	r16
     b6a:	1f 93       	push	r17
     b6c:	2f 93       	push	r18
     b6e:	3f 93       	push	r19
     b70:	4f 93       	push	r20
     b72:	5f 93       	push	r21
     b74:	6f 93       	push	r22
     b76:	7f 93       	push	r23
     b78:	8f 93       	push	r24
     b7a:	9f 93       	push	r25
     b7c:	af 93       	push	r26
     b7e:	bf 93       	push	r27
     b80:	ef 93       	push	r30
     b82:	ff 93       	push	r31
     b84:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
     b88:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
     b8c:	ac 01       	movw	r20, r24
     b8e:	09 2e       	mov	r0, r25
     b90:	00 0c       	add	r0, r0
     b92:	66 0b       	sbc	r22, r22
     b94:	77 0b       	sbc	r23, r23
     b96:	9a 01       	movw	r18, r20
     b98:	11 27       	eor	r17, r17
     b9a:	00 27       	eor	r16, r16
     b9c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     ba0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     ba4:	60 e0       	ldi	r22, 0x00	; 0
     ba6:	70 e0       	ldi	r23, 0x00	; 0
     ba8:	40 2b       	or	r20, r16
     baa:	51 2b       	or	r21, r17
     bac:	62 2b       	or	r22, r18
     bae:	73 2b       	or	r23, r19
     bb0:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <timestamp>
     bb4:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <timestamp+0x1>
     bb8:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <timestamp+0x2>
     bbc:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <timestamp+0x3>
     bc0:	b0 9b       	sbis	0x16, 0	; 22
     bc2:	1a c0       	rjmp	.+52     	; 0xbf8 <__vector_2+0x9a>
     bc4:	01 96       	adiw	r24, 0x01	; 1
     bc6:	09 2e       	mov	r0, r25
     bc8:	00 0c       	add	r0, r0
     bca:	aa 0b       	sbc	r26, r26
     bcc:	bb 0b       	sbc	r27, r27
     bce:	bc 01       	movw	r22, r24
     bd0:	55 27       	eor	r21, r21
     bd2:	44 27       	eor	r20, r20
     bd4:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     bd8:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     bdc:	a0 e0       	ldi	r26, 0x00	; 0
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	84 2b       	or	r24, r20
     be2:	95 2b       	or	r25, r21
     be4:	a6 2b       	or	r26, r22
     be6:	b7 2b       	or	r27, r23
     be8:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
     bec:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
     bf0:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
     bf4:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
     bf8:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <mtable+0x2>
     bfc:	f0 91 c1 01 	lds	r31, 0x01C1	; 0x8001c1 <mtable+0x3>
     c00:	30 97       	sbiw	r30, 0x00	; 0
     c02:	39 f0       	breq	.+14     	; 0xc12 <__vector_2+0xb4>
     c04:	61 e0       	ldi	r22, 0x01	; 1
     c06:	70 e0       	ldi	r23, 0x00	; 0
     c08:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <otable+0x2>
     c0c:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <otable+0x3>
     c10:	09 95       	icall
     c12:	0e 94 0c 05 	call	0xa18	; 0xa18 <schedule>
     c16:	ff 91       	pop	r31
     c18:	ef 91       	pop	r30
     c1a:	bf 91       	pop	r27
     c1c:	af 91       	pop	r26
     c1e:	9f 91       	pop	r25
     c20:	8f 91       	pop	r24
     c22:	7f 91       	pop	r23
     c24:	6f 91       	pop	r22
     c26:	5f 91       	pop	r21
     c28:	4f 91       	pop	r20
     c2a:	3f 91       	pop	r19
     c2c:	2f 91       	pop	r18
     c2e:	1f 91       	pop	r17
     c30:	0f 91       	pop	r16
     c32:	0f 90       	pop	r0
     c34:	0f be       	out	0x3f, r0	; 63
     c36:	0f 90       	pop	r0
     c38:	1f 90       	pop	r1
     c3a:	18 95       	reti

00000c3c <__vector_3>:
     c3c:	1f 92       	push	r1
     c3e:	0f 92       	push	r0
     c40:	0f b6       	in	r0, 0x3f	; 63
     c42:	0f 92       	push	r0
     c44:	11 24       	eor	r1, r1
     c46:	0f 93       	push	r16
     c48:	1f 93       	push	r17
     c4a:	2f 93       	push	r18
     c4c:	3f 93       	push	r19
     c4e:	4f 93       	push	r20
     c50:	5f 93       	push	r21
     c52:	6f 93       	push	r22
     c54:	7f 93       	push	r23
     c56:	8f 93       	push	r24
     c58:	9f 93       	push	r25
     c5a:	af 93       	push	r26
     c5c:	bf 93       	push	r27
     c5e:	ef 93       	push	r30
     c60:	ff 93       	push	r31
     c62:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
     c66:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
     c6a:	ac 01       	movw	r20, r24
     c6c:	09 2e       	mov	r0, r25
     c6e:	00 0c       	add	r0, r0
     c70:	66 0b       	sbc	r22, r22
     c72:	77 0b       	sbc	r23, r23
     c74:	9a 01       	movw	r18, r20
     c76:	11 27       	eor	r17, r17
     c78:	00 27       	eor	r16, r16
     c7a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     c7e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     c82:	60 e0       	ldi	r22, 0x00	; 0
     c84:	70 e0       	ldi	r23, 0x00	; 0
     c86:	40 2b       	or	r20, r16
     c88:	51 2b       	or	r21, r17
     c8a:	62 2b       	or	r22, r18
     c8c:	73 2b       	or	r23, r19
     c8e:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <timestamp>
     c92:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <timestamp+0x1>
     c96:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <timestamp+0x2>
     c9a:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <timestamp+0x3>
     c9e:	b0 9b       	sbis	0x16, 0	; 22
     ca0:	1a c0       	rjmp	.+52     	; 0xcd6 <__vector_3+0x9a>
     ca2:	01 96       	adiw	r24, 0x01	; 1
     ca4:	09 2e       	mov	r0, r25
     ca6:	00 0c       	add	r0, r0
     ca8:	aa 0b       	sbc	r26, r26
     caa:	bb 0b       	sbc	r27, r27
     cac:	bc 01       	movw	r22, r24
     cae:	55 27       	eor	r21, r21
     cb0:	44 27       	eor	r20, r20
     cb2:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     cb6:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     cba:	a0 e0       	ldi	r26, 0x00	; 0
     cbc:	b0 e0       	ldi	r27, 0x00	; 0
     cbe:	84 2b       	or	r24, r20
     cc0:	95 2b       	or	r25, r21
     cc2:	a6 2b       	or	r26, r22
     cc4:	b7 2b       	or	r27, r23
     cc6:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
     cca:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
     cce:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
     cd2:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
     cd6:	e0 91 c2 01 	lds	r30, 0x01C2	; 0x8001c2 <mtable+0x4>
     cda:	f0 91 c3 01 	lds	r31, 0x01C3	; 0x8001c3 <mtable+0x5>
     cde:	30 97       	sbiw	r30, 0x00	; 0
     ce0:	39 f0       	breq	.+14     	; 0xcf0 <__vector_3+0xb4>
     ce2:	62 e0       	ldi	r22, 0x02	; 2
     ce4:	70 e0       	ldi	r23, 0x00	; 0
     ce6:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <otable+0x4>
     cea:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <otable+0x5>
     cee:	09 95       	icall
     cf0:	0e 94 0c 05 	call	0xa18	; 0xa18 <schedule>
     cf4:	ff 91       	pop	r31
     cf6:	ef 91       	pop	r30
     cf8:	bf 91       	pop	r27
     cfa:	af 91       	pop	r26
     cfc:	9f 91       	pop	r25
     cfe:	8f 91       	pop	r24
     d00:	7f 91       	pop	r23
     d02:	6f 91       	pop	r22
     d04:	5f 91       	pop	r21
     d06:	4f 91       	pop	r20
     d08:	3f 91       	pop	r19
     d0a:	2f 91       	pop	r18
     d0c:	1f 91       	pop	r17
     d0e:	0f 91       	pop	r16
     d10:	0f 90       	pop	r0
     d12:	0f be       	out	0x3f, r0	; 63
     d14:	0f 90       	pop	r0
     d16:	1f 90       	pop	r1
     d18:	18 95       	reti

00000d1a <__vector_4>:
     d1a:	1f 92       	push	r1
     d1c:	0f 92       	push	r0
     d1e:	0f b6       	in	r0, 0x3f	; 63
     d20:	0f 92       	push	r0
     d22:	11 24       	eor	r1, r1
     d24:	0f 93       	push	r16
     d26:	1f 93       	push	r17
     d28:	2f 93       	push	r18
     d2a:	3f 93       	push	r19
     d2c:	4f 93       	push	r20
     d2e:	5f 93       	push	r21
     d30:	6f 93       	push	r22
     d32:	7f 93       	push	r23
     d34:	8f 93       	push	r24
     d36:	9f 93       	push	r25
     d38:	af 93       	push	r26
     d3a:	bf 93       	push	r27
     d3c:	ef 93       	push	r30
     d3e:	ff 93       	push	r31
     d40:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
     d44:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
     d48:	ac 01       	movw	r20, r24
     d4a:	09 2e       	mov	r0, r25
     d4c:	00 0c       	add	r0, r0
     d4e:	66 0b       	sbc	r22, r22
     d50:	77 0b       	sbc	r23, r23
     d52:	9a 01       	movw	r18, r20
     d54:	11 27       	eor	r17, r17
     d56:	00 27       	eor	r16, r16
     d58:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     d5c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     d60:	60 e0       	ldi	r22, 0x00	; 0
     d62:	70 e0       	ldi	r23, 0x00	; 0
     d64:	40 2b       	or	r20, r16
     d66:	51 2b       	or	r21, r17
     d68:	62 2b       	or	r22, r18
     d6a:	73 2b       	or	r23, r19
     d6c:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <timestamp>
     d70:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <timestamp+0x1>
     d74:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <timestamp+0x2>
     d78:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <timestamp+0x3>
     d7c:	b0 9b       	sbis	0x16, 0	; 22
     d7e:	1a c0       	rjmp	.+52     	; 0xdb4 <__vector_4+0x9a>
     d80:	01 96       	adiw	r24, 0x01	; 1
     d82:	09 2e       	mov	r0, r25
     d84:	00 0c       	add	r0, r0
     d86:	aa 0b       	sbc	r26, r26
     d88:	bb 0b       	sbc	r27, r27
     d8a:	bc 01       	movw	r22, r24
     d8c:	55 27       	eor	r21, r21
     d8e:	44 27       	eor	r20, r20
     d90:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     d94:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     d98:	a0 e0       	ldi	r26, 0x00	; 0
     d9a:	b0 e0       	ldi	r27, 0x00	; 0
     d9c:	84 2b       	or	r24, r20
     d9e:	95 2b       	or	r25, r21
     da0:	a6 2b       	or	r26, r22
     da2:	b7 2b       	or	r27, r23
     da4:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
     da8:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
     dac:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
     db0:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
     db4:	e0 91 c4 01 	lds	r30, 0x01C4	; 0x8001c4 <mtable+0x6>
     db8:	f0 91 c5 01 	lds	r31, 0x01C5	; 0x8001c5 <mtable+0x7>
     dbc:	30 97       	sbiw	r30, 0x00	; 0
     dbe:	39 f0       	breq	.+14     	; 0xdce <__vector_4+0xb4>
     dc0:	63 e0       	ldi	r22, 0x03	; 3
     dc2:	70 e0       	ldi	r23, 0x00	; 0
     dc4:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <otable+0x6>
     dc8:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <otable+0x7>
     dcc:	09 95       	icall
     dce:	0e 94 0c 05 	call	0xa18	; 0xa18 <schedule>
     dd2:	ff 91       	pop	r31
     dd4:	ef 91       	pop	r30
     dd6:	bf 91       	pop	r27
     dd8:	af 91       	pop	r26
     dda:	9f 91       	pop	r25
     ddc:	8f 91       	pop	r24
     dde:	7f 91       	pop	r23
     de0:	6f 91       	pop	r22
     de2:	5f 91       	pop	r21
     de4:	4f 91       	pop	r20
     de6:	3f 91       	pop	r19
     de8:	2f 91       	pop	r18
     dea:	1f 91       	pop	r17
     dec:	0f 91       	pop	r16
     dee:	0f 90       	pop	r0
     df0:	0f be       	out	0x3f, r0	; 63
     df2:	0f 90       	pop	r0
     df4:	1f 90       	pop	r1
     df6:	18 95       	reti

00000df8 <__vector_5>:
     df8:	1f 92       	push	r1
     dfa:	0f 92       	push	r0
     dfc:	0f b6       	in	r0, 0x3f	; 63
     dfe:	0f 92       	push	r0
     e00:	11 24       	eor	r1, r1
     e02:	0f 93       	push	r16
     e04:	1f 93       	push	r17
     e06:	2f 93       	push	r18
     e08:	3f 93       	push	r19
     e0a:	4f 93       	push	r20
     e0c:	5f 93       	push	r21
     e0e:	6f 93       	push	r22
     e10:	7f 93       	push	r23
     e12:	8f 93       	push	r24
     e14:	9f 93       	push	r25
     e16:	af 93       	push	r26
     e18:	bf 93       	push	r27
     e1a:	ef 93       	push	r30
     e1c:	ff 93       	push	r31
     e1e:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
     e22:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
     e26:	ac 01       	movw	r20, r24
     e28:	09 2e       	mov	r0, r25
     e2a:	00 0c       	add	r0, r0
     e2c:	66 0b       	sbc	r22, r22
     e2e:	77 0b       	sbc	r23, r23
     e30:	9a 01       	movw	r18, r20
     e32:	11 27       	eor	r17, r17
     e34:	00 27       	eor	r16, r16
     e36:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e3a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e3e:	60 e0       	ldi	r22, 0x00	; 0
     e40:	70 e0       	ldi	r23, 0x00	; 0
     e42:	40 2b       	or	r20, r16
     e44:	51 2b       	or	r21, r17
     e46:	62 2b       	or	r22, r18
     e48:	73 2b       	or	r23, r19
     e4a:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <timestamp>
     e4e:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <timestamp+0x1>
     e52:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <timestamp+0x2>
     e56:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <timestamp+0x3>
     e5a:	b0 9b       	sbis	0x16, 0	; 22
     e5c:	1a c0       	rjmp	.+52     	; 0xe92 <__vector_5+0x9a>
     e5e:	01 96       	adiw	r24, 0x01	; 1
     e60:	09 2e       	mov	r0, r25
     e62:	00 0c       	add	r0, r0
     e64:	aa 0b       	sbc	r26, r26
     e66:	bb 0b       	sbc	r27, r27
     e68:	bc 01       	movw	r22, r24
     e6a:	55 27       	eor	r21, r21
     e6c:	44 27       	eor	r20, r20
     e6e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e72:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e76:	a0 e0       	ldi	r26, 0x00	; 0
     e78:	b0 e0       	ldi	r27, 0x00	; 0
     e7a:	84 2b       	or	r24, r20
     e7c:	95 2b       	or	r25, r21
     e7e:	a6 2b       	or	r26, r22
     e80:	b7 2b       	or	r27, r23
     e82:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
     e86:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
     e8a:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
     e8e:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
     e92:	e0 91 c6 01 	lds	r30, 0x01C6	; 0x8001c6 <mtable+0x8>
     e96:	f0 91 c7 01 	lds	r31, 0x01C7	; 0x8001c7 <mtable+0x9>
     e9a:	30 97       	sbiw	r30, 0x00	; 0
     e9c:	39 f0       	breq	.+14     	; 0xeac <__vector_5+0xb4>
     e9e:	64 e0       	ldi	r22, 0x04	; 4
     ea0:	70 e0       	ldi	r23, 0x00	; 0
     ea2:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <otable+0x8>
     ea6:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <otable+0x9>
     eaa:	09 95       	icall
     eac:	0e 94 0c 05 	call	0xa18	; 0xa18 <schedule>
     eb0:	ff 91       	pop	r31
     eb2:	ef 91       	pop	r30
     eb4:	bf 91       	pop	r27
     eb6:	af 91       	pop	r26
     eb8:	9f 91       	pop	r25
     eba:	8f 91       	pop	r24
     ebc:	7f 91       	pop	r23
     ebe:	6f 91       	pop	r22
     ec0:	5f 91       	pop	r21
     ec2:	4f 91       	pop	r20
     ec4:	3f 91       	pop	r19
     ec6:	2f 91       	pop	r18
     ec8:	1f 91       	pop	r17
     eca:	0f 91       	pop	r16
     ecc:	0f 90       	pop	r0
     ece:	0f be       	out	0x3f, r0	; 63
     ed0:	0f 90       	pop	r0
     ed2:	1f 90       	pop	r1
     ed4:	18 95       	reti

00000ed6 <__vector_10>:
     ed6:	1f 92       	push	r1
     ed8:	0f 92       	push	r0
     eda:	0f b6       	in	r0, 0x3f	; 63
     edc:	0f 92       	push	r0
     ede:	11 24       	eor	r1, r1
     ee0:	0f 93       	push	r16
     ee2:	1f 93       	push	r17
     ee4:	2f 93       	push	r18
     ee6:	3f 93       	push	r19
     ee8:	4f 93       	push	r20
     eea:	5f 93       	push	r21
     eec:	6f 93       	push	r22
     eee:	7f 93       	push	r23
     ef0:	8f 93       	push	r24
     ef2:	9f 93       	push	r25
     ef4:	af 93       	push	r26
     ef6:	bf 93       	push	r27
     ef8:	ef 93       	push	r30
     efa:	ff 93       	push	r31
     efc:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
     f00:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
     f04:	ac 01       	movw	r20, r24
     f06:	09 2e       	mov	r0, r25
     f08:	00 0c       	add	r0, r0
     f0a:	66 0b       	sbc	r22, r22
     f0c:	77 0b       	sbc	r23, r23
     f0e:	9a 01       	movw	r18, r20
     f10:	11 27       	eor	r17, r17
     f12:	00 27       	eor	r16, r16
     f14:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f18:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f1c:	60 e0       	ldi	r22, 0x00	; 0
     f1e:	70 e0       	ldi	r23, 0x00	; 0
     f20:	40 2b       	or	r20, r16
     f22:	51 2b       	or	r21, r17
     f24:	62 2b       	or	r22, r18
     f26:	73 2b       	or	r23, r19
     f28:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <timestamp>
     f2c:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <timestamp+0x1>
     f30:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <timestamp+0x2>
     f34:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <timestamp+0x3>
     f38:	b0 9b       	sbis	0x16, 0	; 22
     f3a:	1a c0       	rjmp	.+52     	; 0xf70 <__vector_10+0x9a>
     f3c:	01 96       	adiw	r24, 0x01	; 1
     f3e:	09 2e       	mov	r0, r25
     f40:	00 0c       	add	r0, r0
     f42:	aa 0b       	sbc	r26, r26
     f44:	bb 0b       	sbc	r27, r27
     f46:	bc 01       	movw	r22, r24
     f48:	55 27       	eor	r21, r21
     f4a:	44 27       	eor	r20, r20
     f4c:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f50:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f54:	a0 e0       	ldi	r26, 0x00	; 0
     f56:	b0 e0       	ldi	r27, 0x00	; 0
     f58:	84 2b       	or	r24, r20
     f5a:	95 2b       	or	r25, r21
     f5c:	a6 2b       	or	r26, r22
     f5e:	b7 2b       	or	r27, r23
     f60:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
     f64:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
     f68:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
     f6c:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
     f70:	e0 91 c8 01 	lds	r30, 0x01C8	; 0x8001c8 <mtable+0xa>
     f74:	f0 91 c9 01 	lds	r31, 0x01C9	; 0x8001c9 <mtable+0xb>
     f78:	30 97       	sbiw	r30, 0x00	; 0
     f7a:	39 f0       	breq	.+14     	; 0xf8a <__vector_10+0xb4>
     f7c:	65 e0       	ldi	r22, 0x05	; 5
     f7e:	70 e0       	ldi	r23, 0x00	; 0
     f80:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <otable+0xa>
     f84:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <otable+0xb>
     f88:	09 95       	icall
     f8a:	0e 94 0c 05 	call	0xa18	; 0xa18 <schedule>
     f8e:	ff 91       	pop	r31
     f90:	ef 91       	pop	r30
     f92:	bf 91       	pop	r27
     f94:	af 91       	pop	r26
     f96:	9f 91       	pop	r25
     f98:	8f 91       	pop	r24
     f9a:	7f 91       	pop	r23
     f9c:	6f 91       	pop	r22
     f9e:	5f 91       	pop	r21
     fa0:	4f 91       	pop	r20
     fa2:	3f 91       	pop	r19
     fa4:	2f 91       	pop	r18
     fa6:	1f 91       	pop	r17
     fa8:	0f 91       	pop	r16
     faa:	0f 90       	pop	r0
     fac:	0f be       	out	0x3f, r0	; 63
     fae:	0f 90       	pop	r0
     fb0:	1f 90       	pop	r1
     fb2:	18 95       	reti

00000fb4 <__vector_11>:
     fb4:	1f 92       	push	r1
     fb6:	0f 92       	push	r0
     fb8:	0f b6       	in	r0, 0x3f	; 63
     fba:	0f 92       	push	r0
     fbc:	11 24       	eor	r1, r1
     fbe:	0f 93       	push	r16
     fc0:	1f 93       	push	r17
     fc2:	2f 93       	push	r18
     fc4:	3f 93       	push	r19
     fc6:	4f 93       	push	r20
     fc8:	5f 93       	push	r21
     fca:	6f 93       	push	r22
     fcc:	7f 93       	push	r23
     fce:	8f 93       	push	r24
     fd0:	9f 93       	push	r25
     fd2:	af 93       	push	r26
     fd4:	bf 93       	push	r27
     fd6:	ef 93       	push	r30
     fd8:	ff 93       	push	r31
     fda:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
     fde:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
     fe2:	ac 01       	movw	r20, r24
     fe4:	09 2e       	mov	r0, r25
     fe6:	00 0c       	add	r0, r0
     fe8:	66 0b       	sbc	r22, r22
     fea:	77 0b       	sbc	r23, r23
     fec:	9a 01       	movw	r18, r20
     fee:	11 27       	eor	r17, r17
     ff0:	00 27       	eor	r16, r16
     ff2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     ff6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     ffa:	60 e0       	ldi	r22, 0x00	; 0
     ffc:	70 e0       	ldi	r23, 0x00	; 0
     ffe:	40 2b       	or	r20, r16
    1000:	51 2b       	or	r21, r17
    1002:	62 2b       	or	r22, r18
    1004:	73 2b       	or	r23, r19
    1006:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <timestamp>
    100a:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <timestamp+0x1>
    100e:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <timestamp+0x2>
    1012:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <timestamp+0x3>
    1016:	b0 9b       	sbis	0x16, 0	; 22
    1018:	1a c0       	rjmp	.+52     	; 0x104e <__vector_11+0x9a>
    101a:	01 96       	adiw	r24, 0x01	; 1
    101c:	09 2e       	mov	r0, r25
    101e:	00 0c       	add	r0, r0
    1020:	aa 0b       	sbc	r26, r26
    1022:	bb 0b       	sbc	r27, r27
    1024:	bc 01       	movw	r22, r24
    1026:	55 27       	eor	r21, r21
    1028:	44 27       	eor	r20, r20
    102a:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    102e:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1032:	a0 e0       	ldi	r26, 0x00	; 0
    1034:	b0 e0       	ldi	r27, 0x00	; 0
    1036:	84 2b       	or	r24, r20
    1038:	95 2b       	or	r25, r21
    103a:	a6 2b       	or	r26, r22
    103c:	b7 2b       	or	r27, r23
    103e:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    1042:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    1046:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    104a:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    104e:	e0 91 ca 01 	lds	r30, 0x01CA	; 0x8001ca <mtable+0xc>
    1052:	f0 91 cb 01 	lds	r31, 0x01CB	; 0x8001cb <mtable+0xd>
    1056:	30 97       	sbiw	r30, 0x00	; 0
    1058:	39 f0       	breq	.+14     	; 0x1068 <__vector_11+0xb4>
    105a:	66 e0       	ldi	r22, 0x06	; 6
    105c:	70 e0       	ldi	r23, 0x00	; 0
    105e:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <otable+0xc>
    1062:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <otable+0xd>
    1066:	09 95       	icall
    1068:	0e 94 0c 05 	call	0xa18	; 0xa18 <schedule>
    106c:	ff 91       	pop	r31
    106e:	ef 91       	pop	r30
    1070:	bf 91       	pop	r27
    1072:	af 91       	pop	r26
    1074:	9f 91       	pop	r25
    1076:	8f 91       	pop	r24
    1078:	7f 91       	pop	r23
    107a:	6f 91       	pop	r22
    107c:	5f 91       	pop	r21
    107e:	4f 91       	pop	r20
    1080:	3f 91       	pop	r19
    1082:	2f 91       	pop	r18
    1084:	1f 91       	pop	r17
    1086:	0f 91       	pop	r16
    1088:	0f 90       	pop	r0
    108a:	0f be       	out	0x3f, r0	; 63
    108c:	0f 90       	pop	r0
    108e:	1f 90       	pop	r1
    1090:	18 95       	reti

00001092 <__vector_12>:
    1092:	1f 92       	push	r1
    1094:	0f 92       	push	r0
    1096:	0f b6       	in	r0, 0x3f	; 63
    1098:	0f 92       	push	r0
    109a:	11 24       	eor	r1, r1
    109c:	0f 93       	push	r16
    109e:	1f 93       	push	r17
    10a0:	2f 93       	push	r18
    10a2:	3f 93       	push	r19
    10a4:	4f 93       	push	r20
    10a6:	5f 93       	push	r21
    10a8:	6f 93       	push	r22
    10aa:	7f 93       	push	r23
    10ac:	8f 93       	push	r24
    10ae:	9f 93       	push	r25
    10b0:	af 93       	push	r26
    10b2:	bf 93       	push	r27
    10b4:	ef 93       	push	r30
    10b6:	ff 93       	push	r31
    10b8:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
    10bc:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
    10c0:	ac 01       	movw	r20, r24
    10c2:	09 2e       	mov	r0, r25
    10c4:	00 0c       	add	r0, r0
    10c6:	66 0b       	sbc	r22, r22
    10c8:	77 0b       	sbc	r23, r23
    10ca:	9a 01       	movw	r18, r20
    10cc:	11 27       	eor	r17, r17
    10ce:	00 27       	eor	r16, r16
    10d0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    10d4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    10d8:	60 e0       	ldi	r22, 0x00	; 0
    10da:	70 e0       	ldi	r23, 0x00	; 0
    10dc:	40 2b       	or	r20, r16
    10de:	51 2b       	or	r21, r17
    10e0:	62 2b       	or	r22, r18
    10e2:	73 2b       	or	r23, r19
    10e4:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <timestamp>
    10e8:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <timestamp+0x1>
    10ec:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <timestamp+0x2>
    10f0:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <timestamp+0x3>
    10f4:	b0 9b       	sbis	0x16, 0	; 22
    10f6:	1a c0       	rjmp	.+52     	; 0x112c <__vector_12+0x9a>
    10f8:	01 96       	adiw	r24, 0x01	; 1
    10fa:	09 2e       	mov	r0, r25
    10fc:	00 0c       	add	r0, r0
    10fe:	aa 0b       	sbc	r26, r26
    1100:	bb 0b       	sbc	r27, r27
    1102:	bc 01       	movw	r22, r24
    1104:	55 27       	eor	r21, r21
    1106:	44 27       	eor	r20, r20
    1108:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    110c:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1110:	a0 e0       	ldi	r26, 0x00	; 0
    1112:	b0 e0       	ldi	r27, 0x00	; 0
    1114:	84 2b       	or	r24, r20
    1116:	95 2b       	or	r25, r21
    1118:	a6 2b       	or	r26, r22
    111a:	b7 2b       	or	r27, r23
    111c:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    1120:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    1124:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    1128:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    112c:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <mtable+0xe>
    1130:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <mtable+0xf>
    1134:	30 97       	sbiw	r30, 0x00	; 0
    1136:	39 f0       	breq	.+14     	; 0x1146 <__vector_12+0xb4>
    1138:	67 e0       	ldi	r22, 0x07	; 7
    113a:	70 e0       	ldi	r23, 0x00	; 0
    113c:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <otable+0xe>
    1140:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <otable+0xf>
    1144:	09 95       	icall
    1146:	0e 94 0c 05 	call	0xa18	; 0xa18 <schedule>
    114a:	ff 91       	pop	r31
    114c:	ef 91       	pop	r30
    114e:	bf 91       	pop	r27
    1150:	af 91       	pop	r26
    1152:	9f 91       	pop	r25
    1154:	8f 91       	pop	r24
    1156:	7f 91       	pop	r23
    1158:	6f 91       	pop	r22
    115a:	5f 91       	pop	r21
    115c:	4f 91       	pop	r20
    115e:	3f 91       	pop	r19
    1160:	2f 91       	pop	r18
    1162:	1f 91       	pop	r17
    1164:	0f 91       	pop	r16
    1166:	0f 90       	pop	r0
    1168:	0f be       	out	0x3f, r0	; 63
    116a:	0f 90       	pop	r0
    116c:	1f 90       	pop	r1
    116e:	18 95       	reti

00001170 <__vector_13>:
    1170:	1f 92       	push	r1
    1172:	0f 92       	push	r0
    1174:	0f b6       	in	r0, 0x3f	; 63
    1176:	0f 92       	push	r0
    1178:	11 24       	eor	r1, r1
    117a:	0f 93       	push	r16
    117c:	1f 93       	push	r17
    117e:	2f 93       	push	r18
    1180:	3f 93       	push	r19
    1182:	4f 93       	push	r20
    1184:	5f 93       	push	r21
    1186:	6f 93       	push	r22
    1188:	7f 93       	push	r23
    118a:	8f 93       	push	r24
    118c:	9f 93       	push	r25
    118e:	af 93       	push	r26
    1190:	bf 93       	push	r27
    1192:	ef 93       	push	r30
    1194:	ff 93       	push	r31
    1196:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
    119a:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
    119e:	ac 01       	movw	r20, r24
    11a0:	09 2e       	mov	r0, r25
    11a2:	00 0c       	add	r0, r0
    11a4:	66 0b       	sbc	r22, r22
    11a6:	77 0b       	sbc	r23, r23
    11a8:	9a 01       	movw	r18, r20
    11aa:	11 27       	eor	r17, r17
    11ac:	00 27       	eor	r16, r16
    11ae:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    11b2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    11b6:	60 e0       	ldi	r22, 0x00	; 0
    11b8:	70 e0       	ldi	r23, 0x00	; 0
    11ba:	40 2b       	or	r20, r16
    11bc:	51 2b       	or	r21, r17
    11be:	62 2b       	or	r22, r18
    11c0:	73 2b       	or	r23, r19
    11c2:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <timestamp>
    11c6:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <timestamp+0x1>
    11ca:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <timestamp+0x2>
    11ce:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <timestamp+0x3>
    11d2:	b0 9b       	sbis	0x16, 0	; 22
    11d4:	1a c0       	rjmp	.+52     	; 0x120a <__vector_13+0x9a>
    11d6:	01 96       	adiw	r24, 0x01	; 1
    11d8:	09 2e       	mov	r0, r25
    11da:	00 0c       	add	r0, r0
    11dc:	aa 0b       	sbc	r26, r26
    11de:	bb 0b       	sbc	r27, r27
    11e0:	bc 01       	movw	r22, r24
    11e2:	55 27       	eor	r21, r21
    11e4:	44 27       	eor	r20, r20
    11e6:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    11ea:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    11ee:	a0 e0       	ldi	r26, 0x00	; 0
    11f0:	b0 e0       	ldi	r27, 0x00	; 0
    11f2:	84 2b       	or	r24, r20
    11f4:	95 2b       	or	r25, r21
    11f6:	a6 2b       	or	r26, r22
    11f8:	b7 2b       	or	r27, r23
    11fa:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    11fe:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    1202:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    1206:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    120a:	e0 91 ce 01 	lds	r30, 0x01CE	; 0x8001ce <mtable+0x10>
    120e:	f0 91 cf 01 	lds	r31, 0x01CF	; 0x8001cf <mtable+0x11>
    1212:	30 97       	sbiw	r30, 0x00	; 0
    1214:	39 f0       	breq	.+14     	; 0x1224 <__vector_13+0xb4>
    1216:	68 e0       	ldi	r22, 0x08	; 8
    1218:	70 e0       	ldi	r23, 0x00	; 0
    121a:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <otable+0x10>
    121e:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <otable+0x11>
    1222:	09 95       	icall
    1224:	0e 94 0c 05 	call	0xa18	; 0xa18 <schedule>
    1228:	ff 91       	pop	r31
    122a:	ef 91       	pop	r30
    122c:	bf 91       	pop	r27
    122e:	af 91       	pop	r26
    1230:	9f 91       	pop	r25
    1232:	8f 91       	pop	r24
    1234:	7f 91       	pop	r23
    1236:	6f 91       	pop	r22
    1238:	5f 91       	pop	r21
    123a:	4f 91       	pop	r20
    123c:	3f 91       	pop	r19
    123e:	2f 91       	pop	r18
    1240:	1f 91       	pop	r17
    1242:	0f 91       	pop	r16
    1244:	0f 90       	pop	r0
    1246:	0f be       	out	0x3f, r0	; 63
    1248:	0f 90       	pop	r0
    124a:	1f 90       	pop	r1
    124c:	18 95       	reti

0000124e <__vector_14>:
    124e:	1f 92       	push	r1
    1250:	0f 92       	push	r0
    1252:	0f b6       	in	r0, 0x3f	; 63
    1254:	0f 92       	push	r0
    1256:	11 24       	eor	r1, r1
    1258:	0f 93       	push	r16
    125a:	1f 93       	push	r17
    125c:	2f 93       	push	r18
    125e:	3f 93       	push	r19
    1260:	4f 93       	push	r20
    1262:	5f 93       	push	r21
    1264:	6f 93       	push	r22
    1266:	7f 93       	push	r23
    1268:	8f 93       	push	r24
    126a:	9f 93       	push	r25
    126c:	af 93       	push	r26
    126e:	bf 93       	push	r27
    1270:	ef 93       	push	r30
    1272:	ff 93       	push	r31
    1274:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
    1278:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
    127c:	ac 01       	movw	r20, r24
    127e:	09 2e       	mov	r0, r25
    1280:	00 0c       	add	r0, r0
    1282:	66 0b       	sbc	r22, r22
    1284:	77 0b       	sbc	r23, r23
    1286:	9a 01       	movw	r18, r20
    1288:	11 27       	eor	r17, r17
    128a:	00 27       	eor	r16, r16
    128c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1290:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1294:	60 e0       	ldi	r22, 0x00	; 0
    1296:	70 e0       	ldi	r23, 0x00	; 0
    1298:	40 2b       	or	r20, r16
    129a:	51 2b       	or	r21, r17
    129c:	62 2b       	or	r22, r18
    129e:	73 2b       	or	r23, r19
    12a0:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <timestamp>
    12a4:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <timestamp+0x1>
    12a8:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <timestamp+0x2>
    12ac:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <timestamp+0x3>
    12b0:	b0 9b       	sbis	0x16, 0	; 22
    12b2:	1a c0       	rjmp	.+52     	; 0x12e8 <__vector_14+0x9a>
    12b4:	01 96       	adiw	r24, 0x01	; 1
    12b6:	09 2e       	mov	r0, r25
    12b8:	00 0c       	add	r0, r0
    12ba:	aa 0b       	sbc	r26, r26
    12bc:	bb 0b       	sbc	r27, r27
    12be:	bc 01       	movw	r22, r24
    12c0:	55 27       	eor	r21, r21
    12c2:	44 27       	eor	r20, r20
    12c4:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    12c8:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    12cc:	a0 e0       	ldi	r26, 0x00	; 0
    12ce:	b0 e0       	ldi	r27, 0x00	; 0
    12d0:	84 2b       	or	r24, r20
    12d2:	95 2b       	or	r25, r21
    12d4:	a6 2b       	or	r26, r22
    12d6:	b7 2b       	or	r27, r23
    12d8:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    12dc:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    12e0:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    12e4:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    12e8:	e0 91 d0 01 	lds	r30, 0x01D0	; 0x8001d0 <mtable+0x12>
    12ec:	f0 91 d1 01 	lds	r31, 0x01D1	; 0x8001d1 <mtable+0x13>
    12f0:	30 97       	sbiw	r30, 0x00	; 0
    12f2:	39 f0       	breq	.+14     	; 0x1302 <__vector_14+0xb4>
    12f4:	69 e0       	ldi	r22, 0x09	; 9
    12f6:	70 e0       	ldi	r23, 0x00	; 0
    12f8:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <otable+0x12>
    12fc:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <otable+0x13>
    1300:	09 95       	icall
    1302:	0e 94 0c 05 	call	0xa18	; 0xa18 <schedule>
    1306:	ff 91       	pop	r31
    1308:	ef 91       	pop	r30
    130a:	bf 91       	pop	r27
    130c:	af 91       	pop	r26
    130e:	9f 91       	pop	r25
    1310:	8f 91       	pop	r24
    1312:	7f 91       	pop	r23
    1314:	6f 91       	pop	r22
    1316:	5f 91       	pop	r21
    1318:	4f 91       	pop	r20
    131a:	3f 91       	pop	r19
    131c:	2f 91       	pop	r18
    131e:	1f 91       	pop	r17
    1320:	0f 91       	pop	r16
    1322:	0f 90       	pop	r0
    1324:	0f be       	out	0x3f, r0	; 63
    1326:	0f 90       	pop	r0
    1328:	1f 90       	pop	r1
    132a:	18 95       	reti

0000132c <__vector_15>:
    132c:	1f 92       	push	r1
    132e:	0f 92       	push	r0
    1330:	0f b6       	in	r0, 0x3f	; 63
    1332:	0f 92       	push	r0
    1334:	11 24       	eor	r1, r1
    1336:	0f 93       	push	r16
    1338:	1f 93       	push	r17
    133a:	2f 93       	push	r18
    133c:	3f 93       	push	r19
    133e:	4f 93       	push	r20
    1340:	5f 93       	push	r21
    1342:	6f 93       	push	r22
    1344:	7f 93       	push	r23
    1346:	8f 93       	push	r24
    1348:	9f 93       	push	r25
    134a:	af 93       	push	r26
    134c:	bf 93       	push	r27
    134e:	ef 93       	push	r30
    1350:	ff 93       	push	r31
    1352:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
    1356:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
    135a:	ac 01       	movw	r20, r24
    135c:	09 2e       	mov	r0, r25
    135e:	00 0c       	add	r0, r0
    1360:	66 0b       	sbc	r22, r22
    1362:	77 0b       	sbc	r23, r23
    1364:	9a 01       	movw	r18, r20
    1366:	11 27       	eor	r17, r17
    1368:	00 27       	eor	r16, r16
    136a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    136e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1372:	60 e0       	ldi	r22, 0x00	; 0
    1374:	70 e0       	ldi	r23, 0x00	; 0
    1376:	40 2b       	or	r20, r16
    1378:	51 2b       	or	r21, r17
    137a:	62 2b       	or	r22, r18
    137c:	73 2b       	or	r23, r19
    137e:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <timestamp>
    1382:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <timestamp+0x1>
    1386:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <timestamp+0x2>
    138a:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <timestamp+0x3>
    138e:	b0 9b       	sbis	0x16, 0	; 22
    1390:	1a c0       	rjmp	.+52     	; 0x13c6 <__vector_15+0x9a>
    1392:	01 96       	adiw	r24, 0x01	; 1
    1394:	09 2e       	mov	r0, r25
    1396:	00 0c       	add	r0, r0
    1398:	aa 0b       	sbc	r26, r26
    139a:	bb 0b       	sbc	r27, r27
    139c:	bc 01       	movw	r22, r24
    139e:	55 27       	eor	r21, r21
    13a0:	44 27       	eor	r20, r20
    13a2:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    13a6:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    13aa:	a0 e0       	ldi	r26, 0x00	; 0
    13ac:	b0 e0       	ldi	r27, 0x00	; 0
    13ae:	84 2b       	or	r24, r20
    13b0:	95 2b       	or	r25, r21
    13b2:	a6 2b       	or	r26, r22
    13b4:	b7 2b       	or	r27, r23
    13b6:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    13ba:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    13be:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    13c2:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    13c6:	e0 91 d2 01 	lds	r30, 0x01D2	; 0x8001d2 <mtable+0x14>
    13ca:	f0 91 d3 01 	lds	r31, 0x01D3	; 0x8001d3 <mtable+0x15>
    13ce:	30 97       	sbiw	r30, 0x00	; 0
    13d0:	39 f0       	breq	.+14     	; 0x13e0 <__vector_15+0xb4>
    13d2:	6a e0       	ldi	r22, 0x0A	; 10
    13d4:	70 e0       	ldi	r23, 0x00	; 0
    13d6:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <otable+0x14>
    13da:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <otable+0x15>
    13de:	09 95       	icall
    13e0:	0e 94 0c 05 	call	0xa18	; 0xa18 <schedule>
    13e4:	ff 91       	pop	r31
    13e6:	ef 91       	pop	r30
    13e8:	bf 91       	pop	r27
    13ea:	af 91       	pop	r26
    13ec:	9f 91       	pop	r25
    13ee:	8f 91       	pop	r24
    13f0:	7f 91       	pop	r23
    13f2:	6f 91       	pop	r22
    13f4:	5f 91       	pop	r21
    13f6:	4f 91       	pop	r20
    13f8:	3f 91       	pop	r19
    13fa:	2f 91       	pop	r18
    13fc:	1f 91       	pop	r17
    13fe:	0f 91       	pop	r16
    1400:	0f 90       	pop	r0
    1402:	0f be       	out	0x3f, r0	; 63
    1404:	0f 90       	pop	r0
    1406:	1f 90       	pop	r1
    1408:	18 95       	reti

0000140a <__vector_16>:
    140a:	1f 92       	push	r1
    140c:	0f 92       	push	r0
    140e:	0f b6       	in	r0, 0x3f	; 63
    1410:	0f 92       	push	r0
    1412:	11 24       	eor	r1, r1
    1414:	0f 93       	push	r16
    1416:	1f 93       	push	r17
    1418:	2f 93       	push	r18
    141a:	3f 93       	push	r19
    141c:	4f 93       	push	r20
    141e:	5f 93       	push	r21
    1420:	6f 93       	push	r22
    1422:	7f 93       	push	r23
    1424:	8f 93       	push	r24
    1426:	9f 93       	push	r25
    1428:	af 93       	push	r26
    142a:	bf 93       	push	r27
    142c:	ef 93       	push	r30
    142e:	ff 93       	push	r31
    1430:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
    1434:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
    1438:	ac 01       	movw	r20, r24
    143a:	09 2e       	mov	r0, r25
    143c:	00 0c       	add	r0, r0
    143e:	66 0b       	sbc	r22, r22
    1440:	77 0b       	sbc	r23, r23
    1442:	9a 01       	movw	r18, r20
    1444:	11 27       	eor	r17, r17
    1446:	00 27       	eor	r16, r16
    1448:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    144c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1450:	60 e0       	ldi	r22, 0x00	; 0
    1452:	70 e0       	ldi	r23, 0x00	; 0
    1454:	40 2b       	or	r20, r16
    1456:	51 2b       	or	r21, r17
    1458:	62 2b       	or	r22, r18
    145a:	73 2b       	or	r23, r19
    145c:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <timestamp>
    1460:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <timestamp+0x1>
    1464:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <timestamp+0x2>
    1468:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <timestamp+0x3>
    146c:	b0 9b       	sbis	0x16, 0	; 22
    146e:	1a c0       	rjmp	.+52     	; 0x14a4 <__vector_16+0x9a>
    1470:	01 96       	adiw	r24, 0x01	; 1
    1472:	09 2e       	mov	r0, r25
    1474:	00 0c       	add	r0, r0
    1476:	aa 0b       	sbc	r26, r26
    1478:	bb 0b       	sbc	r27, r27
    147a:	bc 01       	movw	r22, r24
    147c:	55 27       	eor	r21, r21
    147e:	44 27       	eor	r20, r20
    1480:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1484:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1488:	a0 e0       	ldi	r26, 0x00	; 0
    148a:	b0 e0       	ldi	r27, 0x00	; 0
    148c:	84 2b       	or	r24, r20
    148e:	95 2b       	or	r25, r21
    1490:	a6 2b       	or	r26, r22
    1492:	b7 2b       	or	r27, r23
    1494:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    1498:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    149c:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    14a0:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    14a4:	e0 91 d4 01 	lds	r30, 0x01D4	; 0x8001d4 <mtable+0x16>
    14a8:	f0 91 d5 01 	lds	r31, 0x01D5	; 0x8001d5 <mtable+0x17>
    14ac:	30 97       	sbiw	r30, 0x00	; 0
    14ae:	39 f0       	breq	.+14     	; 0x14be <__vector_16+0xb4>
    14b0:	6b e0       	ldi	r22, 0x0B	; 11
    14b2:	70 e0       	ldi	r23, 0x00	; 0
    14b4:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <otable+0x16>
    14b8:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <otable+0x17>
    14bc:	09 95       	icall
    14be:	0e 94 0c 05 	call	0xa18	; 0xa18 <schedule>
    14c2:	ff 91       	pop	r31
    14c4:	ef 91       	pop	r30
    14c6:	bf 91       	pop	r27
    14c8:	af 91       	pop	r26
    14ca:	9f 91       	pop	r25
    14cc:	8f 91       	pop	r24
    14ce:	7f 91       	pop	r23
    14d0:	6f 91       	pop	r22
    14d2:	5f 91       	pop	r21
    14d4:	4f 91       	pop	r20
    14d6:	3f 91       	pop	r19
    14d8:	2f 91       	pop	r18
    14da:	1f 91       	pop	r17
    14dc:	0f 91       	pop	r16
    14de:	0f 90       	pop	r0
    14e0:	0f be       	out	0x3f, r0	; 63
    14e2:	0f 90       	pop	r0
    14e4:	1f 90       	pop	r1
    14e6:	18 95       	reti

000014e8 <__vector_17>:
    14e8:	1f 92       	push	r1
    14ea:	0f 92       	push	r0
    14ec:	0f b6       	in	r0, 0x3f	; 63
    14ee:	0f 92       	push	r0
    14f0:	11 24       	eor	r1, r1
    14f2:	0f 93       	push	r16
    14f4:	1f 93       	push	r17
    14f6:	2f 93       	push	r18
    14f8:	3f 93       	push	r19
    14fa:	4f 93       	push	r20
    14fc:	5f 93       	push	r21
    14fe:	6f 93       	push	r22
    1500:	7f 93       	push	r23
    1502:	8f 93       	push	r24
    1504:	9f 93       	push	r25
    1506:	af 93       	push	r26
    1508:	bf 93       	push	r27
    150a:	ef 93       	push	r30
    150c:	ff 93       	push	r31
    150e:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
    1512:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
    1516:	ac 01       	movw	r20, r24
    1518:	09 2e       	mov	r0, r25
    151a:	00 0c       	add	r0, r0
    151c:	66 0b       	sbc	r22, r22
    151e:	77 0b       	sbc	r23, r23
    1520:	9a 01       	movw	r18, r20
    1522:	11 27       	eor	r17, r17
    1524:	00 27       	eor	r16, r16
    1526:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    152a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    152e:	60 e0       	ldi	r22, 0x00	; 0
    1530:	70 e0       	ldi	r23, 0x00	; 0
    1532:	40 2b       	or	r20, r16
    1534:	51 2b       	or	r21, r17
    1536:	62 2b       	or	r22, r18
    1538:	73 2b       	or	r23, r19
    153a:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <timestamp>
    153e:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <timestamp+0x1>
    1542:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <timestamp+0x2>
    1546:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <timestamp+0x3>
    154a:	b0 9b       	sbis	0x16, 0	; 22
    154c:	1a c0       	rjmp	.+52     	; 0x1582 <__vector_17+0x9a>
    154e:	01 96       	adiw	r24, 0x01	; 1
    1550:	09 2e       	mov	r0, r25
    1552:	00 0c       	add	r0, r0
    1554:	aa 0b       	sbc	r26, r26
    1556:	bb 0b       	sbc	r27, r27
    1558:	bc 01       	movw	r22, r24
    155a:	55 27       	eor	r21, r21
    155c:	44 27       	eor	r20, r20
    155e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1562:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1566:	a0 e0       	ldi	r26, 0x00	; 0
    1568:	b0 e0       	ldi	r27, 0x00	; 0
    156a:	84 2b       	or	r24, r20
    156c:	95 2b       	or	r25, r21
    156e:	a6 2b       	or	r26, r22
    1570:	b7 2b       	or	r27, r23
    1572:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    1576:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    157a:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    157e:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    1582:	e0 91 d6 01 	lds	r30, 0x01D6	; 0x8001d6 <mtable+0x18>
    1586:	f0 91 d7 01 	lds	r31, 0x01D7	; 0x8001d7 <mtable+0x19>
    158a:	30 97       	sbiw	r30, 0x00	; 0
    158c:	39 f0       	breq	.+14     	; 0x159c <__vector_17+0xb4>
    158e:	6c e0       	ldi	r22, 0x0C	; 12
    1590:	70 e0       	ldi	r23, 0x00	; 0
    1592:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <otable+0x18>
    1596:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <otable+0x19>
    159a:	09 95       	icall
    159c:	0e 94 0c 05 	call	0xa18	; 0xa18 <schedule>
    15a0:	ff 91       	pop	r31
    15a2:	ef 91       	pop	r30
    15a4:	bf 91       	pop	r27
    15a6:	af 91       	pop	r26
    15a8:	9f 91       	pop	r25
    15aa:	8f 91       	pop	r24
    15ac:	7f 91       	pop	r23
    15ae:	6f 91       	pop	r22
    15b0:	5f 91       	pop	r21
    15b2:	4f 91       	pop	r20
    15b4:	3f 91       	pop	r19
    15b6:	2f 91       	pop	r18
    15b8:	1f 91       	pop	r17
    15ba:	0f 91       	pop	r16
    15bc:	0f 90       	pop	r0
    15be:	0f be       	out	0x3f, r0	; 63
    15c0:	0f 90       	pop	r0
    15c2:	1f 90       	pop	r1
    15c4:	18 95       	reti

000015c6 <__vector_18>:
    15c6:	1f 92       	push	r1
    15c8:	0f 92       	push	r0
    15ca:	0f b6       	in	r0, 0x3f	; 63
    15cc:	0f 92       	push	r0
    15ce:	11 24       	eor	r1, r1
    15d0:	0f 93       	push	r16
    15d2:	1f 93       	push	r17
    15d4:	2f 93       	push	r18
    15d6:	3f 93       	push	r19
    15d8:	4f 93       	push	r20
    15da:	5f 93       	push	r21
    15dc:	6f 93       	push	r22
    15de:	7f 93       	push	r23
    15e0:	8f 93       	push	r24
    15e2:	9f 93       	push	r25
    15e4:	af 93       	push	r26
    15e6:	bf 93       	push	r27
    15e8:	ef 93       	push	r30
    15ea:	ff 93       	push	r31
    15ec:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
    15f0:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
    15f4:	ac 01       	movw	r20, r24
    15f6:	09 2e       	mov	r0, r25
    15f8:	00 0c       	add	r0, r0
    15fa:	66 0b       	sbc	r22, r22
    15fc:	77 0b       	sbc	r23, r23
    15fe:	9a 01       	movw	r18, r20
    1600:	11 27       	eor	r17, r17
    1602:	00 27       	eor	r16, r16
    1604:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1608:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    160c:	60 e0       	ldi	r22, 0x00	; 0
    160e:	70 e0       	ldi	r23, 0x00	; 0
    1610:	40 2b       	or	r20, r16
    1612:	51 2b       	or	r21, r17
    1614:	62 2b       	or	r22, r18
    1616:	73 2b       	or	r23, r19
    1618:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <timestamp>
    161c:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <timestamp+0x1>
    1620:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <timestamp+0x2>
    1624:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <timestamp+0x3>
    1628:	b0 9b       	sbis	0x16, 0	; 22
    162a:	1a c0       	rjmp	.+52     	; 0x1660 <__vector_18+0x9a>
    162c:	01 96       	adiw	r24, 0x01	; 1
    162e:	09 2e       	mov	r0, r25
    1630:	00 0c       	add	r0, r0
    1632:	aa 0b       	sbc	r26, r26
    1634:	bb 0b       	sbc	r27, r27
    1636:	bc 01       	movw	r22, r24
    1638:	55 27       	eor	r21, r21
    163a:	44 27       	eor	r20, r20
    163c:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1640:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1644:	a0 e0       	ldi	r26, 0x00	; 0
    1646:	b0 e0       	ldi	r27, 0x00	; 0
    1648:	84 2b       	or	r24, r20
    164a:	95 2b       	or	r25, r21
    164c:	a6 2b       	or	r26, r22
    164e:	b7 2b       	or	r27, r23
    1650:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    1654:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    1658:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    165c:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    1660:	e0 91 d8 01 	lds	r30, 0x01D8	; 0x8001d8 <mtable+0x1a>
    1664:	f0 91 d9 01 	lds	r31, 0x01D9	; 0x8001d9 <mtable+0x1b>
    1668:	30 97       	sbiw	r30, 0x00	; 0
    166a:	39 f0       	breq	.+14     	; 0x167a <__vector_18+0xb4>
    166c:	6d e0       	ldi	r22, 0x0D	; 13
    166e:	70 e0       	ldi	r23, 0x00	; 0
    1670:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <otable+0x1a>
    1674:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <otable+0x1b>
    1678:	09 95       	icall
    167a:	0e 94 0c 05 	call	0xa18	; 0xa18 <schedule>
    167e:	ff 91       	pop	r31
    1680:	ef 91       	pop	r30
    1682:	bf 91       	pop	r27
    1684:	af 91       	pop	r26
    1686:	9f 91       	pop	r25
    1688:	8f 91       	pop	r24
    168a:	7f 91       	pop	r23
    168c:	6f 91       	pop	r22
    168e:	5f 91       	pop	r21
    1690:	4f 91       	pop	r20
    1692:	3f 91       	pop	r19
    1694:	2f 91       	pop	r18
    1696:	1f 91       	pop	r17
    1698:	0f 91       	pop	r16
    169a:	0f 90       	pop	r0
    169c:	0f be       	out	0x3f, r0	; 63
    169e:	0f 90       	pop	r0
    16a0:	1f 90       	pop	r1
    16a2:	18 95       	reti

000016a4 <__vector_19>:
    16a4:	1f 92       	push	r1
    16a6:	0f 92       	push	r0
    16a8:	0f b6       	in	r0, 0x3f	; 63
    16aa:	0f 92       	push	r0
    16ac:	11 24       	eor	r1, r1
    16ae:	0f 93       	push	r16
    16b0:	1f 93       	push	r17
    16b2:	2f 93       	push	r18
    16b4:	3f 93       	push	r19
    16b6:	4f 93       	push	r20
    16b8:	5f 93       	push	r21
    16ba:	6f 93       	push	r22
    16bc:	7f 93       	push	r23
    16be:	8f 93       	push	r24
    16c0:	9f 93       	push	r25
    16c2:	af 93       	push	r26
    16c4:	bf 93       	push	r27
    16c6:	ef 93       	push	r30
    16c8:	ff 93       	push	r31
    16ca:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
    16ce:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
    16d2:	ac 01       	movw	r20, r24
    16d4:	09 2e       	mov	r0, r25
    16d6:	00 0c       	add	r0, r0
    16d8:	66 0b       	sbc	r22, r22
    16da:	77 0b       	sbc	r23, r23
    16dc:	9a 01       	movw	r18, r20
    16de:	11 27       	eor	r17, r17
    16e0:	00 27       	eor	r16, r16
    16e2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    16e6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    16ea:	60 e0       	ldi	r22, 0x00	; 0
    16ec:	70 e0       	ldi	r23, 0x00	; 0
    16ee:	40 2b       	or	r20, r16
    16f0:	51 2b       	or	r21, r17
    16f2:	62 2b       	or	r22, r18
    16f4:	73 2b       	or	r23, r19
    16f6:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <timestamp>
    16fa:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <timestamp+0x1>
    16fe:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <timestamp+0x2>
    1702:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <timestamp+0x3>
    1706:	b0 9b       	sbis	0x16, 0	; 22
    1708:	1a c0       	rjmp	.+52     	; 0x173e <__vector_19+0x9a>
    170a:	01 96       	adiw	r24, 0x01	; 1
    170c:	09 2e       	mov	r0, r25
    170e:	00 0c       	add	r0, r0
    1710:	aa 0b       	sbc	r26, r26
    1712:	bb 0b       	sbc	r27, r27
    1714:	bc 01       	movw	r22, r24
    1716:	55 27       	eor	r21, r21
    1718:	44 27       	eor	r20, r20
    171a:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    171e:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1722:	a0 e0       	ldi	r26, 0x00	; 0
    1724:	b0 e0       	ldi	r27, 0x00	; 0
    1726:	84 2b       	or	r24, r20
    1728:	95 2b       	or	r25, r21
    172a:	a6 2b       	or	r26, r22
    172c:	b7 2b       	or	r27, r23
    172e:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    1732:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    1736:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    173a:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    173e:	e0 91 da 01 	lds	r30, 0x01DA	; 0x8001da <mtable+0x1c>
    1742:	f0 91 db 01 	lds	r31, 0x01DB	; 0x8001db <mtable+0x1d>
    1746:	30 97       	sbiw	r30, 0x00	; 0
    1748:	39 f0       	breq	.+14     	; 0x1758 <__vector_19+0xb4>
    174a:	6e e0       	ldi	r22, 0x0E	; 14
    174c:	70 e0       	ldi	r23, 0x00	; 0
    174e:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <otable+0x1c>
    1752:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <otable+0x1d>
    1756:	09 95       	icall
    1758:	0e 94 0c 05 	call	0xa18	; 0xa18 <schedule>
    175c:	ff 91       	pop	r31
    175e:	ef 91       	pop	r30
    1760:	bf 91       	pop	r27
    1762:	af 91       	pop	r26
    1764:	9f 91       	pop	r25
    1766:	8f 91       	pop	r24
    1768:	7f 91       	pop	r23
    176a:	6f 91       	pop	r22
    176c:	5f 91       	pop	r21
    176e:	4f 91       	pop	r20
    1770:	3f 91       	pop	r19
    1772:	2f 91       	pop	r18
    1774:	1f 91       	pop	r17
    1776:	0f 91       	pop	r16
    1778:	0f 90       	pop	r0
    177a:	0f be       	out	0x3f, r0	; 63
    177c:	0f 90       	pop	r0
    177e:	1f 90       	pop	r1
    1780:	18 95       	reti

00001782 <__vector_20>:
    1782:	1f 92       	push	r1
    1784:	0f 92       	push	r0
    1786:	0f b6       	in	r0, 0x3f	; 63
    1788:	0f 92       	push	r0
    178a:	11 24       	eor	r1, r1
    178c:	0f 93       	push	r16
    178e:	1f 93       	push	r17
    1790:	2f 93       	push	r18
    1792:	3f 93       	push	r19
    1794:	4f 93       	push	r20
    1796:	5f 93       	push	r21
    1798:	6f 93       	push	r22
    179a:	7f 93       	push	r23
    179c:	8f 93       	push	r24
    179e:	9f 93       	push	r25
    17a0:	af 93       	push	r26
    17a2:	bf 93       	push	r27
    17a4:	ef 93       	push	r30
    17a6:	ff 93       	push	r31
    17a8:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
    17ac:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
    17b0:	ac 01       	movw	r20, r24
    17b2:	09 2e       	mov	r0, r25
    17b4:	00 0c       	add	r0, r0
    17b6:	66 0b       	sbc	r22, r22
    17b8:	77 0b       	sbc	r23, r23
    17ba:	9a 01       	movw	r18, r20
    17bc:	11 27       	eor	r17, r17
    17be:	00 27       	eor	r16, r16
    17c0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    17c4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    17c8:	60 e0       	ldi	r22, 0x00	; 0
    17ca:	70 e0       	ldi	r23, 0x00	; 0
    17cc:	40 2b       	or	r20, r16
    17ce:	51 2b       	or	r21, r17
    17d0:	62 2b       	or	r22, r18
    17d2:	73 2b       	or	r23, r19
    17d4:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <timestamp>
    17d8:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <timestamp+0x1>
    17dc:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <timestamp+0x2>
    17e0:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <timestamp+0x3>
    17e4:	b0 9b       	sbis	0x16, 0	; 22
    17e6:	1a c0       	rjmp	.+52     	; 0x181c <__vector_20+0x9a>
    17e8:	01 96       	adiw	r24, 0x01	; 1
    17ea:	09 2e       	mov	r0, r25
    17ec:	00 0c       	add	r0, r0
    17ee:	aa 0b       	sbc	r26, r26
    17f0:	bb 0b       	sbc	r27, r27
    17f2:	bc 01       	movw	r22, r24
    17f4:	55 27       	eor	r21, r21
    17f6:	44 27       	eor	r20, r20
    17f8:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    17fc:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1800:	a0 e0       	ldi	r26, 0x00	; 0
    1802:	b0 e0       	ldi	r27, 0x00	; 0
    1804:	84 2b       	or	r24, r20
    1806:	95 2b       	or	r25, r21
    1808:	a6 2b       	or	r26, r22
    180a:	b7 2b       	or	r27, r23
    180c:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    1810:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    1814:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    1818:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    181c:	e0 91 dc 01 	lds	r30, 0x01DC	; 0x8001dc <mtable+0x1e>
    1820:	f0 91 dd 01 	lds	r31, 0x01DD	; 0x8001dd <mtable+0x1f>
    1824:	30 97       	sbiw	r30, 0x00	; 0
    1826:	39 f0       	breq	.+14     	; 0x1836 <__vector_20+0xb4>
    1828:	6f e0       	ldi	r22, 0x0F	; 15
    182a:	70 e0       	ldi	r23, 0x00	; 0
    182c:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <otable+0x1e>
    1830:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <otable+0x1f>
    1834:	09 95       	icall
    1836:	0e 94 0c 05 	call	0xa18	; 0xa18 <schedule>
    183a:	ff 91       	pop	r31
    183c:	ef 91       	pop	r30
    183e:	bf 91       	pop	r27
    1840:	af 91       	pop	r26
    1842:	9f 91       	pop	r25
    1844:	8f 91       	pop	r24
    1846:	7f 91       	pop	r23
    1848:	6f 91       	pop	r22
    184a:	5f 91       	pop	r21
    184c:	4f 91       	pop	r20
    184e:	3f 91       	pop	r19
    1850:	2f 91       	pop	r18
    1852:	1f 91       	pop	r17
    1854:	0f 91       	pop	r16
    1856:	0f 90       	pop	r0
    1858:	0f be       	out	0x3f, r0	; 63
    185a:	0f 90       	pop	r0
    185c:	1f 90       	pop	r1
    185e:	18 95       	reti

00001860 <__vector_21>:
    1860:	1f 92       	push	r1
    1862:	0f 92       	push	r0
    1864:	0f b6       	in	r0, 0x3f	; 63
    1866:	0f 92       	push	r0
    1868:	11 24       	eor	r1, r1
    186a:	0f 93       	push	r16
    186c:	1f 93       	push	r17
    186e:	2f 93       	push	r18
    1870:	3f 93       	push	r19
    1872:	4f 93       	push	r20
    1874:	5f 93       	push	r21
    1876:	6f 93       	push	r22
    1878:	7f 93       	push	r23
    187a:	8f 93       	push	r24
    187c:	9f 93       	push	r25
    187e:	af 93       	push	r26
    1880:	bf 93       	push	r27
    1882:	ef 93       	push	r30
    1884:	ff 93       	push	r31
    1886:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
    188a:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
    188e:	ac 01       	movw	r20, r24
    1890:	09 2e       	mov	r0, r25
    1892:	00 0c       	add	r0, r0
    1894:	66 0b       	sbc	r22, r22
    1896:	77 0b       	sbc	r23, r23
    1898:	9a 01       	movw	r18, r20
    189a:	11 27       	eor	r17, r17
    189c:	00 27       	eor	r16, r16
    189e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    18a2:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    18a6:	60 e0       	ldi	r22, 0x00	; 0
    18a8:	70 e0       	ldi	r23, 0x00	; 0
    18aa:	40 2b       	or	r20, r16
    18ac:	51 2b       	or	r21, r17
    18ae:	62 2b       	or	r22, r18
    18b0:	73 2b       	or	r23, r19
    18b2:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <timestamp>
    18b6:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <timestamp+0x1>
    18ba:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <timestamp+0x2>
    18be:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <timestamp+0x3>
    18c2:	b0 9b       	sbis	0x16, 0	; 22
    18c4:	1a c0       	rjmp	.+52     	; 0x18fa <__vector_21+0x9a>
    18c6:	01 96       	adiw	r24, 0x01	; 1
    18c8:	09 2e       	mov	r0, r25
    18ca:	00 0c       	add	r0, r0
    18cc:	aa 0b       	sbc	r26, r26
    18ce:	bb 0b       	sbc	r27, r27
    18d0:	bc 01       	movw	r22, r24
    18d2:	55 27       	eor	r21, r21
    18d4:	44 27       	eor	r20, r20
    18d6:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    18da:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    18de:	a0 e0       	ldi	r26, 0x00	; 0
    18e0:	b0 e0       	ldi	r27, 0x00	; 0
    18e2:	84 2b       	or	r24, r20
    18e4:	95 2b       	or	r25, r21
    18e6:	a6 2b       	or	r26, r22
    18e8:	b7 2b       	or	r27, r23
    18ea:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    18ee:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    18f2:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    18f6:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    18fa:	e0 91 de 01 	lds	r30, 0x01DE	; 0x8001de <mtable+0x20>
    18fe:	f0 91 df 01 	lds	r31, 0x01DF	; 0x8001df <mtable+0x21>
    1902:	30 97       	sbiw	r30, 0x00	; 0
    1904:	39 f0       	breq	.+14     	; 0x1914 <__vector_21+0xb4>
    1906:	60 e1       	ldi	r22, 0x10	; 16
    1908:	70 e0       	ldi	r23, 0x00	; 0
    190a:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <otable+0x20>
    190e:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <otable+0x21>
    1912:	09 95       	icall
    1914:	0e 94 0c 05 	call	0xa18	; 0xa18 <schedule>
    1918:	ff 91       	pop	r31
    191a:	ef 91       	pop	r30
    191c:	bf 91       	pop	r27
    191e:	af 91       	pop	r26
    1920:	9f 91       	pop	r25
    1922:	8f 91       	pop	r24
    1924:	7f 91       	pop	r23
    1926:	6f 91       	pop	r22
    1928:	5f 91       	pop	r21
    192a:	4f 91       	pop	r20
    192c:	3f 91       	pop	r19
    192e:	2f 91       	pop	r18
    1930:	1f 91       	pop	r17
    1932:	0f 91       	pop	r16
    1934:	0f 90       	pop	r0
    1936:	0f be       	out	0x3f, r0	; 63
    1938:	0f 90       	pop	r0
    193a:	1f 90       	pop	r1
    193c:	18 95       	reti

0000193e <__vector_22>:
    193e:	1f 92       	push	r1
    1940:	0f 92       	push	r0
    1942:	0f b6       	in	r0, 0x3f	; 63
    1944:	0f 92       	push	r0
    1946:	11 24       	eor	r1, r1
    1948:	0f 93       	push	r16
    194a:	1f 93       	push	r17
    194c:	2f 93       	push	r18
    194e:	3f 93       	push	r19
    1950:	4f 93       	push	r20
    1952:	5f 93       	push	r21
    1954:	6f 93       	push	r22
    1956:	7f 93       	push	r23
    1958:	8f 93       	push	r24
    195a:	9f 93       	push	r25
    195c:	af 93       	push	r26
    195e:	bf 93       	push	r27
    1960:	ef 93       	push	r30
    1962:	ff 93       	push	r31
    1964:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
    1968:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
    196c:	ac 01       	movw	r20, r24
    196e:	09 2e       	mov	r0, r25
    1970:	00 0c       	add	r0, r0
    1972:	66 0b       	sbc	r22, r22
    1974:	77 0b       	sbc	r23, r23
    1976:	9a 01       	movw	r18, r20
    1978:	11 27       	eor	r17, r17
    197a:	00 27       	eor	r16, r16
    197c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1980:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1984:	60 e0       	ldi	r22, 0x00	; 0
    1986:	70 e0       	ldi	r23, 0x00	; 0
    1988:	40 2b       	or	r20, r16
    198a:	51 2b       	or	r21, r17
    198c:	62 2b       	or	r22, r18
    198e:	73 2b       	or	r23, r19
    1990:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <timestamp>
    1994:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <timestamp+0x1>
    1998:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <timestamp+0x2>
    199c:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <timestamp+0x3>
    19a0:	b0 9b       	sbis	0x16, 0	; 22
    19a2:	1a c0       	rjmp	.+52     	; 0x19d8 <__vector_22+0x9a>
    19a4:	01 96       	adiw	r24, 0x01	; 1
    19a6:	09 2e       	mov	r0, r25
    19a8:	00 0c       	add	r0, r0
    19aa:	aa 0b       	sbc	r26, r26
    19ac:	bb 0b       	sbc	r27, r27
    19ae:	bc 01       	movw	r22, r24
    19b0:	55 27       	eor	r21, r21
    19b2:	44 27       	eor	r20, r20
    19b4:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    19b8:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    19bc:	a0 e0       	ldi	r26, 0x00	; 0
    19be:	b0 e0       	ldi	r27, 0x00	; 0
    19c0:	84 2b       	or	r24, r20
    19c2:	95 2b       	or	r25, r21
    19c4:	a6 2b       	or	r26, r22
    19c6:	b7 2b       	or	r27, r23
    19c8:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    19cc:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    19d0:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    19d4:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    19d8:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <mtable+0x22>
    19dc:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <mtable+0x23>
    19e0:	30 97       	sbiw	r30, 0x00	; 0
    19e2:	39 f0       	breq	.+14     	; 0x19f2 <__vector_22+0xb4>
    19e4:	61 e1       	ldi	r22, 0x11	; 17
    19e6:	70 e0       	ldi	r23, 0x00	; 0
    19e8:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <otable+0x22>
    19ec:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <otable+0x23>
    19f0:	09 95       	icall
    19f2:	0e 94 0c 05 	call	0xa18	; 0xa18 <schedule>
    19f6:	ff 91       	pop	r31
    19f8:	ef 91       	pop	r30
    19fa:	bf 91       	pop	r27
    19fc:	af 91       	pop	r26
    19fe:	9f 91       	pop	r25
    1a00:	8f 91       	pop	r24
    1a02:	7f 91       	pop	r23
    1a04:	6f 91       	pop	r22
    1a06:	5f 91       	pop	r21
    1a08:	4f 91       	pop	r20
    1a0a:	3f 91       	pop	r19
    1a0c:	2f 91       	pop	r18
    1a0e:	1f 91       	pop	r17
    1a10:	0f 91       	pop	r16
    1a12:	0f 90       	pop	r0
    1a14:	0f be       	out	0x3f, r0	; 63
    1a16:	0f 90       	pop	r0
    1a18:	1f 90       	pop	r1
    1a1a:	18 95       	reti

00001a1c <idle>:
    1a1c:	0e 94 0c 05 	call	0xa18	; 0xa18 <schedule>
    1a20:	78 94       	sei
    1a22:	81 e0       	ldi	r24, 0x01	; 1
    1a24:	83 bf       	out	0x33, r24	; 51
    1a26:	88 95       	sleep
    1a28:	fc cf       	rjmp	.-8      	; 0x1a22 <idle+0x6>

00001a2a <__vector_9>:
    1a2a:	1f 92       	push	r1
    1a2c:	0f 92       	push	r0
    1a2e:	0f b6       	in	r0, 0x3f	; 63
    1a30:	0f 92       	push	r0
    1a32:	11 24       	eor	r1, r1
    1a34:	2f 93       	push	r18
    1a36:	3f 93       	push	r19
    1a38:	4f 93       	push	r20
    1a3a:	5f 93       	push	r21
    1a3c:	6f 93       	push	r22
    1a3e:	7f 93       	push	r23
    1a40:	8f 93       	push	r24
    1a42:	9f 93       	push	r25
    1a44:	ef 93       	push	r30
    1a46:	ff 93       	push	r31
    1a48:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
    1a4c:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
    1a50:	01 96       	adiw	r24, 0x01	; 1
    1a52:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <__data_end+0x1>
    1a56:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>
    1a5a:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <timerQ>
    1a5e:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <timerQ+0x1>
    1a62:	30 97       	sbiw	r30, 0x00	; 0
    1a64:	01 f1       	breq	.+64     	; 0x1aa6 <__vector_9+0x7c>
    1a66:	42 81       	ldd	r20, Z+2	; 0x02
    1a68:	53 81       	ldd	r21, Z+3	; 0x03
    1a6a:	64 81       	ldd	r22, Z+4	; 0x04
    1a6c:	75 81       	ldd	r23, Z+5	; 0x05
    1a6e:	86 17       	cp	r24, r22
    1a70:	97 07       	cpc	r25, r23
    1a72:	c9 f4       	brne	.+50     	; 0x1aa6 <__vector_9+0x7c>
    1a74:	ca 01       	movw	r24, r20
    1a76:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1a7a:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1a7e:	42 1b       	sub	r20, r18
    1a80:	53 0b       	sbc	r21, r19
    1a82:	41 30       	cpi	r20, 0x01	; 1
    1a84:	51 05       	cpc	r21, r1
    1a86:	29 f4       	brne	.+10     	; 0x1a92 <__vector_9+0x68>
    1a88:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1a8c:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1a90:	01 96       	adiw	r24, 0x01	; 1
    1a92:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1a96:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1a9a:	ef e6       	ldi	r30, 0x6F	; 111
    1a9c:	f0 e0       	ldi	r31, 0x00	; 0
    1a9e:	80 81       	ld	r24, Z
    1aa0:	82 60       	ori	r24, 0x02	; 2
    1aa2:	80 83       	st	Z, r24
    1aa4:	05 c0       	rjmp	.+10     	; 0x1ab0 <__vector_9+0x86>
    1aa6:	ef e6       	ldi	r30, 0x6F	; 111
    1aa8:	f0 e0       	ldi	r31, 0x00	; 0
    1aaa:	80 81       	ld	r24, Z
    1aac:	8d 7f       	andi	r24, 0xFD	; 253
    1aae:	80 83       	st	Z, r24
    1ab0:	ff 91       	pop	r31
    1ab2:	ef 91       	pop	r30
    1ab4:	9f 91       	pop	r25
    1ab6:	8f 91       	pop	r24
    1ab8:	7f 91       	pop	r23
    1aba:	6f 91       	pop	r22
    1abc:	5f 91       	pop	r21
    1abe:	4f 91       	pop	r20
    1ac0:	3f 91       	pop	r19
    1ac2:	2f 91       	pop	r18
    1ac4:	0f 90       	pop	r0
    1ac6:	0f be       	out	0x3f, r0	; 63
    1ac8:	0f 90       	pop	r0
    1aca:	1f 90       	pop	r1
    1acc:	18 95       	reti

00001ace <__vector_7>:
    1ace:	1f 92       	push	r1
    1ad0:	0f 92       	push	r0
    1ad2:	0f b6       	in	r0, 0x3f	; 63
    1ad4:	0f 92       	push	r0
    1ad6:	11 24       	eor	r1, r1
    1ad8:	cf 92       	push	r12
    1ada:	df 92       	push	r13
    1adc:	ef 92       	push	r14
    1ade:	ff 92       	push	r15
    1ae0:	2f 93       	push	r18
    1ae2:	3f 93       	push	r19
    1ae4:	4f 93       	push	r20
    1ae6:	5f 93       	push	r21
    1ae8:	6f 93       	push	r22
    1aea:	7f 93       	push	r23
    1aec:	8f 93       	push	r24
    1aee:	9f 93       	push	r25
    1af0:	af 93       	push	r26
    1af2:	bf 93       	push	r27
    1af4:	ef 93       	push	r30
    1af6:	ff 93       	push	r31
    1af8:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
    1afc:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
    1b00:	6c 01       	movw	r12, r24
    1b02:	09 2e       	mov	r0, r25
    1b04:	00 0c       	add	r0, r0
    1b06:	ee 08       	sbc	r14, r14
    1b08:	ff 08       	sbc	r15, r15
    1b0a:	76 01       	movw	r14, r12
    1b0c:	dd 24       	eor	r13, r13
    1b0e:	cc 24       	eor	r12, r12
    1b10:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1b14:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1b18:	60 e0       	ldi	r22, 0x00	; 0
    1b1a:	70 e0       	ldi	r23, 0x00	; 0
    1b1c:	c4 2a       	or	r12, r20
    1b1e:	d5 2a       	or	r13, r21
    1b20:	e6 2a       	or	r14, r22
    1b22:	f7 2a       	or	r15, r23
    1b24:	b0 9b       	sbis	0x16, 0	; 22
    1b26:	1e c0       	rjmp	.+60     	; 0x1b64 <__vector_7+0x96>
    1b28:	6c 01       	movw	r12, r24
    1b2a:	2f ef       	ldi	r18, 0xFF	; 255
    1b2c:	c2 1a       	sub	r12, r18
    1b2e:	d2 0a       	sbc	r13, r18
    1b30:	0d 2c       	mov	r0, r13
    1b32:	00 0c       	add	r0, r0
    1b34:	ee 08       	sbc	r14, r14
    1b36:	ff 08       	sbc	r15, r15
    1b38:	d6 01       	movw	r26, r12
    1b3a:	99 27       	eor	r25, r25
    1b3c:	88 27       	eor	r24, r24
    1b3e:	c0 90 84 00 	lds	r12, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1b42:	d0 90 85 00 	lds	r13, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1b46:	e1 2c       	mov	r14, r1
    1b48:	f1 2c       	mov	r15, r1
    1b4a:	c8 2a       	or	r12, r24
    1b4c:	d9 2a       	or	r13, r25
    1b4e:	ea 2a       	or	r14, r26
    1b50:	fb 2a       	or	r15, r27
    1b52:	08 c0       	rjmp	.+16     	; 0x1b64 <__vector_7+0x96>
    1b54:	82 e2       	ldi	r24, 0x22	; 34
    1b56:	91 e0       	ldi	r25, 0x01	; 1
    1b58:	0e 94 d7 04 	call	0x9ae	; 0x9ae <dequeue>
    1b5c:	64 e2       	ldi	r22, 0x24	; 36
    1b5e:	71 e0       	ldi	r23, 0x01	; 1
    1b60:	0e 94 75 04 	call	0x8ea	; 0x8ea <enqueueByDeadline>
    1b64:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <timerQ>
    1b68:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <timerQ+0x1>
    1b6c:	30 97       	sbiw	r30, 0x00	; 0
    1b6e:	69 f0       	breq	.+26     	; 0x1b8a <__vector_7+0xbc>
    1b70:	82 81       	ldd	r24, Z+2	; 0x02
    1b72:	93 81       	ldd	r25, Z+3	; 0x03
    1b74:	a4 81       	ldd	r26, Z+4	; 0x04
    1b76:	b5 81       	ldd	r27, Z+5	; 0x05
    1b78:	8c 19       	sub	r24, r12
    1b7a:	9d 09       	sbc	r25, r13
    1b7c:	ae 09       	sbc	r26, r14
    1b7e:	bf 09       	sbc	r27, r15
    1b80:	18 16       	cp	r1, r24
    1b82:	19 06       	cpc	r1, r25
    1b84:	1a 06       	cpc	r1, r26
    1b86:	1b 06       	cpc	r1, r27
    1b88:	2c f7       	brge	.-54     	; 0x1b54 <__vector_7+0x86>
    1b8a:	30 97       	sbiw	r30, 0x00	; 0
    1b8c:	21 f1       	breq	.+72     	; 0x1bd6 <__vector_7+0x108>
    1b8e:	82 81       	ldd	r24, Z+2	; 0x02
    1b90:	93 81       	ldd	r25, Z+3	; 0x03
    1b92:	a4 81       	ldd	r26, Z+4	; 0x04
    1b94:	b5 81       	ldd	r27, Z+5	; 0x05
    1b96:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
    1b9a:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
    1b9e:	2a 17       	cp	r18, r26
    1ba0:	3b 07       	cpc	r19, r27
    1ba2:	c9 f4       	brne	.+50     	; 0x1bd6 <__vector_7+0x108>
    1ba4:	9c 01       	movw	r18, r24
    1ba6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1baa:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1bae:	84 1b       	sub	r24, r20
    1bb0:	95 0b       	sbc	r25, r21
    1bb2:	01 97       	sbiw	r24, 0x01	; 1
    1bb4:	31 f4       	brne	.+12     	; 0x1bc2 <__vector_7+0xf4>
    1bb6:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1bba:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1bbe:	2f 5f       	subi	r18, 0xFF	; 255
    1bc0:	3f 4f       	sbci	r19, 0xFF	; 255
    1bc2:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1bc6:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1bca:	ef e6       	ldi	r30, 0x6F	; 111
    1bcc:	f0 e0       	ldi	r31, 0x00	; 0
    1bce:	80 81       	ld	r24, Z
    1bd0:	82 60       	ori	r24, 0x02	; 2
    1bd2:	80 83       	st	Z, r24
    1bd4:	05 c0       	rjmp	.+10     	; 0x1be0 <__vector_7+0x112>
    1bd6:	ef e6       	ldi	r30, 0x6F	; 111
    1bd8:	f0 e0       	ldi	r31, 0x00	; 0
    1bda:	80 81       	ld	r24, Z
    1bdc:	8d 7f       	andi	r24, 0xFD	; 253
    1bde:	80 83       	st	Z, r24
    1be0:	0e 94 0c 05 	call	0xa18	; 0xa18 <schedule>
    1be4:	ff 91       	pop	r31
    1be6:	ef 91       	pop	r30
    1be8:	bf 91       	pop	r27
    1bea:	af 91       	pop	r26
    1bec:	9f 91       	pop	r25
    1bee:	8f 91       	pop	r24
    1bf0:	7f 91       	pop	r23
    1bf2:	6f 91       	pop	r22
    1bf4:	5f 91       	pop	r21
    1bf6:	4f 91       	pop	r20
    1bf8:	3f 91       	pop	r19
    1bfa:	2f 91       	pop	r18
    1bfc:	ff 90       	pop	r15
    1bfe:	ef 90       	pop	r14
    1c00:	df 90       	pop	r13
    1c02:	cf 90       	pop	r12
    1c04:	0f 90       	pop	r0
    1c06:	0f be       	out	0x3f, r0	; 63
    1c08:	0f 90       	pop	r0
    1c0a:	1f 90       	pop	r1
    1c0c:	18 95       	reti

00001c0e <async>:
    1c0e:	3f 92       	push	r3
    1c10:	4f 92       	push	r4
    1c12:	5f 92       	push	r5
    1c14:	6f 92       	push	r6
    1c16:	7f 92       	push	r7
    1c18:	8f 92       	push	r8
    1c1a:	9f 92       	push	r9
    1c1c:	af 92       	push	r10
    1c1e:	bf 92       	push	r11
    1c20:	cf 92       	push	r12
    1c22:	df 92       	push	r13
    1c24:	ef 92       	push	r14
    1c26:	ff 92       	push	r15
    1c28:	0f 93       	push	r16
    1c2a:	1f 93       	push	r17
    1c2c:	cf 93       	push	r28
    1c2e:	df 93       	push	r29
    1c30:	2b 01       	movw	r4, r22
    1c32:	3c 01       	movw	r6, r24
    1c34:	49 01       	movw	r8, r18
    1c36:	5a 01       	movw	r10, r20
    1c38:	8f b7       	in	r24, 0x3f	; 63
    1c3a:	80 78       	andi	r24, 0x80	; 128
    1c3c:	38 2e       	mov	r3, r24
    1c3e:	f8 94       	cli
    1c40:	86 e0       	ldi	r24, 0x06	; 6
    1c42:	91 e0       	ldi	r25, 0x01	; 1
    1c44:	0e 94 d7 04 	call	0x9ae	; 0x9ae <dequeue>
    1c48:	ec 01       	movw	r28, r24
    1c4a:	1b 87       	std	Y+11, r17	; 0x0b
    1c4c:	0a 87       	std	Y+10, r16	; 0x0a
    1c4e:	fd 86       	std	Y+13, r15	; 0x0d
    1c50:	ec 86       	std	Y+12, r14	; 0x0c
    1c52:	df 86       	std	Y+15, r13	; 0x0f
    1c54:	ce 86       	std	Y+14, r12	; 0x0e
    1c56:	33 20       	and	r3, r3
    1c58:	61 f0       	breq	.+24     	; 0x1c72 <async+0x64>
    1c5a:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
    1c5e:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
    1c62:	02 80       	ldd	r0, Z+2	; 0x02
    1c64:	f3 81       	ldd	r31, Z+3	; 0x03
    1c66:	e0 2d       	mov	r30, r0
    1c68:	82 81       	ldd	r24, Z+2	; 0x02
    1c6a:	93 81       	ldd	r25, Z+3	; 0x03
    1c6c:	a4 81       	ldd	r26, Z+4	; 0x04
    1c6e:	b5 81       	ldd	r27, Z+5	; 0x05
    1c70:	08 c0       	rjmp	.+16     	; 0x1c82 <async+0x74>
    1c72:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <timestamp>
    1c76:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <timestamp+0x1>
    1c7a:	a0 91 20 01 	lds	r26, 0x0120	; 0x800120 <timestamp+0x2>
    1c7e:	b0 91 21 01 	lds	r27, 0x0121	; 0x800121 <timestamp+0x3>
    1c82:	48 0e       	add	r4, r24
    1c84:	59 1e       	adc	r5, r25
    1c86:	6a 1e       	adc	r6, r26
    1c88:	7b 1e       	adc	r7, r27
    1c8a:	4a 82       	std	Y+2, r4	; 0x02
    1c8c:	5b 82       	std	Y+3, r5	; 0x03
    1c8e:	6c 82       	std	Y+4, r6	; 0x04
    1c90:	7d 82       	std	Y+5, r7	; 0x05
    1c92:	18 14       	cp	r1, r8
    1c94:	19 04       	cpc	r1, r9
    1c96:	1a 04       	cpc	r1, r10
    1c98:	1b 04       	cpc	r1, r11
    1c9a:	44 f0       	brlt	.+16     	; 0x1cac <async+0x9e>
    1c9c:	0f 2e       	mov	r0, r31
    1c9e:	88 24       	eor	r8, r8
    1ca0:	8a 94       	dec	r8
    1ca2:	98 2c       	mov	r9, r8
    1ca4:	a8 2c       	mov	r10, r8
    1ca6:	ff e7       	ldi	r31, 0x7F	; 127
    1ca8:	bf 2e       	mov	r11, r31
    1caa:	f0 2d       	mov	r31, r0
    1cac:	84 0c       	add	r8, r4
    1cae:	95 1c       	adc	r9, r5
    1cb0:	a6 1c       	adc	r10, r6
    1cb2:	b7 1c       	adc	r11, r7
    1cb4:	8e 82       	std	Y+6, r8	; 0x06
    1cb6:	9f 82       	std	Y+7, r9	; 0x07
    1cb8:	a8 86       	std	Y+8, r10	; 0x08
    1cba:	b9 86       	std	Y+9, r11	; 0x09
    1cbc:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
    1cc0:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
    1cc4:	c9 01       	movw	r24, r18
    1cc6:	03 2e       	mov	r0, r19
    1cc8:	00 0c       	add	r0, r0
    1cca:	aa 0b       	sbc	r26, r26
    1ccc:	bb 0b       	sbc	r27, r27
    1cce:	dc 01       	movw	r26, r24
    1cd0:	99 27       	eor	r25, r25
    1cd2:	88 27       	eor	r24, r24
    1cd4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1cd8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1cdc:	60 e0       	ldi	r22, 0x00	; 0
    1cde:	70 e0       	ldi	r23, 0x00	; 0
    1ce0:	84 2b       	or	r24, r20
    1ce2:	95 2b       	or	r25, r21
    1ce4:	a6 2b       	or	r26, r22
    1ce6:	b7 2b       	or	r27, r23
    1ce8:	b0 9b       	sbis	0x16, 0	; 22
    1cea:	13 c0       	rjmp	.+38     	; 0x1d12 <async+0x104>
    1cec:	c9 01       	movw	r24, r18
    1cee:	01 96       	adiw	r24, 0x01	; 1
    1cf0:	09 2e       	mov	r0, r25
    1cf2:	00 0c       	add	r0, r0
    1cf4:	aa 0b       	sbc	r26, r26
    1cf6:	bb 0b       	sbc	r27, r27
    1cf8:	dc 01       	movw	r26, r24
    1cfa:	99 27       	eor	r25, r25
    1cfc:	88 27       	eor	r24, r24
    1cfe:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1d02:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1d06:	60 e0       	ldi	r22, 0x00	; 0
    1d08:	70 e0       	ldi	r23, 0x00	; 0
    1d0a:	84 2b       	or	r24, r20
    1d0c:	95 2b       	or	r25, r21
    1d0e:	a6 2b       	or	r26, r22
    1d10:	b7 2b       	or	r27, r23
    1d12:	48 1a       	sub	r4, r24
    1d14:	59 0a       	sbc	r5, r25
    1d16:	6a 0a       	sbc	r6, r26
    1d18:	7b 0a       	sbc	r7, r27
    1d1a:	14 14       	cp	r1, r4
    1d1c:	15 04       	cpc	r1, r5
    1d1e:	16 04       	cpc	r1, r6
    1d20:	17 04       	cpc	r1, r7
    1d22:	ac f5       	brge	.+106    	; 0x1d8e <async+0x180>
    1d24:	62 e2       	ldi	r22, 0x22	; 34
    1d26:	71 e0       	ldi	r23, 0x01	; 1
    1d28:	ce 01       	movw	r24, r28
    1d2a:	0e 94 a6 04 	call	0x94c	; 0x94c <enqueueByBaseline>
    1d2e:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <timerQ>
    1d32:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <timerQ+0x1>
    1d36:	30 97       	sbiw	r30, 0x00	; 0
    1d38:	21 f1       	breq	.+72     	; 0x1d82 <async+0x174>
    1d3a:	82 81       	ldd	r24, Z+2	; 0x02
    1d3c:	93 81       	ldd	r25, Z+3	; 0x03
    1d3e:	a4 81       	ldd	r26, Z+4	; 0x04
    1d40:	b5 81       	ldd	r27, Z+5	; 0x05
    1d42:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
    1d46:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
    1d4a:	2a 17       	cp	r18, r26
    1d4c:	3b 07       	cpc	r19, r27
    1d4e:	c9 f4       	brne	.+50     	; 0x1d82 <async+0x174>
    1d50:	9c 01       	movw	r18, r24
    1d52:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1d56:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1d5a:	84 1b       	sub	r24, r20
    1d5c:	95 0b       	sbc	r25, r21
    1d5e:	01 97       	sbiw	r24, 0x01	; 1
    1d60:	31 f4       	brne	.+12     	; 0x1d6e <async+0x160>
    1d62:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1d66:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1d6a:	2f 5f       	subi	r18, 0xFF	; 255
    1d6c:	3f 4f       	sbci	r19, 0xFF	; 255
    1d6e:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1d72:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1d76:	ef e6       	ldi	r30, 0x6F	; 111
    1d78:	f0 e0       	ldi	r31, 0x00	; 0
    1d7a:	80 81       	ld	r24, Z
    1d7c:	82 60       	ori	r24, 0x02	; 2
    1d7e:	80 83       	st	Z, r24
    1d80:	39 c0       	rjmp	.+114    	; 0x1df4 <async+0x1e6>
    1d82:	ef e6       	ldi	r30, 0x6F	; 111
    1d84:	f0 e0       	ldi	r31, 0x00	; 0
    1d86:	80 81       	ld	r24, Z
    1d88:	8d 7f       	andi	r24, 0xFD	; 253
    1d8a:	80 83       	st	Z, r24
    1d8c:	33 c0       	rjmp	.+102    	; 0x1df4 <async+0x1e6>
    1d8e:	64 e2       	ldi	r22, 0x24	; 36
    1d90:	71 e0       	ldi	r23, 0x01	; 1
    1d92:	ce 01       	movw	r24, r28
    1d94:	0e 94 75 04 	call	0x8ea	; 0x8ea <enqueueByDeadline>
    1d98:	33 20       	and	r3, r3
    1d9a:	61 f1       	breq	.+88     	; 0x1df4 <async+0x1e6>
    1d9c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <threadPool>
    1da0:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <threadPool+0x1>
    1da4:	89 2b       	or	r24, r25
    1da6:	31 f1       	breq	.+76     	; 0x1df4 <async+0x1e6>
    1da8:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <msgQ>
    1dac:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <msgQ+0x1>
    1db0:	86 81       	ldd	r24, Z+6	; 0x06
    1db2:	97 81       	ldd	r25, Z+7	; 0x07
    1db4:	a0 85       	ldd	r26, Z+8	; 0x08
    1db6:	b1 85       	ldd	r27, Z+9	; 0x09
    1db8:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <activeStack>
    1dbc:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <activeStack+0x1>
    1dc0:	02 80       	ldd	r0, Z+2	; 0x02
    1dc2:	f3 81       	ldd	r31, Z+3	; 0x03
    1dc4:	e0 2d       	mov	r30, r0
    1dc6:	46 81       	ldd	r20, Z+6	; 0x06
    1dc8:	57 81       	ldd	r21, Z+7	; 0x07
    1dca:	60 85       	ldd	r22, Z+8	; 0x08
    1dcc:	71 85       	ldd	r23, Z+9	; 0x09
    1dce:	84 1b       	sub	r24, r20
    1dd0:	95 0b       	sbc	r25, r21
    1dd2:	a6 0b       	sbc	r26, r22
    1dd4:	b7 0b       	sbc	r27, r23
    1dd6:	72 f4       	brpl	.+28     	; 0x1df4 <async+0x1e6>
    1dd8:	84 e0       	ldi	r24, 0x04	; 4
    1dda:	91 e0       	ldi	r25, 0x01	; 1
    1ddc:	0e 94 02 05 	call	0xa04	; 0xa04 <pop>
    1de0:	62 e0       	ldi	r22, 0x02	; 2
    1de2:	71 e0       	ldi	r23, 0x01	; 1
    1de4:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <push>
    1de8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <activeStack>
    1dec:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <activeStack+0x1>
    1df0:	0e 94 55 04 	call	0x8aa	; 0x8aa <dispatch>
    1df4:	33 20       	and	r3, r3
    1df6:	09 f0       	breq	.+2      	; 0x1dfa <async+0x1ec>
    1df8:	78 94       	sei
    1dfa:	ce 01       	movw	r24, r28
    1dfc:	df 91       	pop	r29
    1dfe:	cf 91       	pop	r28
    1e00:	1f 91       	pop	r17
    1e02:	0f 91       	pop	r16
    1e04:	ff 90       	pop	r15
    1e06:	ef 90       	pop	r14
    1e08:	df 90       	pop	r13
    1e0a:	cf 90       	pop	r12
    1e0c:	bf 90       	pop	r11
    1e0e:	af 90       	pop	r10
    1e10:	9f 90       	pop	r9
    1e12:	8f 90       	pop	r8
    1e14:	7f 90       	pop	r7
    1e16:	6f 90       	pop	r6
    1e18:	5f 90       	pop	r5
    1e1a:	4f 90       	pop	r4
    1e1c:	3f 90       	pop	r3
    1e1e:	08 95       	ret

00001e20 <sync>:
    1e20:	cf 92       	push	r12
    1e22:	df 92       	push	r13
    1e24:	ef 92       	push	r14
    1e26:	ff 92       	push	r15
    1e28:	0f 93       	push	r16
    1e2a:	1f 93       	push	r17
    1e2c:	cf 93       	push	r28
    1e2e:	df 93       	push	r29
    1e30:	ec 01       	movw	r28, r24
    1e32:	7b 01       	movw	r14, r22
    1e34:	6a 01       	movw	r12, r20
    1e36:	1f b7       	in	r17, 0x3f	; 63
    1e38:	10 78       	andi	r17, 0x80	; 128
    1e3a:	f8 94       	cli
    1e3c:	a8 81       	ld	r26, Y
    1e3e:	b9 81       	ldd	r27, Y+1	; 0x01
    1e40:	10 97       	sbiw	r26, 0x00	; 0
    1e42:	19 f4       	brne	.+6      	; 0x1e4a <sync+0x2a>
    1e44:	35 c0       	rjmp	.+106    	; 0x1eb0 <sync+0x90>
    1e46:	a0 81       	ld	r26, Z
    1e48:	b1 81       	ldd	r27, Z+1	; 0x01
    1e4a:	14 96       	adiw	r26, 0x04	; 4
    1e4c:	ed 91       	ld	r30, X+
    1e4e:	fc 91       	ld	r31, X
    1e50:	15 97       	sbiw	r26, 0x05	; 5
    1e52:	30 97       	sbiw	r30, 0x00	; 0
    1e54:	c1 f7       	brne	.-16     	; 0x1e46 <sync+0x26>
    1e56:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    1e5a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    1e5e:	a2 17       	cp	r26, r18
    1e60:	b3 07       	cpc	r27, r19
    1e62:	11 f0       	breq	.+4      	; 0x1e68 <sync+0x48>
    1e64:	11 11       	cpse	r17, r1
    1e66:	07 c0       	rjmp	.+14     	; 0x1e76 <sync+0x56>
    1e68:	11 23       	and	r17, r17
    1e6a:	09 f4       	brne	.+2      	; 0x1e6e <sync+0x4e>
    1e6c:	4a c0       	rjmp	.+148    	; 0x1f02 <sync+0xe2>
    1e6e:	78 94       	sei
    1e70:	8f ef       	ldi	r24, 0xFF	; 255
    1e72:	9f ef       	ldi	r25, 0xFF	; 255
    1e74:	4e c0       	rjmp	.+156    	; 0x1f12 <sync+0xf2>
    1e76:	8a 81       	ldd	r24, Y+2	; 0x02
    1e78:	9b 81       	ldd	r25, Y+3	; 0x03
    1e7a:	00 97       	sbiw	r24, 0x00	; 0
    1e7c:	19 f0       	breq	.+6      	; 0x1e84 <sync+0x64>
    1e7e:	fc 01       	movw	r30, r24
    1e80:	15 82       	std	Z+5, r1	; 0x05
    1e82:	14 82       	std	Z+4, r1	; 0x04
    1e84:	3b 83       	std	Y+3, r19	; 0x03
    1e86:	2a 83       	std	Y+2, r18	; 0x02
    1e88:	f9 01       	movw	r30, r18
    1e8a:	d5 83       	std	Z+5, r29	; 0x05
    1e8c:	c4 83       	std	Z+4, r28	; 0x04
    1e8e:	cd 01       	movw	r24, r26
    1e90:	0e 94 55 04 	call	0x8aa	; 0x8aa <dispatch>
    1e94:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__data_start>
    1e98:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__data_start+0x1>
    1e9c:	82 81       	ldd	r24, Z+2	; 0x02
    1e9e:	93 81       	ldd	r25, Z+3	; 0x03
    1ea0:	89 2b       	or	r24, r25
    1ea2:	31 f4       	brne	.+12     	; 0x1eb0 <sync+0x90>
    1ea4:	11 23       	and	r17, r17
    1ea6:	81 f1       	breq	.+96     	; 0x1f08 <sync+0xe8>
    1ea8:	78 94       	sei
    1eaa:	80 e0       	ldi	r24, 0x00	; 0
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	31 c0       	rjmp	.+98     	; 0x1f12 <sync+0xf2>
    1eb0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    1eb4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    1eb8:	99 83       	std	Y+1, r25	; 0x01
    1eba:	88 83       	st	Y, r24
    1ebc:	11 23       	and	r17, r17
    1ebe:	29 f0       	breq	.+10     	; 0x1eca <sync+0xaa>
    1ec0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ec4:	01 97       	sbiw	r24, 0x01	; 1
    1ec6:	09 f0       	breq	.+2      	; 0x1eca <sync+0xaa>
    1ec8:	78 94       	sei
    1eca:	b6 01       	movw	r22, r12
    1ecc:	ce 01       	movw	r24, r28
    1ece:	f7 01       	movw	r30, r14
    1ed0:	09 95       	icall
    1ed2:	f8 2e       	mov	r15, r24
    1ed4:	09 2f       	mov	r16, r25
    1ed6:	8f b7       	in	r24, 0x3f	; 63
    1ed8:	f8 94       	cli
    1eda:	19 82       	std	Y+1, r1	; 0x01
    1edc:	18 82       	st	Y, r1
    1ede:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ee2:	82 30       	cpi	r24, 0x02	; 2
    1ee4:	91 05       	cpc	r25, r1
    1ee6:	38 f0       	brcs	.+14     	; 0x1ef6 <sync+0xd6>
    1ee8:	1b 82       	std	Y+3, r1	; 0x03
    1eea:	1a 82       	std	Y+2, r1	; 0x02
    1eec:	fc 01       	movw	r30, r24
    1eee:	15 82       	std	Z+5, r1	; 0x05
    1ef0:	14 82       	std	Z+4, r1	; 0x04
    1ef2:	0e 94 55 04 	call	0x8aa	; 0x8aa <dispatch>
    1ef6:	11 23       	and	r17, r17
    1ef8:	51 f0       	breq	.+20     	; 0x1f0e <sync+0xee>
    1efa:	78 94       	sei
    1efc:	8f 2d       	mov	r24, r15
    1efe:	90 2f       	mov	r25, r16
    1f00:	08 c0       	rjmp	.+16     	; 0x1f12 <sync+0xf2>
    1f02:	8f ef       	ldi	r24, 0xFF	; 255
    1f04:	9f ef       	ldi	r25, 0xFF	; 255
    1f06:	05 c0       	rjmp	.+10     	; 0x1f12 <sync+0xf2>
    1f08:	80 e0       	ldi	r24, 0x00	; 0
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	02 c0       	rjmp	.+4      	; 0x1f12 <sync+0xf2>
    1f0e:	8f 2d       	mov	r24, r15
    1f10:	90 2f       	mov	r25, r16
    1f12:	df 91       	pop	r29
    1f14:	cf 91       	pop	r28
    1f16:	1f 91       	pop	r17
    1f18:	0f 91       	pop	r16
    1f1a:	ff 90       	pop	r15
    1f1c:	ef 90       	pop	r14
    1f1e:	df 90       	pop	r13
    1f20:	cf 90       	pop	r12
    1f22:	08 95       	ret

00001f24 <run>:
    1f24:	00 91 00 01 	lds	r16, 0x0100	; 0x800100 <__data_start>
    1f28:	10 91 01 01 	lds	r17, 0x0101	; 0x800101 <__data_start+0x1>
    1f2c:	84 e2       	ldi	r24, 0x24	; 36
    1f2e:	91 e0       	ldi	r25, 0x01	; 1
    1f30:	0e 94 d7 04 	call	0x9ae	; 0x9ae <dequeue>
    1f34:	ec 01       	movw	r28, r24
    1f36:	f8 01       	movw	r30, r16
    1f38:	93 83       	std	Z+3, r25	; 0x03
    1f3a:	82 83       	std	Z+2, r24	; 0x02
    1f3c:	78 94       	sei
    1f3e:	6c 85       	ldd	r22, Y+12	; 0x0c
    1f40:	7d 85       	ldd	r23, Y+13	; 0x0d
    1f42:	4e 85       	ldd	r20, Y+14	; 0x0e
    1f44:	5f 85       	ldd	r21, Y+15	; 0x0f
    1f46:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f48:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f4a:	0e 94 10 0f 	call	0x1e20	; 0x1e20 <sync>
    1f4e:	8f b7       	in	r24, 0x3f	; 63
    1f50:	f8 94       	cli
    1f52:	66 e0       	ldi	r22, 0x06	; 6
    1f54:	71 e0       	ldi	r23, 0x01	; 1
    1f56:	ce 01       	movw	r24, r28
    1f58:	0e 94 ee 04 	call	0x9dc	; 0x9dc <insert>
    1f5c:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <activeStack>
    1f60:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <activeStack+0x1>
    1f64:	01 90       	ld	r0, Z+
    1f66:	f0 81       	ld	r31, Z
    1f68:	e0 2d       	mov	r30, r0
    1f6a:	c2 81       	ldd	r28, Z+2	; 0x02
    1f6c:	d3 81       	ldd	r29, Z+3	; 0x03
    1f6e:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <msgQ>
    1f72:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <msgQ+0x1>
    1f76:	30 97       	sbiw	r30, 0x00	; 0
    1f78:	a1 f0       	breq	.+40     	; 0x1fa2 <run+0x7e>
    1f7a:	20 97       	sbiw	r28, 0x00	; 0
    1f7c:	99 f2       	breq	.-90     	; 0x1f24 <run>
    1f7e:	86 81       	ldd	r24, Z+6	; 0x06
    1f80:	97 81       	ldd	r25, Z+7	; 0x07
    1f82:	a0 85       	ldd	r26, Z+8	; 0x08
    1f84:	b1 85       	ldd	r27, Z+9	; 0x09
    1f86:	4e 81       	ldd	r20, Y+6	; 0x06
    1f88:	5f 81       	ldd	r21, Y+7	; 0x07
    1f8a:	68 85       	ldd	r22, Y+8	; 0x08
    1f8c:	79 85       	ldd	r23, Y+9	; 0x09
    1f8e:	84 1b       	sub	r24, r20
    1f90:	95 0b       	sbc	r25, r21
    1f92:	a6 0b       	sbc	r26, r22
    1f94:	b7 0b       	sbc	r27, r23
    1f96:	18 16       	cp	r1, r24
    1f98:	19 06       	cpc	r1, r25
    1f9a:	1a 06       	cpc	r1, r26
    1f9c:	1b 06       	cpc	r1, r27
    1f9e:	0c f0       	brlt	.+2      	; 0x1fa2 <run+0x7e>
    1fa0:	c1 cf       	rjmp	.-126    	; 0x1f24 <run>
    1fa2:	82 e0       	ldi	r24, 0x02	; 2
    1fa4:	91 e0       	ldi	r25, 0x01	; 1
    1fa6:	0e 94 02 05 	call	0xa04	; 0xa04 <pop>
    1faa:	64 e0       	ldi	r22, 0x04	; 4
    1fac:	71 e0       	ldi	r23, 0x01	; 1
    1fae:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <push>
    1fb2:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <activeStack>
    1fb6:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <activeStack+0x1>
    1fba:	02 c0       	rjmp	.+4      	; 0x1fc0 <run+0x9c>
    1fbc:	a0 81       	ld	r26, Z
    1fbe:	b1 81       	ldd	r27, Z+1	; 0x01
    1fc0:	14 96       	adiw	r26, 0x04	; 4
    1fc2:	ed 91       	ld	r30, X+
    1fc4:	fc 91       	ld	r31, X
    1fc6:	15 97       	sbiw	r26, 0x05	; 5
    1fc8:	30 97       	sbiw	r30, 0x00	; 0
    1fca:	c1 f7       	brne	.-16     	; 0x1fbc <run+0x98>
    1fcc:	cd 01       	movw	r24, r26
    1fce:	0e 94 55 04 	call	0x8aa	; 0x8aa <dispatch>
    1fd2:	a8 cf       	rjmp	.-176    	; 0x1f24 <run>

00001fd4 <install>:
    thread0.msg = NULL;
    
    TIMER_INIT();
}

void install(Object *obj, Method m, enum Vector i) {
    1fd4:	fc 01       	movw	r30, r24
    if (i >= 0 && i < N_VECTORS) {
    1fd6:	42 31       	cpi	r20, 0x12	; 18
    1fd8:	b8 f4       	brcc	.+46     	; 0x2008 <install+0x34>
        char status;
        DISABLE(status);
    1fda:	9f b7       	in	r25, 0x3f	; 63
    1fdc:	90 78       	andi	r25, 0x80	; 128
    1fde:	f8 94       	cli
        otable[i] = obj;
    1fe0:	50 e0       	ldi	r21, 0x00	; 0
    1fe2:	44 0f       	add	r20, r20
    1fe4:	55 1f       	adc	r21, r21
    1fe6:	da 01       	movw	r26, r20
    1fe8:	aa 5d       	subi	r26, 0xDA	; 218
    1fea:	be 4f       	sbci	r27, 0xFE	; 254
    1fec:	ed 93       	st	X+, r30
    1fee:	fc 93       	st	X, r31
        mtable[i] = m;
    1ff0:	da 01       	movw	r26, r20
    1ff2:	a2 54       	subi	r26, 0x42	; 66
    1ff4:	be 4f       	sbci	r27, 0xFE	; 254
    1ff6:	6d 93       	st	X+, r22
    1ff8:	7c 93       	st	X, r23
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
    1ffa:	21 e0       	ldi	r18, 0x01	; 1
    1ffc:	30 e0       	ldi	r19, 0x00	; 0
    1ffe:	33 83       	std	Z+3, r19	; 0x03
    2000:	22 83       	std	Z+2, r18	; 0x02
        ENABLE(status);
    2002:	99 23       	and	r25, r25
    2004:	09 f0       	breq	.+2      	; 0x2008 <install+0x34>
    2006:	78 94       	sei
    2008:	08 95       	ret

0000200a <tinytimber>:
    }
}

int tinytimber(Object *obj, Method m, int arg) {
    200a:	8c 01       	movw	r16, r24
    200c:	7b 01       	movw	r14, r22
    200e:	6a 01       	movw	r12, r20
    char status;
    DISABLE(status);
    2010:	8f b7       	in	r24, 0x3f	; 63
    2012:	f8 94       	cli
    initialize();
    2014:	0e 94 b6 03 	call	0x76c	; 0x76c <initialize>
    ENABLE(1);
    2018:	78 94       	sei
    if (m != NULL)
    201a:	e1 14       	cp	r14, r1
    201c:	f1 04       	cpc	r15, r1
    201e:	41 f0       	breq	.+16     	; 0x2030 <tinytimber+0x26>
        //m(obj, arg);
		ASYNC(obj,m,arg);
    2020:	20 e0       	ldi	r18, 0x00	; 0
    2022:	30 e0       	ldi	r19, 0x00	; 0
    2024:	a9 01       	movw	r20, r18
    2026:	60 e0       	ldi	r22, 0x00	; 0
    2028:	70 e0       	ldi	r23, 0x00	; 0
    202a:	cb 01       	movw	r24, r22
    202c:	0e 94 07 0e 	call	0x1c0e	; 0x1c0e <async>
    DISABLE(status);
    2030:	8f b7       	in	r24, 0x3f	; 63
    2032:	f8 94       	cli
    idle();
    2034:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <idle>

00002038 <__divmodsi4>:
    2038:	05 2e       	mov	r0, r21
    203a:	97 fb       	bst	r25, 7
    203c:	1e f4       	brtc	.+6      	; 0x2044 <__divmodsi4+0xc>
    203e:	00 94       	com	r0
    2040:	0e 94 33 10 	call	0x2066	; 0x2066 <__negsi2>
    2044:	57 fd       	sbrc	r21, 7
    2046:	07 d0       	rcall	.+14     	; 0x2056 <__divmodsi4_neg2>
    2048:	0e 94 3b 10 	call	0x2076	; 0x2076 <__udivmodsi4>
    204c:	07 fc       	sbrc	r0, 7
    204e:	03 d0       	rcall	.+6      	; 0x2056 <__divmodsi4_neg2>
    2050:	4e f4       	brtc	.+18     	; 0x2064 <__divmodsi4_exit>
    2052:	0c 94 33 10 	jmp	0x2066	; 0x2066 <__negsi2>

00002056 <__divmodsi4_neg2>:
    2056:	50 95       	com	r21
    2058:	40 95       	com	r20
    205a:	30 95       	com	r19
    205c:	21 95       	neg	r18
    205e:	3f 4f       	sbci	r19, 0xFF	; 255
    2060:	4f 4f       	sbci	r20, 0xFF	; 255
    2062:	5f 4f       	sbci	r21, 0xFF	; 255

00002064 <__divmodsi4_exit>:
    2064:	08 95       	ret

00002066 <__negsi2>:
    2066:	90 95       	com	r25
    2068:	80 95       	com	r24
    206a:	70 95       	com	r23
    206c:	61 95       	neg	r22
    206e:	7f 4f       	sbci	r23, 0xFF	; 255
    2070:	8f 4f       	sbci	r24, 0xFF	; 255
    2072:	9f 4f       	sbci	r25, 0xFF	; 255
    2074:	08 95       	ret

00002076 <__udivmodsi4>:
    2076:	a1 e2       	ldi	r26, 0x21	; 33
    2078:	1a 2e       	mov	r1, r26
    207a:	aa 1b       	sub	r26, r26
    207c:	bb 1b       	sub	r27, r27
    207e:	fd 01       	movw	r30, r26
    2080:	0d c0       	rjmp	.+26     	; 0x209c <__udivmodsi4_ep>

00002082 <__udivmodsi4_loop>:
    2082:	aa 1f       	adc	r26, r26
    2084:	bb 1f       	adc	r27, r27
    2086:	ee 1f       	adc	r30, r30
    2088:	ff 1f       	adc	r31, r31
    208a:	a2 17       	cp	r26, r18
    208c:	b3 07       	cpc	r27, r19
    208e:	e4 07       	cpc	r30, r20
    2090:	f5 07       	cpc	r31, r21
    2092:	20 f0       	brcs	.+8      	; 0x209c <__udivmodsi4_ep>
    2094:	a2 1b       	sub	r26, r18
    2096:	b3 0b       	sbc	r27, r19
    2098:	e4 0b       	sbc	r30, r20
    209a:	f5 0b       	sbc	r31, r21

0000209c <__udivmodsi4_ep>:
    209c:	66 1f       	adc	r22, r22
    209e:	77 1f       	adc	r23, r23
    20a0:	88 1f       	adc	r24, r24
    20a2:	99 1f       	adc	r25, r25
    20a4:	1a 94       	dec	r1
    20a6:	69 f7       	brne	.-38     	; 0x2082 <__udivmodsi4_loop>
    20a8:	60 95       	com	r22
    20aa:	70 95       	com	r23
    20ac:	80 95       	com	r24
    20ae:	90 95       	com	r25
    20b0:	9b 01       	movw	r18, r22
    20b2:	ac 01       	movw	r20, r24
    20b4:	bd 01       	movw	r22, r26
    20b6:	cf 01       	movw	r24, r30
    20b8:	08 95       	ret

000020ba <setjmp>:
    20ba:	dc 01       	movw	r26, r24
    20bc:	2d 92       	st	X+, r2
    20be:	3d 92       	st	X+, r3
    20c0:	4d 92       	st	X+, r4
    20c2:	5d 92       	st	X+, r5
    20c4:	6d 92       	st	X+, r6
    20c6:	7d 92       	st	X+, r7
    20c8:	8d 92       	st	X+, r8
    20ca:	9d 92       	st	X+, r9
    20cc:	ad 92       	st	X+, r10
    20ce:	bd 92       	st	X+, r11
    20d0:	cd 92       	st	X+, r12
    20d2:	dd 92       	st	X+, r13
    20d4:	ed 92       	st	X+, r14
    20d6:	fd 92       	st	X+, r15
    20d8:	0d 93       	st	X+, r16
    20da:	1d 93       	st	X+, r17
    20dc:	cd 93       	st	X+, r28
    20de:	dd 93       	st	X+, r29
    20e0:	ff 91       	pop	r31
    20e2:	ef 91       	pop	r30
    20e4:	8d b7       	in	r24, 0x3d	; 61
    20e6:	8d 93       	st	X+, r24
    20e8:	8e b7       	in	r24, 0x3e	; 62
    20ea:	8d 93       	st	X+, r24
    20ec:	8f b7       	in	r24, 0x3f	; 63
    20ee:	8d 93       	st	X+, r24
    20f0:	ed 93       	st	X+, r30
    20f2:	fd 93       	st	X+, r31
    20f4:	88 27       	eor	r24, r24
    20f6:	99 27       	eor	r25, r25
    20f8:	09 94       	ijmp

000020fa <longjmp>:
    20fa:	dc 01       	movw	r26, r24
    20fc:	cb 01       	movw	r24, r22
    20fe:	81 30       	cpi	r24, 0x01	; 1
    2100:	91 05       	cpc	r25, r1
    2102:	81 1d       	adc	r24, r1
    2104:	2d 90       	ld	r2, X+
    2106:	3d 90       	ld	r3, X+
    2108:	4d 90       	ld	r4, X+
    210a:	5d 90       	ld	r5, X+
    210c:	6d 90       	ld	r6, X+
    210e:	7d 90       	ld	r7, X+
    2110:	8d 90       	ld	r8, X+
    2112:	9d 90       	ld	r9, X+
    2114:	ad 90       	ld	r10, X+
    2116:	bd 90       	ld	r11, X+
    2118:	cd 90       	ld	r12, X+
    211a:	dd 90       	ld	r13, X+
    211c:	ed 90       	ld	r14, X+
    211e:	fd 90       	ld	r15, X+
    2120:	0d 91       	ld	r16, X+
    2122:	1d 91       	ld	r17, X+
    2124:	cd 91       	ld	r28, X+
    2126:	dd 91       	ld	r29, X+
    2128:	ed 91       	ld	r30, X+
    212a:	fd 91       	ld	r31, X+
    212c:	0d 90       	ld	r0, X+
    212e:	f8 94       	cli
    2130:	fe bf       	out	0x3e, r31	; 62
    2132:	0f be       	out	0x3f, r0	; 63
    2134:	ed bf       	out	0x3d, r30	; 61
    2136:	ed 91       	ld	r30, X+
    2138:	fd 91       	ld	r31, X+
    213a:	09 94       	ijmp

0000213c <_exit>:
    213c:	f8 94       	cli

0000213e <__stop_program>:
    213e:	ff cf       	rjmp	.-2      	; 0x213e <__stop_program>
