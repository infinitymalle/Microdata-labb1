
Labb 5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  000020ba  0000214e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000020ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000353  0080011c  0080011c  0000216a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000216a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000219c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000258  00000000  00000000  000021dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002ac6  00000000  00000000  00002434  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000103b  00000000  00000000  00004efa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015fd  00000000  00000000  00005f35  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c3c  00000000  00000000  00007534  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000979  00000000  00000000  00008170  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000260b  00000000  00000000  00008ae9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f8  00000000  00000000  0000b0f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
       4:	0c 94 fd 04 	jmp	0x9fa	; 0x9fa <__vector_1>
       8:	0c 94 6c 05 	jmp	0xad8	; 0xad8 <__vector_2>
       c:	0c 94 db 05 	jmp	0xbb6	; 0xbb6 <__vector_3>
      10:	0c 94 4a 06 	jmp	0xc94	; 0xc94 <__vector_4>
      14:	0c 94 b9 06 	jmp	0xd72	; 0xd72 <__vector_5>
      18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      1c:	0c 94 24 0d 	jmp	0x1a48	; 0x1a48 <__vector_7>
      20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      24:	0c 94 d2 0c 	jmp	0x19a4	; 0x19a4 <__vector_9>
      28:	0c 94 28 07 	jmp	0xe50	; 0xe50 <__vector_10>
      2c:	0c 94 97 07 	jmp	0xf2e	; 0xf2e <__vector_11>
      30:	0c 94 06 08 	jmp	0x100c	; 0x100c <__vector_12>
      34:	0c 94 75 08 	jmp	0x10ea	; 0x10ea <__vector_13>
      38:	0c 94 e4 08 	jmp	0x11c8	; 0x11c8 <__vector_14>
      3c:	0c 94 53 09 	jmp	0x12a6	; 0x12a6 <__vector_15>
      40:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <__vector_16>
      44:	0c 94 31 0a 	jmp	0x1462	; 0x1462 <__vector_17>
      48:	0c 94 a0 0a 	jmp	0x1540	; 0x1540 <__vector_18>
      4c:	0c 94 0f 0b 	jmp	0x161e	; 0x161e <__vector_19>
      50:	0c 94 7e 0b 	jmp	0x16fc	; 0x16fc <__vector_20>
      54:	0c 94 ed 0b 	jmp	0x17da	; 0x17da <__vector_21>
      58:	0c 94 5c 0c 	jmp	0x18b8	; 0x18b8 <__vector_22>

0000005c <__ctors_end>:
      5c:	11 24       	eor	r1, r1
      5e:	1f be       	out	0x3f, r1	; 63
      60:	cf ef       	ldi	r28, 0xFF	; 255
      62:	d4 e0       	ldi	r29, 0x04	; 4
      64:	de bf       	out	0x3e, r29	; 62
      66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
      68:	11 e0       	ldi	r17, 0x01	; 1
      6a:	a0 e0       	ldi	r26, 0x00	; 0
      6c:	b1 e0       	ldi	r27, 0x01	; 1
      6e:	ea eb       	ldi	r30, 0xBA	; 186
      70:	f0 e2       	ldi	r31, 0x20	; 32
      72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
      74:	05 90       	lpm	r0, Z+
      76:	0d 92       	st	X+, r0
      78:	ac 31       	cpi	r26, 0x1C	; 28
      7a:	b1 07       	cpc	r27, r17
      7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
      7e:	24 e0       	ldi	r18, 0x04	; 4
      80:	ac e1       	ldi	r26, 0x1C	; 28
      82:	b1 e0       	ldi	r27, 0x01	; 1
      84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
      86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
      88:	af 36       	cpi	r26, 0x6F	; 111
      8a:	b2 07       	cpc	r27, r18
      8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
      8e:	0e 94 fe 02 	call	0x5fc	; 0x5fc <main>
      92:	0c 94 5b 10 	jmp	0x20b6	; 0x20b6 <_exit>

00000096 <__bad_interrupt>:
      96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <carLeave>:
		}
	}
	updateDisp(self);
}

void carLeave(Bridge *self){
      9a:	fc 01       	movw	r30, r24
	if(self->carsOnBridge > 0){
      9c:	84 81       	ldd	r24, Z+4	; 0x04
      9e:	95 81       	ldd	r25, Z+5	; 0x05
      a0:	18 16       	cp	r1, r24
      a2:	19 06       	cpc	r1, r25
      a4:	44 f4       	brge	.+16     	; 0xb6 <carLeave+0x1c>
		self->carsOnBridge--;
      a6:	01 97       	sbiw	r24, 0x01	; 1
      a8:	95 83       	std	Z+5, r25	; 0x05
      aa:	84 83       	std	Z+4, r24	; 0x04
		self->carspassed++;
      ac:	86 85       	ldd	r24, Z+14	; 0x0e
      ae:	97 85       	ldd	r25, Z+15	; 0x0f
      b0:	01 96       	adiw	r24, 0x01	; 1
      b2:	97 87       	std	Z+15, r25	; 0x0f
      b4:	86 87       	std	Z+14, r24	; 0x0e
      b6:	08 95       	ret

000000b8 <changeSouth>:
	}
}

void changeSouth(Bridge *self){
	self->southLight = 1;
      b8:	21 e0       	ldi	r18, 0x01	; 1
      ba:	30 e0       	ldi	r19, 0x00	; 0
      bc:	fc 01       	movw	r30, r24
      be:	33 87       	std	Z+11, r19	; 0x0b
      c0:	22 87       	std	Z+10, r18	; 0x0a
      c2:	08 95       	ret

000000c4 <changeNorth>:
}

void changeNorth(Bridge *self){
	self->northLight = 1;
      c4:	21 e0       	ldi	r18, 0x01	; 1
      c6:	30 e0       	ldi	r19, 0x00	; 0
      c8:	fc 01       	movw	r30, r24
      ca:	35 87       	std	Z+13, r19	; 0x0d
      cc:	24 87       	std	Z+12, r18	; 0x0c
      ce:	08 95       	ret

000000d0 <changeDirection>:
	else if(sensor == (0b1000 || 0b0010)){
		carRun(self);
	}
}

void changeDirection(Bridge *self){
      d0:	cf 92       	push	r12
      d2:	df 92       	push	r13
      d4:	ef 92       	push	r14
      d6:	ff 92       	push	r15
      d8:	0f 93       	push	r16
      da:	1f 93       	push	r17
      dc:	cf 93       	push	r28
      de:	df 93       	push	r29
      e0:	ec 01       	movw	r28, r24
	if((self->queueNorth == 0) && (self->queueSouth == 0)){
      e2:	88 85       	ldd	r24, Y+8	; 0x08
      e4:	99 85       	ldd	r25, Y+9	; 0x09
      e6:	89 2b       	or	r24, r25
      e8:	c9 f4       	brne	.+50     	; 0x11c <changeDirection+0x4c>
      ea:	8e 81       	ldd	r24, Y+6	; 0x06
      ec:	9f 81       	ldd	r25, Y+7	; 0x07
      ee:	89 2b       	or	r24, r25
      f0:	a9 f4       	brne	.+42     	; 0x11c <changeDirection+0x4c>
		ASYNC(self->outputs, transmit, 2);
      f2:	0a 89       	ldd	r16, Y+18	; 0x12
      f4:	1b 89       	ldd	r17, Y+19	; 0x13
      f6:	68 94       	set
      f8:	cc 24       	eor	r12, r12
      fa:	c1 f8       	bld	r12, 1
      fc:	d1 2c       	mov	r13, r1
      fe:	0f 2e       	mov	r0, r31
     100:	f6 e5       	ldi	r31, 0x56	; 86
     102:	ef 2e       	mov	r14, r31
     104:	f3 e0       	ldi	r31, 0x03	; 3
     106:	ff 2e       	mov	r15, r31
     108:	f0 2d       	mov	r31, r0
     10a:	20 e0       	ldi	r18, 0x00	; 0
     10c:	30 e0       	ldi	r19, 0x00	; 0
     10e:	a9 01       	movw	r20, r18
     110:	60 e0       	ldi	r22, 0x00	; 0
     112:	70 e0       	ldi	r23, 0x00	; 0
     114:	cb 01       	movw	r24, r22
     116:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <async>
     11a:	54 c0       	rjmp	.+168    	; 0x1c4 <changeDirection+0xf4>
	}else if (self->southLight){
     11c:	8a 85       	ldd	r24, Y+10	; 0x0a
     11e:	9b 85       	ldd	r25, Y+11	; 0x0b
     120:	89 2b       	or	r24, r25
     122:	29 f1       	breq	.+74     	; 0x16e <changeDirection+0x9e>
		self->southLight = 0;
     124:	1b 86       	std	Y+11, r1	; 0x0b
     126:	1a 86       	std	Y+10, r1	; 0x0a
		AFTER(MSEC(5000), self, changeNorth, NULL);
     128:	c1 2c       	mov	r12, r1
     12a:	d1 2c       	mov	r13, r1
     12c:	0f 2e       	mov	r0, r31
     12e:	f2 e6       	ldi	r31, 0x62	; 98
     130:	ef 2e       	mov	r14, r31
     132:	f0 e0       	ldi	r31, 0x00	; 0
     134:	ff 2e       	mov	r15, r31
     136:	f0 2d       	mov	r31, r0
     138:	8e 01       	movw	r16, r28
     13a:	20 e0       	ldi	r18, 0x00	; 0
     13c:	30 e0       	ldi	r19, 0x00	; 0
     13e:	a9 01       	movw	r20, r18
     140:	6a e5       	ldi	r22, 0x5A	; 90
     142:	72 e6       	ldi	r23, 0x62	; 98
     144:	82 e0       	ldi	r24, 0x02	; 2
     146:	90 e0       	ldi	r25, 0x00	; 0
     148:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <async>
		ASYNC(self->outputs, transmit, 0);
     14c:	0a 89       	ldd	r16, Y+18	; 0x12
     14e:	1b 89       	ldd	r17, Y+19	; 0x13
     150:	0f 2e       	mov	r0, r31
     152:	f6 e5       	ldi	r31, 0x56	; 86
     154:	ef 2e       	mov	r14, r31
     156:	f3 e0       	ldi	r31, 0x03	; 3
     158:	ff 2e       	mov	r15, r31
     15a:	f0 2d       	mov	r31, r0
     15c:	20 e0       	ldi	r18, 0x00	; 0
     15e:	30 e0       	ldi	r19, 0x00	; 0
     160:	a9 01       	movw	r20, r18
     162:	60 e0       	ldi	r22, 0x00	; 0
     164:	70 e0       	ldi	r23, 0x00	; 0
     166:	cb 01       	movw	r24, r22
     168:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <async>
     16c:	2b c0       	rjmp	.+86     	; 0x1c4 <changeDirection+0xf4>
	}else if (self->northLight){
     16e:	8c 85       	ldd	r24, Y+12	; 0x0c
     170:	9d 85       	ldd	r25, Y+13	; 0x0d
     172:	89 2b       	or	r24, r25
     174:	39 f1       	breq	.+78     	; 0x1c4 <changeDirection+0xf4>
		self->northLight = 0;
     176:	1d 86       	std	Y+13, r1	; 0x0d
     178:	1c 86       	std	Y+12, r1	; 0x0c
		AFTER(MSEC(5000), self, changeSouth, NULL);
     17a:	c1 2c       	mov	r12, r1
     17c:	d1 2c       	mov	r13, r1
     17e:	0f 2e       	mov	r0, r31
     180:	fc e5       	ldi	r31, 0x5C	; 92
     182:	ef 2e       	mov	r14, r31
     184:	f0 e0       	ldi	r31, 0x00	; 0
     186:	ff 2e       	mov	r15, r31
     188:	f0 2d       	mov	r31, r0
     18a:	8e 01       	movw	r16, r28
     18c:	20 e0       	ldi	r18, 0x00	; 0
     18e:	30 e0       	ldi	r19, 0x00	; 0
     190:	a9 01       	movw	r20, r18
     192:	6a e5       	ldi	r22, 0x5A	; 90
     194:	72 e6       	ldi	r23, 0x62	; 98
     196:	82 e0       	ldi	r24, 0x02	; 2
     198:	90 e0       	ldi	r25, 0x00	; 0
     19a:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <async>
		ASYNC(self->outputs, transmit, 1);
     19e:	0a 89       	ldd	r16, Y+18	; 0x12
     1a0:	1b 89       	ldd	r17, Y+19	; 0x13
     1a2:	cc 24       	eor	r12, r12
     1a4:	c3 94       	inc	r12
     1a6:	d1 2c       	mov	r13, r1
     1a8:	0f 2e       	mov	r0, r31
     1aa:	f6 e5       	ldi	r31, 0x56	; 86
     1ac:	ef 2e       	mov	r14, r31
     1ae:	f3 e0       	ldi	r31, 0x03	; 3
     1b0:	ff 2e       	mov	r15, r31
     1b2:	f0 2d       	mov	r31, r0
     1b4:	20 e0       	ldi	r18, 0x00	; 0
     1b6:	30 e0       	ldi	r19, 0x00	; 0
     1b8:	a9 01       	movw	r20, r18
     1ba:	60 e0       	ldi	r22, 0x00	; 0
     1bc:	70 e0       	ldi	r23, 0x00	; 0
     1be:	cb 01       	movw	r24, r22
     1c0:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <async>
	}
}
     1c4:	df 91       	pop	r29
     1c6:	cf 91       	pop	r28
     1c8:	1f 91       	pop	r17
     1ca:	0f 91       	pop	r16
     1cc:	ff 90       	pop	r15
     1ce:	ef 90       	pop	r14
     1d0:	df 90       	pop	r13
     1d2:	cf 90       	pop	r12
     1d4:	08 95       	ret

000001d6 <updateDisp>:

void changeNorth(Bridge *self){
	self->northLight = 1;
}

void updateDisp(Bridge *self){
     1d6:	cf 92       	push	r12
     1d8:	df 92       	push	r13
     1da:	ef 92       	push	r14
     1dc:	ff 92       	push	r15
     1de:	0f 93       	push	r16
     1e0:	1f 93       	push	r17
     1e2:	cf 93       	push	r28
     1e4:	df 93       	push	r29
     1e6:	ec 01       	movw	r28, r24
	ASYNC(self->gui, setleft, self->queueSouth);
     1e8:	08 89       	ldd	r16, Y+16	; 0x10
     1ea:	19 89       	ldd	r17, Y+17	; 0x11
     1ec:	ce 80       	ldd	r12, Y+6	; 0x06
     1ee:	df 80       	ldd	r13, Y+7	; 0x07
     1f0:	0f 2e       	mov	r0, r31
     1f2:	f2 ea       	ldi	r31, 0xA2	; 162
     1f4:	ef 2e       	mov	r14, r31
     1f6:	f2 e0       	ldi	r31, 0x02	; 2
     1f8:	ff 2e       	mov	r15, r31
     1fa:	f0 2d       	mov	r31, r0
     1fc:	20 e0       	ldi	r18, 0x00	; 0
     1fe:	30 e0       	ldi	r19, 0x00	; 0
     200:	a9 01       	movw	r20, r18
     202:	60 e0       	ldi	r22, 0x00	; 0
     204:	70 e0       	ldi	r23, 0x00	; 0
     206:	cb 01       	movw	r24, r22
     208:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <async>
	ASYNC(self->gui, setmiddle, self->carsOnBridge);
     20c:	08 89       	ldd	r16, Y+16	; 0x10
     20e:	19 89       	ldd	r17, Y+17	; 0x11
     210:	cc 80       	ldd	r12, Y+4	; 0x04
     212:	dd 80       	ldd	r13, Y+5	; 0x05
     214:	0f 2e       	mov	r0, r31
     216:	fb ea       	ldi	r31, 0xAB	; 171
     218:	ef 2e       	mov	r14, r31
     21a:	f2 e0       	ldi	r31, 0x02	; 2
     21c:	ff 2e       	mov	r15, r31
     21e:	f0 2d       	mov	r31, r0
     220:	20 e0       	ldi	r18, 0x00	; 0
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	a9 01       	movw	r20, r18
     226:	60 e0       	ldi	r22, 0x00	; 0
     228:	70 e0       	ldi	r23, 0x00	; 0
     22a:	cb 01       	movw	r24, r22
     22c:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <async>
	ASYNC(self->gui, setright, self->queueNorth);
     230:	08 89       	ldd	r16, Y+16	; 0x10
     232:	19 89       	ldd	r17, Y+17	; 0x11
     234:	c8 84       	ldd	r12, Y+8	; 0x08
     236:	d9 84       	ldd	r13, Y+9	; 0x09
     238:	0f 2e       	mov	r0, r31
     23a:	f4 eb       	ldi	r31, 0xB4	; 180
     23c:	ef 2e       	mov	r14, r31
     23e:	f2 e0       	ldi	r31, 0x02	; 2
     240:	ff 2e       	mov	r15, r31
     242:	f0 2d       	mov	r31, r0
     244:	20 e0       	ldi	r18, 0x00	; 0
     246:	30 e0       	ldi	r19, 0x00	; 0
     248:	a9 01       	movw	r20, r18
     24a:	60 e0       	ldi	r22, 0x00	; 0
     24c:	70 e0       	ldi	r23, 0x00	; 0
     24e:	cb 01       	movw	r24, r22
     250:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <async>
     254:	df 91       	pop	r29
     256:	cf 91       	pop	r28
     258:	1f 91       	pop	r17
     25a:	0f 91       	pop	r16
     25c:	ff 90       	pop	r15
     25e:	ef 90       	pop	r14
     260:	df 90       	pop	r13
     262:	cf 90       	pop	r12
     264:	08 95       	ret

00000266 <carRun>:
		AFTER(MSEC(5000), self, changeSouth, NULL);
		ASYNC(self->outputs, transmit, 1);
	}
}

void carRun(Bridge *self){
     266:	cf 92       	push	r12
     268:	df 92       	push	r13
     26a:	ef 92       	push	r14
     26c:	ff 92       	push	r15
     26e:	0f 93       	push	r16
     270:	1f 93       	push	r17
     272:	cf 93       	push	r28
     274:	df 93       	push	r29
     276:	ec 01       	movw	r28, r24
	if((self->southLight == 1) && (self->queueSouth > 0)){			//left
     278:	8a 85       	ldd	r24, Y+10	; 0x0a
     27a:	9b 85       	ldd	r25, Y+11	; 0x0b
     27c:	01 97       	sbiw	r24, 0x01	; 1
     27e:	71 f5       	brne	.+92     	; 0x2dc <carRun+0x76>
     280:	8e 81       	ldd	r24, Y+6	; 0x06
     282:	9f 81       	ldd	r25, Y+7	; 0x07
     284:	18 16       	cp	r1, r24
     286:	19 06       	cpc	r1, r25
     288:	4c f5       	brge	.+82     	; 0x2dc <carRun+0x76>
		self->queueSouth--;
     28a:	01 97       	sbiw	r24, 0x01	; 1
     28c:	9f 83       	std	Y+7, r25	; 0x07
     28e:	8e 83       	std	Y+6, r24	; 0x06
		self->carsOnBridge++;
     290:	8c 81       	ldd	r24, Y+4	; 0x04
     292:	9d 81       	ldd	r25, Y+5	; 0x05
     294:	01 96       	adiw	r24, 0x01	; 1
     296:	9d 83       	std	Y+5, r25	; 0x05
     298:	8c 83       	std	Y+4, r24	; 0x04
		AFTER(MSEC(5000), self, carLeave, NULL);
     29a:	c1 2c       	mov	r12, r1
     29c:	d1 2c       	mov	r13, r1
     29e:	0f 2e       	mov	r0, r31
     2a0:	fd e4       	ldi	r31, 0x4D	; 77
     2a2:	ef 2e       	mov	r14, r31
     2a4:	f0 e0       	ldi	r31, 0x00	; 0
     2a6:	ff 2e       	mov	r15, r31
     2a8:	f0 2d       	mov	r31, r0
     2aa:	8e 01       	movw	r16, r28
     2ac:	20 e0       	ldi	r18, 0x00	; 0
     2ae:	30 e0       	ldi	r19, 0x00	; 0
     2b0:	a9 01       	movw	r20, r18
     2b2:	6a e5       	ldi	r22, 0x5A	; 90
     2b4:	72 e6       	ldi	r23, 0x62	; 98
     2b6:	82 e0       	ldi	r24, 0x02	; 2
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <async>
		if((self->carspassed >= 5) && (self->queueNorth > 0)){ // 5 bilar + 5 sekunder(5 bilar till) blir 10 bilar
     2be:	8e 85       	ldd	r24, Y+14	; 0x0e
     2c0:	9f 85       	ldd	r25, Y+15	; 0x0f
     2c2:	05 97       	sbiw	r24, 0x05	; 5
     2c4:	e4 f1       	brlt	.+120    	; 0x33e <carRun+0xd8>
     2c6:	88 85       	ldd	r24, Y+8	; 0x08
     2c8:	99 85       	ldd	r25, Y+9	; 0x09
     2ca:	18 16       	cp	r1, r24
     2cc:	19 06       	cpc	r1, r25
     2ce:	bc f5       	brge	.+110    	; 0x33e <carRun+0xd8>
			self->carspassed = 0;
     2d0:	1f 86       	std	Y+15, r1	; 0x0f
     2d2:	1e 86       	std	Y+14, r1	; 0x0e
			changeDirection(self);
     2d4:	ce 01       	movw	r24, r28
     2d6:	0e 94 68 00 	call	0xd0	; 0xd0 <changeDirection>
     2da:	31 c0       	rjmp	.+98     	; 0x33e <carRun+0xd8>
		}
	}else if((self->northLight == 1) && (self->queueNorth > 0)){	//right
     2dc:	8c 85       	ldd	r24, Y+12	; 0x0c
     2de:	9d 85       	ldd	r25, Y+13	; 0x0d
     2e0:	01 97       	sbiw	r24, 0x01	; 1
     2e2:	69 f5       	brne	.+90     	; 0x33e <carRun+0xd8>
     2e4:	88 85       	ldd	r24, Y+8	; 0x08
     2e6:	99 85       	ldd	r25, Y+9	; 0x09
     2e8:	18 16       	cp	r1, r24
     2ea:	19 06       	cpc	r1, r25
     2ec:	44 f5       	brge	.+80     	; 0x33e <carRun+0xd8>
		self->queueNorth--;
     2ee:	01 97       	sbiw	r24, 0x01	; 1
     2f0:	99 87       	std	Y+9, r25	; 0x09
     2f2:	88 87       	std	Y+8, r24	; 0x08
		self->carsOnBridge++;
     2f4:	8c 81       	ldd	r24, Y+4	; 0x04
     2f6:	9d 81       	ldd	r25, Y+5	; 0x05
     2f8:	01 96       	adiw	r24, 0x01	; 1
     2fa:	9d 83       	std	Y+5, r25	; 0x05
     2fc:	8c 83       	std	Y+4, r24	; 0x04
		AFTER(MSEC(5000), self, carLeave, NULL);
     2fe:	c1 2c       	mov	r12, r1
     300:	d1 2c       	mov	r13, r1
     302:	0f 2e       	mov	r0, r31
     304:	fd e4       	ldi	r31, 0x4D	; 77
     306:	ef 2e       	mov	r14, r31
     308:	f0 e0       	ldi	r31, 0x00	; 0
     30a:	ff 2e       	mov	r15, r31
     30c:	f0 2d       	mov	r31, r0
     30e:	8e 01       	movw	r16, r28
     310:	20 e0       	ldi	r18, 0x00	; 0
     312:	30 e0       	ldi	r19, 0x00	; 0
     314:	a9 01       	movw	r20, r18
     316:	6a e5       	ldi	r22, 0x5A	; 90
     318:	72 e6       	ldi	r23, 0x62	; 98
     31a:	82 e0       	ldi	r24, 0x02	; 2
     31c:	90 e0       	ldi	r25, 0x00	; 0
     31e:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <async>
		if((self->carspassed >= 5) && (self->queueSouth > 0)) { // 5 bilar + 5 sekunder(5 bilar till) blir 10 bilar
     322:	8e 85       	ldd	r24, Y+14	; 0x0e
     324:	9f 85       	ldd	r25, Y+15	; 0x0f
     326:	05 97       	sbiw	r24, 0x05	; 5
     328:	54 f0       	brlt	.+20     	; 0x33e <carRun+0xd8>
     32a:	8e 81       	ldd	r24, Y+6	; 0x06
     32c:	9f 81       	ldd	r25, Y+7	; 0x07
     32e:	18 16       	cp	r1, r24
     330:	19 06       	cpc	r1, r25
     332:	2c f4       	brge	.+10     	; 0x33e <carRun+0xd8>
			self->carspassed = 0;
     334:	1f 86       	std	Y+15, r1	; 0x0f
     336:	1e 86       	std	Y+14, r1	; 0x0e
			changeDirection(self);
     338:	ce 01       	movw	r24, r28
     33a:	0e 94 68 00 	call	0xd0	; 0xd0 <changeDirection>
		}
	}
	updateDisp(self);
     33e:	ce 01       	movw	r24, r28
     340:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <updateDisp>
}
     344:	df 91       	pop	r29
     346:	cf 91       	pop	r28
     348:	1f 91       	pop	r17
     34a:	0f 91       	pop	r16
     34c:	ff 90       	pop	r15
     34e:	ef 90       	pop	r14
     350:	df 90       	pop	r13
     352:	cf 90       	pop	r12
     354:	08 95       	ret

00000356 <addcar>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include <stdbool.h>

void addcar(Bridge *self, int sensor){
	if (sensor == 0b0100){
     356:	64 30       	cpi	r22, 0x04	; 4
     358:	71 05       	cpc	r23, r1
     35a:	41 f4       	brne	.+16     	; 0x36c <addcar+0x16>
		self->queueSouth++;
     35c:	fc 01       	movw	r30, r24
     35e:	26 81       	ldd	r18, Z+6	; 0x06
     360:	37 81       	ldd	r19, Z+7	; 0x07
     362:	2f 5f       	subi	r18, 0xFF	; 255
     364:	3f 4f       	sbci	r19, 0xFF	; 255
     366:	37 83       	std	Z+7, r19	; 0x07
     368:	26 83       	std	Z+6, r18	; 0x06
     36a:	08 95       	ret
	}
	else if(sensor == 0b0001){
     36c:	61 30       	cpi	r22, 0x01	; 1
     36e:	71 05       	cpc	r23, r1
     370:	41 f4       	brne	.+16     	; 0x382 <addcar+0x2c>
		self->queueNorth++;
     372:	fc 01       	movw	r30, r24
     374:	20 85       	ldd	r18, Z+8	; 0x08
     376:	31 85       	ldd	r19, Z+9	; 0x09
     378:	2f 5f       	subi	r18, 0xFF	; 255
     37a:	3f 4f       	sbci	r19, 0xFF	; 255
     37c:	31 87       	std	Z+9, r19	; 0x09
     37e:	20 87       	std	Z+8, r18	; 0x08
     380:	08 95       	ret
	}
	else if(sensor == (0b1000 || 0b0010)){
     382:	61 30       	cpi	r22, 0x01	; 1
     384:	71 05       	cpc	r23, r1
     386:	11 f4       	brne	.+4      	; 0x38c <addcar+0x36>
		carRun(self);
     388:	0e 94 33 01 	call	0x266	; 0x266 <carRun>
     38c:	08 95       	ret

0000038e <writeChar>:
	writeChar( (num % 100) / 10 + '0', pp);
	pp++;
	writeChar( num % 10 + '0', pp);
}

void writeChar(char ch, int pos){
     38e:	cf 93       	push	r28
     390:	df 93       	push	r29
     392:	cd b7       	in	r28, 0x3d	; 61
     394:	de b7       	in	r29, 0x3e	; 62
     396:	64 97       	sbiw	r28, 0x14	; 20
     398:	0f b6       	in	r0, 0x3f	; 63
     39a:	f8 94       	cli
     39c:	de bf       	out	0x3e, r29	; 62
     39e:	0f be       	out	0x3f, r0	; 63
     3a0:	cd bf       	out	0x3d, r28	; 61
	// All the numbers
	// 0 - 0x1551, 1 - 0x0110, 2 - 0x1E11, 3 - 0x1B11, 4 - 0x0B50, 5 - 0x1B41, 6 - 0x1F41, 7 - 0x0111, 8 - 0x1F51, 9 - 0x0B51
	uint16_t scc[] = {0x1551, 0x0110, 0x1E11, 0x1B11, 0x0B50, 0x1B41, 0x1F41, 0x0111, 0x1F51, 0x0B51};
     3a2:	94 e1       	ldi	r25, 0x14	; 20
     3a4:	e8 e0       	ldi	r30, 0x08	; 8
     3a6:	f1 e0       	ldi	r31, 0x01	; 1
     3a8:	de 01       	movw	r26, r28
     3aa:	11 96       	adiw	r26, 0x01	; 1
     3ac:	01 90       	ld	r0, Z+
     3ae:	0d 92       	st	X+, r0
     3b0:	9a 95       	dec	r25
     3b2:	e1 f7       	brne	.-8      	; 0x3ac <writeChar+0x1e>
	
	if(pos >= 0 && pos <= 5){
     3b4:	66 30       	cpi	r22, 0x06	; 6
     3b6:	71 05       	cpc	r23, r1
     3b8:	08 f0       	brcs	.+2      	; 0x3bc <writeChar+0x2e>
     3ba:	54 c0       	rjmp	.+168    	; 0x464 <__DATA_REGION_LENGTH__+0x64>
		if (ch >= '0' || ch <= '9'){
			int pair = pos / 2;					      // Make sure it's either pair 0,1 - 2,3 or 4,5
     3bc:	fb 01       	movw	r30, r22
     3be:	77 23       	and	r23, r23
     3c0:	0c f4       	brge	.+2      	; 0x3c4 <writeChar+0x36>
     3c2:	31 96       	adiw	r30, 0x01	; 1
     3c4:	f5 95       	asr	r31
     3c6:	e7 95       	ror	r30
			uint8_t *lcddr = (uint8_t *) 0xEC + pair; // Point to register position 0xEC which is LCDDR0 and add pair to get LCDDR0, LCDDR1 or LCDDR2
     3c8:	e4 51       	subi	r30, 0x14	; 20
     3ca:	ff 4f       	sbci	r31, 0xFF	; 255
			uint16_t num = scc[ch - '0'];			  // Get the hexadecimal number from the list
     3cc:	a8 2f       	mov	r26, r24
     3ce:	b0 e0       	ldi	r27, 0x00	; 0
     3d0:	d0 97       	sbiw	r26, 0x30	; 48
     3d2:	aa 0f       	add	r26, r26
     3d4:	bb 1f       	adc	r27, r27
     3d6:	81 e0       	ldi	r24, 0x01	; 1
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	8c 0f       	add	r24, r28
     3dc:	9d 1f       	adc	r25, r29
     3de:	a8 0f       	add	r26, r24
     3e0:	b9 1f       	adc	r27, r25
     3e2:	0d 90       	ld	r0, X+
     3e4:	bc 91       	ld	r27, X
     3e6:	a0 2d       	mov	r26, r0
			for (int i = 0; i <= 3; i++) {			  // Loop through every number in the hexadecimal number
     3e8:	40 e0       	ldi	r20, 0x00	; 0
     3ea:	50 e0       	ldi	r21, 0x00	; 0
     3ec:	38 c0       	rjmp	.+112    	; 0x45e <__DATA_REGION_LENGTH__+0x5e>
				int nibble = num & 0xF;				  // Get the least significant number in the hex
     3ee:	cd 01       	movw	r24, r26
     3f0:	8f 70       	andi	r24, 0x0F	; 15
     3f2:	99 27       	eor	r25, r25
				
				if(pos % 2 == 1) {				      // Check if the nibble parts should be in the left or right number in the pair
     3f4:	9b 01       	movw	r18, r22
     3f6:	21 70       	andi	r18, 0x01	; 1
     3f8:	30 78       	andi	r19, 0x80	; 128
     3fa:	33 23       	and	r19, r19
     3fc:	34 f4       	brge	.+12     	; 0x40a <__DATA_REGION_LENGTH__+0xa>
     3fe:	21 50       	subi	r18, 0x01	; 1
     400:	31 09       	sbc	r19, r1
     402:	2e 6f       	ori	r18, 0xFE	; 254
     404:	3f 6f       	ori	r19, 0xFF	; 255
     406:	2f 5f       	subi	r18, 0xFF	; 255
     408:	3f 4f       	sbci	r19, 0xFF	; 255
     40a:	21 30       	cpi	r18, 0x01	; 1
     40c:	31 05       	cpc	r19, r1
     40e:	89 f4       	brne	.+34     	; 0x432 <__DATA_REGION_LENGTH__+0x32>
					nibble *= 0x10;					  // If pos % 2 == 1 -> nibble will load in right digit
     410:	82 95       	swap	r24
     412:	92 95       	swap	r25
     414:	90 7f       	andi	r25, 0xF0	; 240
     416:	98 27       	eor	r25, r24
     418:	80 7f       	andi	r24, 0xF0	; 240
     41a:	98 27       	eor	r25, r24
					if(lcddr == &LCDDR0){
     41c:	ec 3e       	cpi	r30, 0xEC	; 236
     41e:	f1 05       	cpc	r31, r1
     420:	21 f4       	brne	.+8      	; 0x42a <__DATA_REGION_LENGTH__+0x2a>
						*lcddr = *lcddr & 0xD;
     422:	20 81       	ld	r18, Z
     424:	2d 70       	andi	r18, 0x0D	; 13
     426:	20 83       	st	Z, r18
     428:	0e c0       	rjmp	.+28     	; 0x446 <__DATA_REGION_LENGTH__+0x46>
					}
					else{
						*lcddr = *lcddr & 0xF;
     42a:	20 81       	ld	r18, Z
     42c:	2f 70       	andi	r18, 0x0F	; 15
     42e:	20 83       	st	Z, r18
     430:	0a c0       	rjmp	.+20     	; 0x446 <__DATA_REGION_LENGTH__+0x46>
					}
					}else{
					if(lcddr == &LCDDR0){
     432:	ec 3e       	cpi	r30, 0xEC	; 236
     434:	f1 05       	cpc	r31, r1
     436:	21 f4       	brne	.+8      	; 0x440 <__DATA_REGION_LENGTH__+0x40>
						*lcddr = *lcddr & 0xD0;
     438:	20 81       	ld	r18, Z
     43a:	20 7d       	andi	r18, 0xD0	; 208
     43c:	20 83       	st	Z, r18
     43e:	03 c0       	rjmp	.+6      	; 0x446 <__DATA_REGION_LENGTH__+0x46>
						}else{
						*lcddr = *lcddr & 0xF0;
     440:	20 81       	ld	r18, Z
     442:	20 7f       	andi	r18, 0xF0	; 240
     444:	20 83       	st	Z, r18
					}
				}
				
				*lcddr = *lcddr | nibble;			  // Write the nibble to the digit
     446:	90 81       	ld	r25, Z
     448:	89 2b       	or	r24, r25
     44a:	80 83       	st	Z, r24
				lcddr += 5;							  // Go to LCDDRx + 5
     44c:	35 96       	adiw	r30, 0x05	; 5
				num /= 0x10;						  // Next nibble
     44e:	b2 95       	swap	r27
     450:	a2 95       	swap	r26
     452:	af 70       	andi	r26, 0x0F	; 15
     454:	ab 27       	eor	r26, r27
     456:	bf 70       	andi	r27, 0x0F	; 15
     458:	ab 27       	eor	r26, r27
	if(pos >= 0 && pos <= 5){
		if (ch >= '0' || ch <= '9'){
			int pair = pos / 2;					      // Make sure it's either pair 0,1 - 2,3 or 4,5
			uint8_t *lcddr = (uint8_t *) 0xEC + pair; // Point to register position 0xEC which is LCDDR0 and add pair to get LCDDR0, LCDDR1 or LCDDR2
			uint16_t num = scc[ch - '0'];			  // Get the hexadecimal number from the list
			for (int i = 0; i <= 3; i++) {			  // Loop through every number in the hexadecimal number
     45a:	4f 5f       	subi	r20, 0xFF	; 255
     45c:	5f 4f       	sbci	r21, 0xFF	; 255
     45e:	44 30       	cpi	r20, 0x04	; 4
     460:	51 05       	cpc	r21, r1
     462:	2c f2       	brlt	.-118    	; 0x3ee <writeChar+0x60>
				lcddr += 5;							  // Go to LCDDRx + 5
				num /= 0x10;						  // Next nibble
			}
		}
	}
}
     464:	64 96       	adiw	r28, 0x14	; 20
     466:	0f b6       	in	r0, 0x3f	; 63
     468:	f8 94       	cli
     46a:	de bf       	out	0x3e, r29	; 62
     46c:	0f be       	out	0x3f, r0	; 63
     46e:	cd bf       	out	0x3d, r28	; 61
     470:	df 91       	pop	r29
     472:	cf 91       	pop	r28
     474:	08 95       	ret

00000476 <printAt>:
	printAt(0, 0);
	printAt(0, 2);
	printAt(0, 4);
}

void printAt(long num, int pos) {
     476:	8f 92       	push	r8
     478:	9f 92       	push	r9
     47a:	af 92       	push	r10
     47c:	bf 92       	push	r11
     47e:	cf 92       	push	r12
     480:	df 92       	push	r13
     482:	ef 92       	push	r14
     484:	ff 92       	push	r15
     486:	cf 93       	push	r28
     488:	df 93       	push	r29
     48a:	4b 01       	movw	r8, r22
     48c:	5c 01       	movw	r10, r24
     48e:	ea 01       	movw	r28, r20
	int pp = pos;
	writeChar( (num % 100) / 10 + '0', pp);
     490:	24 e6       	ldi	r18, 0x64	; 100
     492:	30 e0       	ldi	r19, 0x00	; 0
     494:	40 e0       	ldi	r20, 0x00	; 0
     496:	50 e0       	ldi	r21, 0x00	; 0
     498:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <__divmodsi4>
     49c:	0f 2e       	mov	r0, r31
     49e:	fa e0       	ldi	r31, 0x0A	; 10
     4a0:	cf 2e       	mov	r12, r31
     4a2:	d1 2c       	mov	r13, r1
     4a4:	e1 2c       	mov	r14, r1
     4a6:	f1 2c       	mov	r15, r1
     4a8:	f0 2d       	mov	r31, r0
     4aa:	a7 01       	movw	r20, r14
     4ac:	96 01       	movw	r18, r12
     4ae:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <__divmodsi4>
     4b2:	be 01       	movw	r22, r28
     4b4:	80 e3       	ldi	r24, 0x30	; 48
     4b6:	82 0f       	add	r24, r18
     4b8:	0e 94 c7 01 	call	0x38e	; 0x38e <writeChar>
	pp++;
     4bc:	21 96       	adiw	r28, 0x01	; 1
	writeChar( num % 10 + '0', pp);
     4be:	c5 01       	movw	r24, r10
     4c0:	b4 01       	movw	r22, r8
     4c2:	a7 01       	movw	r20, r14
     4c4:	96 01       	movw	r18, r12
     4c6:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <__divmodsi4>
     4ca:	86 2f       	mov	r24, r22
     4cc:	be 01       	movw	r22, r28
     4ce:	80 5d       	subi	r24, 0xD0	; 208
     4d0:	0e 94 c7 01 	call	0x38e	; 0x38e <writeChar>
}
     4d4:	df 91       	pop	r29
     4d6:	cf 91       	pop	r28
     4d8:	ff 90       	pop	r15
     4da:	ef 90       	pop	r14
     4dc:	df 90       	pop	r13
     4de:	cf 90       	pop	r12
     4e0:	bf 90       	pop	r11
     4e2:	af 90       	pop	r10
     4e4:	9f 90       	pop	r9
     4e6:	8f 90       	pop	r8
     4e8:	08 95       	ret

000004ea <LCD_Init>:
		LCDCS    - Asynchronous clock source
		LCDMUX's - Duty = 1/4, Bias = 1/3
		LCDPM's  - Number of Segments = 25
	*/
	
	LCDCRB = (1 << LCDCS) | (1 << LCDMUX1) | (1 << LCDMUX0) | (1 << LCDPM2) | (1 << LCDPM1) | (1 << LCDPM0) | LCDCRB;
     4ea:	e5 ee       	ldi	r30, 0xE5	; 229
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	80 81       	ld	r24, Z
     4f0:	87 6b       	ori	r24, 0xB7	; 183
     4f2:	80 83       	st	Z, r24
	/*
		LCD Frame Rate Register:
		LCDCD's - Prescaler setting N = 16
	*/
	
	LCDFRR = (1 << LCDCD2) | (1 << LCDCD1) | (1 << LCDCD0) | LCDFRR;
     4f4:	e6 ee       	ldi	r30, 0xE6	; 230
     4f6:	f0 e0       	ldi	r31, 0x00	; 0
     4f8:	80 81       	ld	r24, Z
     4fa:	87 60       	ori	r24, 0x07	; 7
     4fc:	80 83       	st	Z, r24
		LCD Contrast Control Register
		None of the LCDDC's used = 300 microseconds
		LCDCC's = 3,35V
	*/
	
	LCDCCR = (1 << LCDCC3) | (1 << LCDCC2) | (1 << LCDCC1) | (1 << LCDCC0) | LCDCCR;
     4fe:	e7 ee       	ldi	r30, 0xE7	; 231
     500:	f0 e0       	ldi	r31, 0x00	; 0
     502:	80 81       	ld	r24, Z
     504:	8f 60       	ori	r24, 0x0F	; 15
     506:	80 83       	st	Z, r24
	
	/*
		LCDEN = LCD Enabled
		LCDAB = Low Power Waveform
	*/
	LCDCRA = (1 << LCDEN) | (1 << LCDAB) | LCDCRA;
     508:	e4 ee       	ldi	r30, 0xE4	; 228
     50a:	f0 e0       	ldi	r31, 0x00	; 0
     50c:	80 81       	ld	r24, Z
     50e:	80 6c       	ori	r24, 0xC0	; 192
     510:	80 83       	st	Z, r24
	LCDDR8 = 1;
     512:	81 e0       	ldi	r24, 0x01	; 1
     514:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7fc0f4>
	printAt(0, 0);
     518:	40 e0       	ldi	r20, 0x00	; 0
     51a:	50 e0       	ldi	r21, 0x00	; 0
     51c:	60 e0       	ldi	r22, 0x00	; 0
     51e:	70 e0       	ldi	r23, 0x00	; 0
     520:	cb 01       	movw	r24, r22
     522:	0e 94 3b 02 	call	0x476	; 0x476 <printAt>
	printAt(0, 2);
     526:	42 e0       	ldi	r20, 0x02	; 2
     528:	50 e0       	ldi	r21, 0x00	; 0
     52a:	60 e0       	ldi	r22, 0x00	; 0
     52c:	70 e0       	ldi	r23, 0x00	; 0
     52e:	cb 01       	movw	r24, r22
     530:	0e 94 3b 02 	call	0x476	; 0x476 <printAt>
	printAt(0, 4);
     534:	44 e0       	ldi	r20, 0x04	; 4
     536:	50 e0       	ldi	r21, 0x00	; 0
     538:	60 e0       	ldi	r22, 0x00	; 0
     53a:	70 e0       	ldi	r23, 0x00	; 0
     53c:	cb 01       	movw	r24, r22
     53e:	0e 94 3b 02 	call	0x476	; 0x476 <printAt>
     542:	08 95       	ret

00000544 <setleft>:
}


void setleft(GUI *self, int val){
	//self->leftDisp = val;
	printAt(val, 0);
     544:	07 2e       	mov	r0, r23
     546:	00 0c       	add	r0, r0
     548:	88 0b       	sbc	r24, r24
     54a:	99 0b       	sbc	r25, r25
     54c:	40 e0       	ldi	r20, 0x00	; 0
     54e:	50 e0       	ldi	r21, 0x00	; 0
     550:	0e 94 3b 02 	call	0x476	; 0x476 <printAt>
     554:	08 95       	ret

00000556 <setmiddle>:
}
void setmiddle(GUI *self, int val){
	//self->middleDisp = val;
	printAt(val, 2);
     556:	07 2e       	mov	r0, r23
     558:	00 0c       	add	r0, r0
     55a:	88 0b       	sbc	r24, r24
     55c:	99 0b       	sbc	r25, r25
     55e:	42 e0       	ldi	r20, 0x02	; 2
     560:	50 e0       	ldi	r21, 0x00	; 0
     562:	0e 94 3b 02 	call	0x476	; 0x476 <printAt>
     566:	08 95       	ret

00000568 <setright>:
}
void setright(GUI *self, int val){
	//self->rightDisp = val;
	printAt(val, 4);
     568:	07 2e       	mov	r0, r23
     56a:	00 0c       	add	r0, r0
     56c:	88 0b       	sbc	r24, r24
     56e:	99 0b       	sbc	r25, r25
     570:	44 e0       	ldi	r20, 0x04	; 4
     572:	50 e0       	ldi	r21, 0x00	; 0
     574:	0e 94 3b 02 	call	0x476	; 0x476 <printAt>
     578:	08 95       	ret

0000057a <USART_Init>:
#include <avr/io.h>
#include <avr/interrupt.h>
#include <stdbool.h>

void USART_Init(unsigned int ubrr){
	UBRR0H = (unsigned char) (ubrr>>8);
     57a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7fc0c5>
	UBRR0L = (unsigned char) ubrr;
     57e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7fc0c4>
	
	UCSR0B = (1 << TXEN0) | (1 << RXCIE0) | (1 << RXEN0);
     582:	88 e9       	ldi	r24, 0x98	; 152
     584:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7fc0c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
     588:	86 e0       	ldi	r24, 0x06	; 6
     58a:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7fc0c2>
     58e:	08 95       	ret

00000590 <newcar>:
	
}

void newcar(Inputs *self){
     590:	cf 92       	push	r12
     592:	df 92       	push	r13
     594:	ef 92       	push	r14
     596:	ff 92       	push	r15
     598:	0f 93       	push	r16
     59a:	1f 93       	push	r17
     59c:	9c 01       	movw	r18, r24
	while( ! (UCSR0A & (1 << RXC0)));
     59e:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7fc0c0>
     5a2:	99 23       	and	r25, r25
     5a4:	e4 f7       	brge	.-8      	; 0x59e <newcar+0xe>
	if((UDR0 == southcar) || (UDR0 == northcar) || (UDR0 == southDrive) || (UDR0 == northDrive)){
     5a6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fc0c6>
     5aa:	84 30       	cpi	r24, 0x04	; 4
     5ac:	61 f0       	breq	.+24     	; 0x5c6 <newcar+0x36>
     5ae:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fc0c6>
     5b2:	81 30       	cpi	r24, 0x01	; 1
     5b4:	41 f0       	breq	.+16     	; 0x5c6 <newcar+0x36>
     5b6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fc0c6>
     5ba:	88 30       	cpi	r24, 0x08	; 8
     5bc:	21 f0       	breq	.+8      	; 0x5c6 <newcar+0x36>
     5be:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fc0c6>
     5c2:	82 30       	cpi	r24, 0x02	; 2
     5c4:	a1 f4       	brne	.+40     	; 0x5ee <newcar+0x5e>
     5c6:	f9 01       	movw	r30, r18
		int putin = UDR0;	
     5c8:	c0 90 c6 00 	lds	r12, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fc0c6>
     5cc:	d1 2c       	mov	r13, r1
		ASYNC(self->bridge, addcar, putin);
     5ce:	04 81       	ldd	r16, Z+4	; 0x04
     5d0:	15 81       	ldd	r17, Z+5	; 0x05
     5d2:	0f 2e       	mov	r0, r31
     5d4:	fb ea       	ldi	r31, 0xAB	; 171
     5d6:	ef 2e       	mov	r14, r31
     5d8:	f1 e0       	ldi	r31, 0x01	; 1
     5da:	ff 2e       	mov	r15, r31
     5dc:	f0 2d       	mov	r31, r0
     5de:	20 e0       	ldi	r18, 0x00	; 0
     5e0:	30 e0       	ldi	r19, 0x00	; 0
     5e2:	a9 01       	movw	r20, r18
     5e4:	60 e0       	ldi	r22, 0x00	; 0
     5e6:	70 e0       	ldi	r23, 0x00	; 0
     5e8:	cb 01       	movw	r24, r22
     5ea:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <async>
	}
     5ee:	1f 91       	pop	r17
     5f0:	0f 91       	pop	r16
     5f2:	ff 90       	pop	r15
     5f4:	ef 90       	pop	r14
     5f6:	df 90       	pop	r13
     5f8:	cf 90       	pop	r12
     5fa:	08 95       	ret

000005fc <main>:

#define FOCS 8000000
#define BAUD 9600
#define MYUBRR (FOCS/16/BAUD-1)

int main(void){
     5fc:	0f 93       	push	r16
     5fe:	1f 93       	push	r17
     600:	cf 93       	push	r28
     602:	df 93       	push	r29
     604:	cd b7       	in	r28, 0x3d	; 61
     606:	de b7       	in	r29, 0x3e	; 62
     608:	a4 97       	sbiw	r28, 0x24	; 36
     60a:	0f b6       	in	r0, 0x3f	; 63
     60c:	f8 94       	cli
     60e:	de bf       	out	0x3e, r29	; 62
     610:	0f be       	out	0x3f, r0	; 63
     612:	cd bf       	out	0x3d, r28	; 61
	CLKPR = 0x80;
     614:	e1 e6       	ldi	r30, 0x61	; 97
     616:	f0 e0       	ldi	r31, 0x00	; 0
     618:	80 e8       	ldi	r24, 0x80	; 128
     61a:	80 83       	st	Z, r24
	CLKPR = 0x00;
     61c:	10 82       	st	Z, r1
	
	GUI gui = initGUI();
     61e:	1a 82       	std	Y+2, r1	; 0x02
     620:	19 82       	std	Y+1, r1	; 0x01
     622:	1c 82       	std	Y+4, r1	; 0x04
     624:	1b 82       	std	Y+3, r1	; 0x03
	Outputs outputs = initOutputs(0);
     626:	1e 82       	std	Y+6, r1	; 0x06
     628:	1d 82       	std	Y+5, r1	; 0x05
     62a:	18 86       	std	Y+8, r1	; 0x08
     62c:	1f 82       	std	Y+7, r1	; 0x07
     62e:	1a 86       	std	Y+10, r1	; 0x0a
     630:	19 86       	std	Y+9, r1	; 0x09
	Bridge bridge = initBridge(0, 0, 0, 0, 0, 0, &gui, &outputs);
     632:	1c 86       	std	Y+12, r1	; 0x0c
     634:	1b 86       	std	Y+11, r1	; 0x0b
     636:	1e 86       	std	Y+14, r1	; 0x0e
     638:	1d 86       	std	Y+13, r1	; 0x0d
     63a:	18 8a       	std	Y+16, r1	; 0x10
     63c:	1f 86       	std	Y+15, r1	; 0x0f
     63e:	1a 8a       	std	Y+18, r1	; 0x12
     640:	19 8a       	std	Y+17, r1	; 0x11
     642:	1c 8a       	std	Y+20, r1	; 0x14
     644:	1b 8a       	std	Y+19, r1	; 0x13
     646:	1e 8a       	std	Y+22, r1	; 0x16
     648:	1d 8a       	std	Y+21, r1	; 0x15
     64a:	18 8e       	std	Y+24, r1	; 0x18
     64c:	1f 8a       	std	Y+23, r1	; 0x17
     64e:	1a 8e       	std	Y+26, r1	; 0x1a
     650:	19 8e       	std	Y+25, r1	; 0x19
     652:	8e 01       	movw	r16, r28
     654:	0f 5f       	subi	r16, 0xFF	; 255
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	1c 8f       	std	Y+28, r17	; 0x1c
     65a:	0b 8f       	std	Y+27, r16	; 0x1b
     65c:	ce 01       	movw	r24, r28
     65e:	05 96       	adiw	r24, 0x05	; 5
     660:	9e 8f       	std	Y+30, r25	; 0x1e
     662:	8d 8f       	std	Y+29, r24	; 0x1d
	Inputs input = initInputs(&bridge);
     664:	18 a2       	std	Y+32, r1	; 0x20
     666:	1f 8e       	std	Y+31, r1	; 0x1f
     668:	1a a2       	std	Y+34, r1	; 0x22
     66a:	19 a2       	std	Y+33, r1	; 0x21
     66c:	06 96       	adiw	r24, 0x06	; 6
     66e:	9c a3       	std	Y+36, r25	; 0x24
     670:	8b a3       	std	Y+35, r24	; 0x23
	USART_Init(MYUBRR);
     672:	83 e3       	ldi	r24, 0x33	; 51
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	0e 94 bd 02 	call	0x57a	; 0x57a <USART_Init>
	
	INSTALL(&input, newcar, IRQ_USART0_RX);
     67a:	48 e0       	ldi	r20, 0x08	; 8
     67c:	68 ec       	ldi	r22, 0xC8	; 200
     67e:	72 e0       	ldi	r23, 0x02	; 2
     680:	ce 01       	movw	r24, r28
     682:	4f 96       	adiw	r24, 0x1f	; 31
     684:	0e 94 a7 0f 	call	0x1f4e	; 0x1f4e <install>
	
	return TINYTIMBER(&gui, LCD_Init, NULL);
     688:	40 e0       	ldi	r20, 0x00	; 0
     68a:	50 e0       	ldi	r21, 0x00	; 0
     68c:	65 e7       	ldi	r22, 0x75	; 117
     68e:	72 e0       	ldi	r23, 0x02	; 2
     690:	c8 01       	movw	r24, r16
     692:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <tinytimber>
}
     696:	a4 96       	adiw	r28, 0x24	; 36
     698:	0f b6       	in	r0, 0x3f	; 63
     69a:	f8 94       	cli
     69c:	de bf       	out	0x3e, r29	; 62
     69e:	0f be       	out	0x3f, r0	; 63
     6a0:	cd bf       	out	0x3d, r28	; 61
     6a2:	df 91       	pop	r29
     6a4:	cf 91       	pop	r28
     6a6:	1f 91       	pop	r17
     6a8:	0f 91       	pop	r16
     6aa:	08 95       	ret

000006ac <transmit>:
#include "Outputs.h"

void transmit(Outputs *self, int lightStatus){
     6ac:	fc 01       	movw	r30, r24
	if (lightStatus == 0){
     6ae:	61 15       	cp	r22, r1
     6b0:	71 05       	cpc	r23, r1
     6b2:	29 f4       	brne	.+10     	; 0x6be <transmit+0x12>
		self->data = 0b1001;
     6b4:	89 e0       	ldi	r24, 0x09	; 9
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	95 83       	std	Z+5, r25	; 0x05
     6ba:	84 83       	std	Z+4, r24	; 0x04
     6bc:	0c c0       	rjmp	.+24     	; 0x6d6 <transmit+0x2a>
	}
	else if(lightStatus == 1){
     6be:	61 30       	cpi	r22, 0x01	; 1
     6c0:	71 05       	cpc	r23, r1
     6c2:	29 f4       	brne	.+10     	; 0x6ce <transmit+0x22>
		self->data = 0b0110;
     6c4:	86 e0       	ldi	r24, 0x06	; 6
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	95 83       	std	Z+5, r25	; 0x05
     6ca:	84 83       	std	Z+4, r24	; 0x04
     6cc:	04 c0       	rjmp	.+8      	; 0x6d6 <transmit+0x2a>
	}else{
		self->data = 0b1010;
     6ce:	8a e0       	ldi	r24, 0x0A	; 10
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	95 83       	std	Z+5, r25	; 0x05
     6d4:	84 83       	std	Z+4, r24	; 0x04
	}
	
	while (!(UCSR0A & (1 << UDRE0)));
     6d6:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7fc0c0>
     6da:	95 ff       	sbrs	r25, 5
     6dc:	fc cf       	rjmp	.-8      	; 0x6d6 <transmit+0x2a>
	UDR0 = self->data;
     6de:	84 81       	ldd	r24, Z+4	; 0x04
     6e0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fc0c6>
     6e4:	08 95       	ret

000006e6 <initialize>:
    Time now;
    DISABLE(status);
    TIMERGET(now);
    ENABLE(status);
    return now - (status ? current->msg->baseline : timestamp);
}
     6e6:	cf 93       	push	r28
     6e8:	df 93       	push	r29
     6ea:	00 d0       	rcall	.+0      	; 0x6ec <initialize+0x6>
     6ec:	00 d0       	rcall	.+0      	; 0x6ee <initialize+0x8>
     6ee:	cd b7       	in	r28, 0x3d	; 61
     6f0:	de b7       	in	r29, 0x3e	; 62
     6f2:	80 e0       	ldi	r24, 0x00	; 0
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	18 c0       	rjmp	.+48     	; 0x728 <initialize+0x42>
     6f8:	ac 01       	movw	r20, r24
     6fa:	4f 5f       	subi	r20, 0xFF	; 255
     6fc:	5f 4f       	sbci	r21, 0xFF	; 255
     6fe:	9a 01       	movw	r18, r20
     700:	22 95       	swap	r18
     702:	32 95       	swap	r19
     704:	30 7f       	andi	r19, 0xF0	; 240
     706:	32 27       	eor	r19, r18
     708:	20 7f       	andi	r18, 0xF0	; 240
     70a:	32 27       	eor	r19, r18
     70c:	21 50       	subi	r18, 0x01	; 1
     70e:	3e 4f       	sbci	r19, 0xFE	; 254
     710:	82 95       	swap	r24
     712:	92 95       	swap	r25
     714:	90 7f       	andi	r25, 0xF0	; 240
     716:	98 27       	eor	r25, r24
     718:	80 7f       	andi	r24, 0xF0	; 240
     71a:	98 27       	eor	r25, r24
     71c:	fc 01       	movw	r30, r24
     71e:	e1 50       	subi	r30, 0x01	; 1
     720:	fe 4f       	sbci	r31, 0xFE	; 254
     722:	31 83       	std	Z+1, r19	; 0x01
     724:	20 83       	st	Z, r18
     726:	ca 01       	movw	r24, r20
     728:	8e 30       	cpi	r24, 0x0E	; 14
     72a:	91 05       	cpc	r25, r1
     72c:	2c f3       	brlt	.-54     	; 0x6f8 <initialize+0x12>
     72e:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <messages+0xe1>
     732:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <messages+0xe0>
     736:	80 e0       	ldi	r24, 0x00	; 0
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	15 c0       	rjmp	.+42     	; 0x766 <initialize+0x80>
     73c:	ac 01       	movw	r20, r24
     73e:	4f 5f       	subi	r20, 0xFF	; 255
     740:	5f 4f       	sbci	r21, 0xFF	; 255
     742:	6d e1       	ldi	r22, 0x1D	; 29
     744:	64 9f       	mul	r22, r20
     746:	90 01       	movw	r18, r0
     748:	65 9f       	mul	r22, r21
     74a:	30 0d       	add	r19, r0
     74c:	11 24       	eor	r1, r1
     74e:	26 5b       	subi	r18, 0xB6	; 182
     750:	3e 4f       	sbci	r19, 0xFE	; 254
     752:	68 9f       	mul	r22, r24
     754:	f0 01       	movw	r30, r0
     756:	69 9f       	mul	r22, r25
     758:	f0 0d       	add	r31, r0
     75a:	11 24       	eor	r1, r1
     75c:	e6 5b       	subi	r30, 0xB6	; 182
     75e:	fe 4f       	sbci	r31, 0xFE	; 254
     760:	31 83       	std	Z+1, r19	; 0x01
     762:	20 83       	st	Z, r18
     764:	ca 01       	movw	r24, r20
     766:	83 30       	cpi	r24, 0x03	; 3
     768:	91 05       	cpc	r25, r1
     76a:	44 f3       	brlt	.-48     	; 0x73c <initialize+0x56>
     76c:	10 92 a2 01 	sts	0x01A2, r1	; 0x8001a2 <threads+0x58>
     770:	10 92 a1 01 	sts	0x01A1, r1	; 0x8001a1 <threads+0x57>
     774:	1a 82       	std	Y+2, r1	; 0x02
     776:	19 82       	std	Y+1, r1	; 0x01
     778:	32 c0       	rjmp	.+100    	; 0x7de <initialize+0xf8>
     77a:	2d e1       	ldi	r18, 0x1D	; 29
     77c:	49 81       	ldd	r20, Y+1	; 0x01
     77e:	5a 81       	ldd	r21, Y+2	; 0x02
     780:	24 9f       	mul	r18, r20
     782:	c0 01       	movw	r24, r0
     784:	25 9f       	mul	r18, r21
     786:	90 0d       	add	r25, r0
     788:	11 24       	eor	r1, r1
     78a:	fc 01       	movw	r30, r24
     78c:	e0 5b       	subi	r30, 0xB0	; 176
     78e:	fe 4f       	sbci	r31, 0xFE	; 254
     790:	fc 83       	std	Y+4, r31	; 0x04
     792:	eb 83       	std	Y+3, r30	; 0x03
     794:	cf 01       	movw	r24, r30
     796:	0e 94 1a 10 	call	0x2034	; 0x2034 <setjmp>
     79a:	20 e6       	ldi	r18, 0x60	; 96
     79c:	49 81       	ldd	r20, Y+1	; 0x01
     79e:	5a 81       	ldd	r21, Y+2	; 0x02
     7a0:	24 9f       	mul	r18, r20
     7a2:	c0 01       	movw	r24, r0
     7a4:	25 9f       	mul	r18, r21
     7a6:	90 0d       	add	r25, r0
     7a8:	11 24       	eor	r1, r1
     7aa:	85 5b       	subi	r24, 0xB5	; 181
     7ac:	9c 4f       	sbci	r25, 0xFC	; 252
     7ae:	eb 81       	ldd	r30, Y+3	; 0x03
     7b0:	fc 81       	ldd	r31, Y+4	; 0x04
     7b2:	91 8b       	std	Z+17, r25	; 0x11
     7b4:	80 8b       	std	Z+16, r24	; 0x10
     7b6:	93 8b       	std	Z+19, r25	; 0x13
     7b8:	82 8b       	std	Z+18, r24	; 0x12
     7ba:	8f e4       	ldi	r24, 0x4F	; 79
     7bc:	9f e0       	ldi	r25, 0x0F	; 15
     7be:	96 8b       	std	Z+22, r25	; 0x16
     7c0:	85 8b       	std	Z+21, r24	; 0x15
     7c2:	8d e1       	ldi	r24, 0x1D	; 29
     7c4:	84 9f       	mul	r24, r20
     7c6:	f0 01       	movw	r30, r0
     7c8:	85 9f       	mul	r24, r21
     7ca:	f0 0d       	add	r31, r0
     7cc:	11 24       	eor	r1, r1
     7ce:	e6 5b       	subi	r30, 0xB6	; 182
     7d0:	fe 4f       	sbci	r31, 0xFE	; 254
     7d2:	15 82       	std	Z+5, r1	; 0x05
     7d4:	14 82       	std	Z+4, r1	; 0x04
     7d6:	4f 5f       	subi	r20, 0xFF	; 255
     7d8:	5f 4f       	sbci	r21, 0xFF	; 255
     7da:	5a 83       	std	Y+2, r21	; 0x02
     7dc:	49 83       	std	Y+1, r20	; 0x01
     7de:	29 81       	ldd	r18, Y+1	; 0x01
     7e0:	3a 81       	ldd	r19, Y+2	; 0x02
     7e2:	24 30       	cpi	r18, 0x04	; 4
     7e4:	31 05       	cpc	r19, r1
     7e6:	4c f2       	brlt	.-110    	; 0x77a <initialize+0x94>
     7e8:	e2 ee       	ldi	r30, 0xE2	; 226
     7ea:	f1 e0       	ldi	r31, 0x01	; 1
     7ec:	11 82       	std	Z+1, r1	; 0x01
     7ee:	10 82       	st	Z, r1
     7f0:	15 82       	std	Z+5, r1	; 0x05
     7f2:	14 82       	std	Z+4, r1	; 0x04
     7f4:	13 82       	std	Z+3, r1	; 0x03
     7f6:	12 82       	std	Z+2, r1	; 0x02
     7f8:	e1 e6       	ldi	r30, 0x61	; 97
     7fa:	f0 e0       	ldi	r31, 0x00	; 0
     7fc:	80 e8       	ldi	r24, 0x80	; 128
     7fe:	80 83       	st	Z, r24
     800:	10 82       	st	Z, r1
     802:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     806:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     80a:	84 e0       	ldi	r24, 0x04	; 4
     80c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
     810:	81 e0       	ldi	r24, 0x01	; 1
     812:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
     816:	0f 90       	pop	r0
     818:	0f 90       	pop	r0
     81a:	0f 90       	pop	r0
     81c:	0f 90       	pop	r0
     81e:	df 91       	pop	r29
     820:	cf 91       	pop	r28
     822:	08 95       	ret

00000824 <dispatch>:
     824:	cf 93       	push	r28
     826:	df 93       	push	r29
     828:	00 d0       	rcall	.+0      	; 0x82a <dispatch+0x6>
     82a:	cd b7       	in	r28, 0x3d	; 61
     82c:	de b7       	in	r29, 0x3e	; 62
     82e:	9a 83       	std	Y+2, r25	; 0x02
     830:	89 83       	std	Y+1, r24	; 0x01
     832:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     836:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     83a:	06 96       	adiw	r24, 0x06	; 6
     83c:	0e 94 1a 10 	call	0x2034	; 0x2034 <setjmp>
     840:	89 2b       	or	r24, r25
     842:	59 f4       	brne	.+22     	; 0x85a <dispatch+0x36>
     844:	89 81       	ldd	r24, Y+1	; 0x01
     846:	9a 81       	ldd	r25, Y+2	; 0x02
     848:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     84c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     850:	61 e0       	ldi	r22, 0x01	; 1
     852:	70 e0       	ldi	r23, 0x00	; 0
     854:	06 96       	adiw	r24, 0x06	; 6
     856:	0e 94 3a 10 	call	0x2074	; 0x2074 <longjmp>
     85a:	0f 90       	pop	r0
     85c:	0f 90       	pop	r0
     85e:	df 91       	pop	r29
     860:	cf 91       	pop	r28
     862:	08 95       	ret

00000864 <enqueueByDeadline>:
     864:	0f 93       	push	r16
     866:	1f 93       	push	r17
     868:	cf 93       	push	r28
     86a:	df 93       	push	r29
     86c:	dc 01       	movw	r26, r24
     86e:	cb 01       	movw	r24, r22
     870:	eb 01       	movw	r28, r22
     872:	e8 81       	ld	r30, Y
     874:	f9 81       	ldd	r31, Y+1	; 0x01
     876:	c0 e0       	ldi	r28, 0x00	; 0
     878:	d0 e0       	ldi	r29, 0x00	; 0
     87a:	04 c0       	rjmp	.+8      	; 0x884 <enqueueByDeadline+0x20>
     87c:	ef 01       	movw	r28, r30
     87e:	01 90       	ld	r0, Z+
     880:	f0 81       	ld	r31, Z
     882:	e0 2d       	mov	r30, r0
     884:	30 97       	sbiw	r30, 0x00	; 0
     886:	79 f0       	breq	.+30     	; 0x8a6 <enqueueByDeadline+0x42>
     888:	06 81       	ldd	r16, Z+6	; 0x06
     88a:	17 81       	ldd	r17, Z+7	; 0x07
     88c:	20 85       	ldd	r18, Z+8	; 0x08
     88e:	31 85       	ldd	r19, Z+9	; 0x09
     890:	16 96       	adiw	r26, 0x06	; 6
     892:	4d 91       	ld	r20, X+
     894:	5d 91       	ld	r21, X+
     896:	6d 91       	ld	r22, X+
     898:	7c 91       	ld	r23, X
     89a:	19 97       	sbiw	r26, 0x09	; 9
     89c:	40 17       	cp	r20, r16
     89e:	51 07       	cpc	r21, r17
     8a0:	62 07       	cpc	r22, r18
     8a2:	73 07       	cpc	r23, r19
     8a4:	5c f7       	brge	.-42     	; 0x87c <enqueueByDeadline+0x18>
     8a6:	11 96       	adiw	r26, 0x01	; 1
     8a8:	fc 93       	st	X, r31
     8aa:	ee 93       	st	-X, r30
     8ac:	20 97       	sbiw	r28, 0x00	; 0
     8ae:	21 f4       	brne	.+8      	; 0x8b8 <enqueueByDeadline+0x54>
     8b0:	fc 01       	movw	r30, r24
     8b2:	b1 83       	std	Z+1, r27	; 0x01
     8b4:	a0 83       	st	Z, r26
     8b6:	02 c0       	rjmp	.+4      	; 0x8bc <enqueueByDeadline+0x58>
     8b8:	b9 83       	std	Y+1, r27	; 0x01
     8ba:	a8 83       	st	Y, r26
     8bc:	df 91       	pop	r29
     8be:	cf 91       	pop	r28
     8c0:	1f 91       	pop	r17
     8c2:	0f 91       	pop	r16
     8c4:	08 95       	ret

000008c6 <enqueueByBaseline>:
     8c6:	0f 93       	push	r16
     8c8:	1f 93       	push	r17
     8ca:	cf 93       	push	r28
     8cc:	df 93       	push	r29
     8ce:	dc 01       	movw	r26, r24
     8d0:	cb 01       	movw	r24, r22
     8d2:	eb 01       	movw	r28, r22
     8d4:	e8 81       	ld	r30, Y
     8d6:	f9 81       	ldd	r31, Y+1	; 0x01
     8d8:	c0 e0       	ldi	r28, 0x00	; 0
     8da:	d0 e0       	ldi	r29, 0x00	; 0
     8dc:	04 c0       	rjmp	.+8      	; 0x8e6 <enqueueByBaseline+0x20>
     8de:	ef 01       	movw	r28, r30
     8e0:	01 90       	ld	r0, Z+
     8e2:	f0 81       	ld	r31, Z
     8e4:	e0 2d       	mov	r30, r0
     8e6:	30 97       	sbiw	r30, 0x00	; 0
     8e8:	79 f0       	breq	.+30     	; 0x908 <enqueueByBaseline+0x42>
     8ea:	02 81       	ldd	r16, Z+2	; 0x02
     8ec:	13 81       	ldd	r17, Z+3	; 0x03
     8ee:	24 81       	ldd	r18, Z+4	; 0x04
     8f0:	35 81       	ldd	r19, Z+5	; 0x05
     8f2:	12 96       	adiw	r26, 0x02	; 2
     8f4:	4d 91       	ld	r20, X+
     8f6:	5d 91       	ld	r21, X+
     8f8:	6d 91       	ld	r22, X+
     8fa:	7c 91       	ld	r23, X
     8fc:	15 97       	sbiw	r26, 0x05	; 5
     8fe:	40 17       	cp	r20, r16
     900:	51 07       	cpc	r21, r17
     902:	62 07       	cpc	r22, r18
     904:	73 07       	cpc	r23, r19
     906:	5c f7       	brge	.-42     	; 0x8de <enqueueByBaseline+0x18>
     908:	11 96       	adiw	r26, 0x01	; 1
     90a:	fc 93       	st	X, r31
     90c:	ee 93       	st	-X, r30
     90e:	20 97       	sbiw	r28, 0x00	; 0
     910:	21 f4       	brne	.+8      	; 0x91a <enqueueByBaseline+0x54>
     912:	fc 01       	movw	r30, r24
     914:	b1 83       	std	Z+1, r27	; 0x01
     916:	a0 83       	st	Z, r26
     918:	02 c0       	rjmp	.+4      	; 0x91e <enqueueByBaseline+0x58>
     91a:	b9 83       	std	Y+1, r27	; 0x01
     91c:	a8 83       	st	Y, r26
     91e:	df 91       	pop	r29
     920:	cf 91       	pop	r28
     922:	1f 91       	pop	r17
     924:	0f 91       	pop	r16
     926:	08 95       	ret

00000928 <dequeue>:
     928:	dc 01       	movw	r26, r24
     92a:	ed 91       	ld	r30, X+
     92c:	fc 91       	ld	r31, X
     92e:	11 97       	sbiw	r26, 0x01	; 1
     930:	30 97       	sbiw	r30, 0x00	; 0
     932:	59 f4       	brne	.+22     	; 0x94a <dequeue+0x22>
     934:	8f ef       	ldi	r24, 0xFF	; 255
     936:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
     93a:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
     93e:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
     942:	81 e0       	ldi	r24, 0x01	; 1
     944:	83 bf       	out	0x33, r24	; 51
     946:	88 95       	sleep
     948:	fc cf       	rjmp	.-8      	; 0x942 <dequeue+0x1a>
     94a:	20 81       	ld	r18, Z
     94c:	31 81       	ldd	r19, Z+1	; 0x01
     94e:	2d 93       	st	X+, r18
     950:	3c 93       	st	X, r19
     952:	cf 01       	movw	r24, r30
     954:	08 95       	ret

00000956 <insert>:
     956:	fb 01       	movw	r30, r22
     958:	20 81       	ld	r18, Z
     95a:	31 81       	ldd	r19, Z+1	; 0x01
     95c:	fc 01       	movw	r30, r24
     95e:	31 83       	std	Z+1, r19	; 0x01
     960:	20 83       	st	Z, r18
     962:	fb 01       	movw	r30, r22
     964:	91 83       	std	Z+1, r25	; 0x01
     966:	80 83       	st	Z, r24
     968:	08 95       	ret

0000096a <push>:
     96a:	fb 01       	movw	r30, r22
     96c:	20 81       	ld	r18, Z
     96e:	31 81       	ldd	r19, Z+1	; 0x01
     970:	fc 01       	movw	r30, r24
     972:	31 83       	std	Z+1, r19	; 0x01
     974:	20 83       	st	Z, r18
     976:	fb 01       	movw	r30, r22
     978:	91 83       	std	Z+1, r25	; 0x01
     97a:	80 83       	st	Z, r24
     97c:	08 95       	ret

0000097e <pop>:
     97e:	dc 01       	movw	r26, r24
     980:	ed 91       	ld	r30, X+
     982:	fc 91       	ld	r31, X
     984:	11 97       	sbiw	r26, 0x01	; 1
     986:	20 81       	ld	r18, Z
     988:	31 81       	ldd	r19, Z+1	; 0x01
     98a:	2d 93       	st	X+, r18
     98c:	3c 93       	st	X, r19
     98e:	cf 01       	movw	r24, r30
     990:	08 95       	ret

00000992 <schedule>:
     992:	cf 93       	push	r28
     994:	df 93       	push	r29
     996:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <activeStack>
     99a:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <activeStack+0x1>
     99e:	c2 81       	ldd	r28, Z+2	; 0x02
     9a0:	d3 81       	ldd	r29, Z+3	; 0x03
     9a2:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <msgQ>
     9a6:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <msgQ+0x1>
     9aa:	30 97       	sbiw	r30, 0x00	; 0
     9ac:	19 f1       	breq	.+70     	; 0x9f4 <schedule+0x62>
     9ae:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <threadPool>
     9b2:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <threadPool+0x1>
     9b6:	89 2b       	or	r24, r25
     9b8:	e9 f0       	breq	.+58     	; 0x9f4 <schedule+0x62>
     9ba:	20 97       	sbiw	r28, 0x00	; 0
     9bc:	69 f0       	breq	.+26     	; 0x9d8 <schedule+0x46>
     9be:	86 81       	ldd	r24, Z+6	; 0x06
     9c0:	97 81       	ldd	r25, Z+7	; 0x07
     9c2:	a0 85       	ldd	r26, Z+8	; 0x08
     9c4:	b1 85       	ldd	r27, Z+9	; 0x09
     9c6:	4e 81       	ldd	r20, Y+6	; 0x06
     9c8:	5f 81       	ldd	r21, Y+7	; 0x07
     9ca:	68 85       	ldd	r22, Y+8	; 0x08
     9cc:	79 85       	ldd	r23, Y+9	; 0x09
     9ce:	84 1b       	sub	r24, r20
     9d0:	95 0b       	sbc	r25, r21
     9d2:	a6 0b       	sbc	r26, r22
     9d4:	b7 0b       	sbc	r27, r23
     9d6:	72 f4       	brpl	.+28     	; 0x9f4 <schedule+0x62>
     9d8:	84 e0       	ldi	r24, 0x04	; 4
     9da:	91 e0       	ldi	r25, 0x01	; 1
     9dc:	0e 94 bf 04 	call	0x97e	; 0x97e <pop>
     9e0:	62 e0       	ldi	r22, 0x02	; 2
     9e2:	71 e0       	ldi	r23, 0x01	; 1
     9e4:	0e 94 b5 04 	call	0x96a	; 0x96a <push>
     9e8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <activeStack>
     9ec:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <activeStack+0x1>
     9f0:	0e 94 12 04 	call	0x824	; 0x824 <dispatch>
     9f4:	df 91       	pop	r29
     9f6:	cf 91       	pop	r28
     9f8:	08 95       	ret

000009fa <__vector_1>:
     9fa:	1f 92       	push	r1
     9fc:	0f 92       	push	r0
     9fe:	0f b6       	in	r0, 0x3f	; 63
     a00:	0f 92       	push	r0
     a02:	11 24       	eor	r1, r1
     a04:	0f 93       	push	r16
     a06:	1f 93       	push	r17
     a08:	2f 93       	push	r18
     a0a:	3f 93       	push	r19
     a0c:	4f 93       	push	r20
     a0e:	5f 93       	push	r21
     a10:	6f 93       	push	r22
     a12:	7f 93       	push	r23
     a14:	8f 93       	push	r24
     a16:	9f 93       	push	r25
     a18:	af 93       	push	r26
     a1a:	bf 93       	push	r27
     a1c:	ef 93       	push	r30
     a1e:	ff 93       	push	r31
     a20:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
     a24:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
     a28:	ac 01       	movw	r20, r24
     a2a:	09 2e       	mov	r0, r25
     a2c:	00 0c       	add	r0, r0
     a2e:	66 0b       	sbc	r22, r22
     a30:	77 0b       	sbc	r23, r23
     a32:	9a 01       	movw	r18, r20
     a34:	11 27       	eor	r17, r17
     a36:	00 27       	eor	r16, r16
     a38:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     a3c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     a40:	60 e0       	ldi	r22, 0x00	; 0
     a42:	70 e0       	ldi	r23, 0x00	; 0
     a44:	40 2b       	or	r20, r16
     a46:	51 2b       	or	r21, r17
     a48:	62 2b       	or	r22, r18
     a4a:	73 2b       	or	r23, r19
     a4c:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <timestamp>
     a50:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <timestamp+0x1>
     a54:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <timestamp+0x2>
     a58:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <timestamp+0x3>
     a5c:	b0 9b       	sbis	0x16, 0	; 22
     a5e:	1a c0       	rjmp	.+52     	; 0xa94 <__vector_1+0x9a>
     a60:	01 96       	adiw	r24, 0x01	; 1
     a62:	09 2e       	mov	r0, r25
     a64:	00 0c       	add	r0, r0
     a66:	aa 0b       	sbc	r26, r26
     a68:	bb 0b       	sbc	r27, r27
     a6a:	bc 01       	movw	r22, r24
     a6c:	55 27       	eor	r21, r21
     a6e:	44 27       	eor	r20, r20
     a70:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     a74:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     a78:	a0 e0       	ldi	r26, 0x00	; 0
     a7a:	b0 e0       	ldi	r27, 0x00	; 0
     a7c:	84 2b       	or	r24, r20
     a7e:	95 2b       	or	r25, r21
     a80:	a6 2b       	or	r26, r22
     a82:	b7 2b       	or	r27, r23
     a84:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
     a88:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
     a8c:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
     a90:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
     a94:	e0 91 be 01 	lds	r30, 0x01BE	; 0x8001be <mtable>
     a98:	f0 91 bf 01 	lds	r31, 0x01BF	; 0x8001bf <mtable+0x1>
     a9c:	30 97       	sbiw	r30, 0x00	; 0
     a9e:	39 f0       	breq	.+14     	; 0xaae <__vector_1+0xb4>
     aa0:	60 e0       	ldi	r22, 0x00	; 0
     aa2:	70 e0       	ldi	r23, 0x00	; 0
     aa4:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <otable>
     aa8:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <otable+0x1>
     aac:	09 95       	icall
     aae:	0e 94 c9 04 	call	0x992	; 0x992 <schedule>
     ab2:	ff 91       	pop	r31
     ab4:	ef 91       	pop	r30
     ab6:	bf 91       	pop	r27
     ab8:	af 91       	pop	r26
     aba:	9f 91       	pop	r25
     abc:	8f 91       	pop	r24
     abe:	7f 91       	pop	r23
     ac0:	6f 91       	pop	r22
     ac2:	5f 91       	pop	r21
     ac4:	4f 91       	pop	r20
     ac6:	3f 91       	pop	r19
     ac8:	2f 91       	pop	r18
     aca:	1f 91       	pop	r17
     acc:	0f 91       	pop	r16
     ace:	0f 90       	pop	r0
     ad0:	0f be       	out	0x3f, r0	; 63
     ad2:	0f 90       	pop	r0
     ad4:	1f 90       	pop	r1
     ad6:	18 95       	reti

00000ad8 <__vector_2>:
     ad8:	1f 92       	push	r1
     ada:	0f 92       	push	r0
     adc:	0f b6       	in	r0, 0x3f	; 63
     ade:	0f 92       	push	r0
     ae0:	11 24       	eor	r1, r1
     ae2:	0f 93       	push	r16
     ae4:	1f 93       	push	r17
     ae6:	2f 93       	push	r18
     ae8:	3f 93       	push	r19
     aea:	4f 93       	push	r20
     aec:	5f 93       	push	r21
     aee:	6f 93       	push	r22
     af0:	7f 93       	push	r23
     af2:	8f 93       	push	r24
     af4:	9f 93       	push	r25
     af6:	af 93       	push	r26
     af8:	bf 93       	push	r27
     afa:	ef 93       	push	r30
     afc:	ff 93       	push	r31
     afe:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
     b02:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
     b06:	ac 01       	movw	r20, r24
     b08:	09 2e       	mov	r0, r25
     b0a:	00 0c       	add	r0, r0
     b0c:	66 0b       	sbc	r22, r22
     b0e:	77 0b       	sbc	r23, r23
     b10:	9a 01       	movw	r18, r20
     b12:	11 27       	eor	r17, r17
     b14:	00 27       	eor	r16, r16
     b16:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     b1a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     b1e:	60 e0       	ldi	r22, 0x00	; 0
     b20:	70 e0       	ldi	r23, 0x00	; 0
     b22:	40 2b       	or	r20, r16
     b24:	51 2b       	or	r21, r17
     b26:	62 2b       	or	r22, r18
     b28:	73 2b       	or	r23, r19
     b2a:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <timestamp>
     b2e:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <timestamp+0x1>
     b32:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <timestamp+0x2>
     b36:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <timestamp+0x3>
     b3a:	b0 9b       	sbis	0x16, 0	; 22
     b3c:	1a c0       	rjmp	.+52     	; 0xb72 <__vector_2+0x9a>
     b3e:	01 96       	adiw	r24, 0x01	; 1
     b40:	09 2e       	mov	r0, r25
     b42:	00 0c       	add	r0, r0
     b44:	aa 0b       	sbc	r26, r26
     b46:	bb 0b       	sbc	r27, r27
     b48:	bc 01       	movw	r22, r24
     b4a:	55 27       	eor	r21, r21
     b4c:	44 27       	eor	r20, r20
     b4e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     b52:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	84 2b       	or	r24, r20
     b5c:	95 2b       	or	r25, r21
     b5e:	a6 2b       	or	r26, r22
     b60:	b7 2b       	or	r27, r23
     b62:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
     b66:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
     b6a:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
     b6e:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
     b72:	e0 91 c0 01 	lds	r30, 0x01C0	; 0x8001c0 <mtable+0x2>
     b76:	f0 91 c1 01 	lds	r31, 0x01C1	; 0x8001c1 <mtable+0x3>
     b7a:	30 97       	sbiw	r30, 0x00	; 0
     b7c:	39 f0       	breq	.+14     	; 0xb8c <__vector_2+0xb4>
     b7e:	61 e0       	ldi	r22, 0x01	; 1
     b80:	70 e0       	ldi	r23, 0x00	; 0
     b82:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <otable+0x2>
     b86:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <otable+0x3>
     b8a:	09 95       	icall
     b8c:	0e 94 c9 04 	call	0x992	; 0x992 <schedule>
     b90:	ff 91       	pop	r31
     b92:	ef 91       	pop	r30
     b94:	bf 91       	pop	r27
     b96:	af 91       	pop	r26
     b98:	9f 91       	pop	r25
     b9a:	8f 91       	pop	r24
     b9c:	7f 91       	pop	r23
     b9e:	6f 91       	pop	r22
     ba0:	5f 91       	pop	r21
     ba2:	4f 91       	pop	r20
     ba4:	3f 91       	pop	r19
     ba6:	2f 91       	pop	r18
     ba8:	1f 91       	pop	r17
     baa:	0f 91       	pop	r16
     bac:	0f 90       	pop	r0
     bae:	0f be       	out	0x3f, r0	; 63
     bb0:	0f 90       	pop	r0
     bb2:	1f 90       	pop	r1
     bb4:	18 95       	reti

00000bb6 <__vector_3>:
     bb6:	1f 92       	push	r1
     bb8:	0f 92       	push	r0
     bba:	0f b6       	in	r0, 0x3f	; 63
     bbc:	0f 92       	push	r0
     bbe:	11 24       	eor	r1, r1
     bc0:	0f 93       	push	r16
     bc2:	1f 93       	push	r17
     bc4:	2f 93       	push	r18
     bc6:	3f 93       	push	r19
     bc8:	4f 93       	push	r20
     bca:	5f 93       	push	r21
     bcc:	6f 93       	push	r22
     bce:	7f 93       	push	r23
     bd0:	8f 93       	push	r24
     bd2:	9f 93       	push	r25
     bd4:	af 93       	push	r26
     bd6:	bf 93       	push	r27
     bd8:	ef 93       	push	r30
     bda:	ff 93       	push	r31
     bdc:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
     be0:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
     be4:	ac 01       	movw	r20, r24
     be6:	09 2e       	mov	r0, r25
     be8:	00 0c       	add	r0, r0
     bea:	66 0b       	sbc	r22, r22
     bec:	77 0b       	sbc	r23, r23
     bee:	9a 01       	movw	r18, r20
     bf0:	11 27       	eor	r17, r17
     bf2:	00 27       	eor	r16, r16
     bf4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     bf8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     bfc:	60 e0       	ldi	r22, 0x00	; 0
     bfe:	70 e0       	ldi	r23, 0x00	; 0
     c00:	40 2b       	or	r20, r16
     c02:	51 2b       	or	r21, r17
     c04:	62 2b       	or	r22, r18
     c06:	73 2b       	or	r23, r19
     c08:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <timestamp>
     c0c:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <timestamp+0x1>
     c10:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <timestamp+0x2>
     c14:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <timestamp+0x3>
     c18:	b0 9b       	sbis	0x16, 0	; 22
     c1a:	1a c0       	rjmp	.+52     	; 0xc50 <__vector_3+0x9a>
     c1c:	01 96       	adiw	r24, 0x01	; 1
     c1e:	09 2e       	mov	r0, r25
     c20:	00 0c       	add	r0, r0
     c22:	aa 0b       	sbc	r26, r26
     c24:	bb 0b       	sbc	r27, r27
     c26:	bc 01       	movw	r22, r24
     c28:	55 27       	eor	r21, r21
     c2a:	44 27       	eor	r20, r20
     c2c:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     c30:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     c34:	a0 e0       	ldi	r26, 0x00	; 0
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	84 2b       	or	r24, r20
     c3a:	95 2b       	or	r25, r21
     c3c:	a6 2b       	or	r26, r22
     c3e:	b7 2b       	or	r27, r23
     c40:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
     c44:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
     c48:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
     c4c:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
     c50:	e0 91 c2 01 	lds	r30, 0x01C2	; 0x8001c2 <mtable+0x4>
     c54:	f0 91 c3 01 	lds	r31, 0x01C3	; 0x8001c3 <mtable+0x5>
     c58:	30 97       	sbiw	r30, 0x00	; 0
     c5a:	39 f0       	breq	.+14     	; 0xc6a <__vector_3+0xb4>
     c5c:	62 e0       	ldi	r22, 0x02	; 2
     c5e:	70 e0       	ldi	r23, 0x00	; 0
     c60:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <otable+0x4>
     c64:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <otable+0x5>
     c68:	09 95       	icall
     c6a:	0e 94 c9 04 	call	0x992	; 0x992 <schedule>
     c6e:	ff 91       	pop	r31
     c70:	ef 91       	pop	r30
     c72:	bf 91       	pop	r27
     c74:	af 91       	pop	r26
     c76:	9f 91       	pop	r25
     c78:	8f 91       	pop	r24
     c7a:	7f 91       	pop	r23
     c7c:	6f 91       	pop	r22
     c7e:	5f 91       	pop	r21
     c80:	4f 91       	pop	r20
     c82:	3f 91       	pop	r19
     c84:	2f 91       	pop	r18
     c86:	1f 91       	pop	r17
     c88:	0f 91       	pop	r16
     c8a:	0f 90       	pop	r0
     c8c:	0f be       	out	0x3f, r0	; 63
     c8e:	0f 90       	pop	r0
     c90:	1f 90       	pop	r1
     c92:	18 95       	reti

00000c94 <__vector_4>:
     c94:	1f 92       	push	r1
     c96:	0f 92       	push	r0
     c98:	0f b6       	in	r0, 0x3f	; 63
     c9a:	0f 92       	push	r0
     c9c:	11 24       	eor	r1, r1
     c9e:	0f 93       	push	r16
     ca0:	1f 93       	push	r17
     ca2:	2f 93       	push	r18
     ca4:	3f 93       	push	r19
     ca6:	4f 93       	push	r20
     ca8:	5f 93       	push	r21
     caa:	6f 93       	push	r22
     cac:	7f 93       	push	r23
     cae:	8f 93       	push	r24
     cb0:	9f 93       	push	r25
     cb2:	af 93       	push	r26
     cb4:	bf 93       	push	r27
     cb6:	ef 93       	push	r30
     cb8:	ff 93       	push	r31
     cba:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
     cbe:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
     cc2:	ac 01       	movw	r20, r24
     cc4:	09 2e       	mov	r0, r25
     cc6:	00 0c       	add	r0, r0
     cc8:	66 0b       	sbc	r22, r22
     cca:	77 0b       	sbc	r23, r23
     ccc:	9a 01       	movw	r18, r20
     cce:	11 27       	eor	r17, r17
     cd0:	00 27       	eor	r16, r16
     cd2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     cd6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     cda:	60 e0       	ldi	r22, 0x00	; 0
     cdc:	70 e0       	ldi	r23, 0x00	; 0
     cde:	40 2b       	or	r20, r16
     ce0:	51 2b       	or	r21, r17
     ce2:	62 2b       	or	r22, r18
     ce4:	73 2b       	or	r23, r19
     ce6:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <timestamp>
     cea:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <timestamp+0x1>
     cee:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <timestamp+0x2>
     cf2:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <timestamp+0x3>
     cf6:	b0 9b       	sbis	0x16, 0	; 22
     cf8:	1a c0       	rjmp	.+52     	; 0xd2e <__vector_4+0x9a>
     cfa:	01 96       	adiw	r24, 0x01	; 1
     cfc:	09 2e       	mov	r0, r25
     cfe:	00 0c       	add	r0, r0
     d00:	aa 0b       	sbc	r26, r26
     d02:	bb 0b       	sbc	r27, r27
     d04:	bc 01       	movw	r22, r24
     d06:	55 27       	eor	r21, r21
     d08:	44 27       	eor	r20, r20
     d0a:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     d0e:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     d12:	a0 e0       	ldi	r26, 0x00	; 0
     d14:	b0 e0       	ldi	r27, 0x00	; 0
     d16:	84 2b       	or	r24, r20
     d18:	95 2b       	or	r25, r21
     d1a:	a6 2b       	or	r26, r22
     d1c:	b7 2b       	or	r27, r23
     d1e:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
     d22:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
     d26:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
     d2a:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
     d2e:	e0 91 c4 01 	lds	r30, 0x01C4	; 0x8001c4 <mtable+0x6>
     d32:	f0 91 c5 01 	lds	r31, 0x01C5	; 0x8001c5 <mtable+0x7>
     d36:	30 97       	sbiw	r30, 0x00	; 0
     d38:	39 f0       	breq	.+14     	; 0xd48 <__vector_4+0xb4>
     d3a:	63 e0       	ldi	r22, 0x03	; 3
     d3c:	70 e0       	ldi	r23, 0x00	; 0
     d3e:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <otable+0x6>
     d42:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <otable+0x7>
     d46:	09 95       	icall
     d48:	0e 94 c9 04 	call	0x992	; 0x992 <schedule>
     d4c:	ff 91       	pop	r31
     d4e:	ef 91       	pop	r30
     d50:	bf 91       	pop	r27
     d52:	af 91       	pop	r26
     d54:	9f 91       	pop	r25
     d56:	8f 91       	pop	r24
     d58:	7f 91       	pop	r23
     d5a:	6f 91       	pop	r22
     d5c:	5f 91       	pop	r21
     d5e:	4f 91       	pop	r20
     d60:	3f 91       	pop	r19
     d62:	2f 91       	pop	r18
     d64:	1f 91       	pop	r17
     d66:	0f 91       	pop	r16
     d68:	0f 90       	pop	r0
     d6a:	0f be       	out	0x3f, r0	; 63
     d6c:	0f 90       	pop	r0
     d6e:	1f 90       	pop	r1
     d70:	18 95       	reti

00000d72 <__vector_5>:
     d72:	1f 92       	push	r1
     d74:	0f 92       	push	r0
     d76:	0f b6       	in	r0, 0x3f	; 63
     d78:	0f 92       	push	r0
     d7a:	11 24       	eor	r1, r1
     d7c:	0f 93       	push	r16
     d7e:	1f 93       	push	r17
     d80:	2f 93       	push	r18
     d82:	3f 93       	push	r19
     d84:	4f 93       	push	r20
     d86:	5f 93       	push	r21
     d88:	6f 93       	push	r22
     d8a:	7f 93       	push	r23
     d8c:	8f 93       	push	r24
     d8e:	9f 93       	push	r25
     d90:	af 93       	push	r26
     d92:	bf 93       	push	r27
     d94:	ef 93       	push	r30
     d96:	ff 93       	push	r31
     d98:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
     d9c:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
     da0:	ac 01       	movw	r20, r24
     da2:	09 2e       	mov	r0, r25
     da4:	00 0c       	add	r0, r0
     da6:	66 0b       	sbc	r22, r22
     da8:	77 0b       	sbc	r23, r23
     daa:	9a 01       	movw	r18, r20
     dac:	11 27       	eor	r17, r17
     dae:	00 27       	eor	r16, r16
     db0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     db4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     db8:	60 e0       	ldi	r22, 0x00	; 0
     dba:	70 e0       	ldi	r23, 0x00	; 0
     dbc:	40 2b       	or	r20, r16
     dbe:	51 2b       	or	r21, r17
     dc0:	62 2b       	or	r22, r18
     dc2:	73 2b       	or	r23, r19
     dc4:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <timestamp>
     dc8:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <timestamp+0x1>
     dcc:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <timestamp+0x2>
     dd0:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <timestamp+0x3>
     dd4:	b0 9b       	sbis	0x16, 0	; 22
     dd6:	1a c0       	rjmp	.+52     	; 0xe0c <__vector_5+0x9a>
     dd8:	01 96       	adiw	r24, 0x01	; 1
     dda:	09 2e       	mov	r0, r25
     ddc:	00 0c       	add	r0, r0
     dde:	aa 0b       	sbc	r26, r26
     de0:	bb 0b       	sbc	r27, r27
     de2:	bc 01       	movw	r22, r24
     de4:	55 27       	eor	r21, r21
     de6:	44 27       	eor	r20, r20
     de8:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     dec:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     df0:	a0 e0       	ldi	r26, 0x00	; 0
     df2:	b0 e0       	ldi	r27, 0x00	; 0
     df4:	84 2b       	or	r24, r20
     df6:	95 2b       	or	r25, r21
     df8:	a6 2b       	or	r26, r22
     dfa:	b7 2b       	or	r27, r23
     dfc:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
     e00:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
     e04:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
     e08:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
     e0c:	e0 91 c6 01 	lds	r30, 0x01C6	; 0x8001c6 <mtable+0x8>
     e10:	f0 91 c7 01 	lds	r31, 0x01C7	; 0x8001c7 <mtable+0x9>
     e14:	30 97       	sbiw	r30, 0x00	; 0
     e16:	39 f0       	breq	.+14     	; 0xe26 <__vector_5+0xb4>
     e18:	64 e0       	ldi	r22, 0x04	; 4
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <otable+0x8>
     e20:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <otable+0x9>
     e24:	09 95       	icall
     e26:	0e 94 c9 04 	call	0x992	; 0x992 <schedule>
     e2a:	ff 91       	pop	r31
     e2c:	ef 91       	pop	r30
     e2e:	bf 91       	pop	r27
     e30:	af 91       	pop	r26
     e32:	9f 91       	pop	r25
     e34:	8f 91       	pop	r24
     e36:	7f 91       	pop	r23
     e38:	6f 91       	pop	r22
     e3a:	5f 91       	pop	r21
     e3c:	4f 91       	pop	r20
     e3e:	3f 91       	pop	r19
     e40:	2f 91       	pop	r18
     e42:	1f 91       	pop	r17
     e44:	0f 91       	pop	r16
     e46:	0f 90       	pop	r0
     e48:	0f be       	out	0x3f, r0	; 63
     e4a:	0f 90       	pop	r0
     e4c:	1f 90       	pop	r1
     e4e:	18 95       	reti

00000e50 <__vector_10>:
     e50:	1f 92       	push	r1
     e52:	0f 92       	push	r0
     e54:	0f b6       	in	r0, 0x3f	; 63
     e56:	0f 92       	push	r0
     e58:	11 24       	eor	r1, r1
     e5a:	0f 93       	push	r16
     e5c:	1f 93       	push	r17
     e5e:	2f 93       	push	r18
     e60:	3f 93       	push	r19
     e62:	4f 93       	push	r20
     e64:	5f 93       	push	r21
     e66:	6f 93       	push	r22
     e68:	7f 93       	push	r23
     e6a:	8f 93       	push	r24
     e6c:	9f 93       	push	r25
     e6e:	af 93       	push	r26
     e70:	bf 93       	push	r27
     e72:	ef 93       	push	r30
     e74:	ff 93       	push	r31
     e76:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
     e7a:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
     e7e:	ac 01       	movw	r20, r24
     e80:	09 2e       	mov	r0, r25
     e82:	00 0c       	add	r0, r0
     e84:	66 0b       	sbc	r22, r22
     e86:	77 0b       	sbc	r23, r23
     e88:	9a 01       	movw	r18, r20
     e8a:	11 27       	eor	r17, r17
     e8c:	00 27       	eor	r16, r16
     e8e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e92:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e96:	60 e0       	ldi	r22, 0x00	; 0
     e98:	70 e0       	ldi	r23, 0x00	; 0
     e9a:	40 2b       	or	r20, r16
     e9c:	51 2b       	or	r21, r17
     e9e:	62 2b       	or	r22, r18
     ea0:	73 2b       	or	r23, r19
     ea2:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <timestamp>
     ea6:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <timestamp+0x1>
     eaa:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <timestamp+0x2>
     eae:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <timestamp+0x3>
     eb2:	b0 9b       	sbis	0x16, 0	; 22
     eb4:	1a c0       	rjmp	.+52     	; 0xeea <__vector_10+0x9a>
     eb6:	01 96       	adiw	r24, 0x01	; 1
     eb8:	09 2e       	mov	r0, r25
     eba:	00 0c       	add	r0, r0
     ebc:	aa 0b       	sbc	r26, r26
     ebe:	bb 0b       	sbc	r27, r27
     ec0:	bc 01       	movw	r22, r24
     ec2:	55 27       	eor	r21, r21
     ec4:	44 27       	eor	r20, r20
     ec6:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     eca:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     ece:	a0 e0       	ldi	r26, 0x00	; 0
     ed0:	b0 e0       	ldi	r27, 0x00	; 0
     ed2:	84 2b       	or	r24, r20
     ed4:	95 2b       	or	r25, r21
     ed6:	a6 2b       	or	r26, r22
     ed8:	b7 2b       	or	r27, r23
     eda:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
     ede:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
     ee2:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
     ee6:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
     eea:	e0 91 c8 01 	lds	r30, 0x01C8	; 0x8001c8 <mtable+0xa>
     eee:	f0 91 c9 01 	lds	r31, 0x01C9	; 0x8001c9 <mtable+0xb>
     ef2:	30 97       	sbiw	r30, 0x00	; 0
     ef4:	39 f0       	breq	.+14     	; 0xf04 <__vector_10+0xb4>
     ef6:	65 e0       	ldi	r22, 0x05	; 5
     ef8:	70 e0       	ldi	r23, 0x00	; 0
     efa:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <otable+0xa>
     efe:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <otable+0xb>
     f02:	09 95       	icall
     f04:	0e 94 c9 04 	call	0x992	; 0x992 <schedule>
     f08:	ff 91       	pop	r31
     f0a:	ef 91       	pop	r30
     f0c:	bf 91       	pop	r27
     f0e:	af 91       	pop	r26
     f10:	9f 91       	pop	r25
     f12:	8f 91       	pop	r24
     f14:	7f 91       	pop	r23
     f16:	6f 91       	pop	r22
     f18:	5f 91       	pop	r21
     f1a:	4f 91       	pop	r20
     f1c:	3f 91       	pop	r19
     f1e:	2f 91       	pop	r18
     f20:	1f 91       	pop	r17
     f22:	0f 91       	pop	r16
     f24:	0f 90       	pop	r0
     f26:	0f be       	out	0x3f, r0	; 63
     f28:	0f 90       	pop	r0
     f2a:	1f 90       	pop	r1
     f2c:	18 95       	reti

00000f2e <__vector_11>:
     f2e:	1f 92       	push	r1
     f30:	0f 92       	push	r0
     f32:	0f b6       	in	r0, 0x3f	; 63
     f34:	0f 92       	push	r0
     f36:	11 24       	eor	r1, r1
     f38:	0f 93       	push	r16
     f3a:	1f 93       	push	r17
     f3c:	2f 93       	push	r18
     f3e:	3f 93       	push	r19
     f40:	4f 93       	push	r20
     f42:	5f 93       	push	r21
     f44:	6f 93       	push	r22
     f46:	7f 93       	push	r23
     f48:	8f 93       	push	r24
     f4a:	9f 93       	push	r25
     f4c:	af 93       	push	r26
     f4e:	bf 93       	push	r27
     f50:	ef 93       	push	r30
     f52:	ff 93       	push	r31
     f54:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
     f58:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
     f5c:	ac 01       	movw	r20, r24
     f5e:	09 2e       	mov	r0, r25
     f60:	00 0c       	add	r0, r0
     f62:	66 0b       	sbc	r22, r22
     f64:	77 0b       	sbc	r23, r23
     f66:	9a 01       	movw	r18, r20
     f68:	11 27       	eor	r17, r17
     f6a:	00 27       	eor	r16, r16
     f6c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f70:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f74:	60 e0       	ldi	r22, 0x00	; 0
     f76:	70 e0       	ldi	r23, 0x00	; 0
     f78:	40 2b       	or	r20, r16
     f7a:	51 2b       	or	r21, r17
     f7c:	62 2b       	or	r22, r18
     f7e:	73 2b       	or	r23, r19
     f80:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <timestamp>
     f84:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <timestamp+0x1>
     f88:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <timestamp+0x2>
     f8c:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <timestamp+0x3>
     f90:	b0 9b       	sbis	0x16, 0	; 22
     f92:	1a c0       	rjmp	.+52     	; 0xfc8 <__vector_11+0x9a>
     f94:	01 96       	adiw	r24, 0x01	; 1
     f96:	09 2e       	mov	r0, r25
     f98:	00 0c       	add	r0, r0
     f9a:	aa 0b       	sbc	r26, r26
     f9c:	bb 0b       	sbc	r27, r27
     f9e:	bc 01       	movw	r22, r24
     fa0:	55 27       	eor	r21, r21
     fa2:	44 27       	eor	r20, r20
     fa4:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     fa8:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     fac:	a0 e0       	ldi	r26, 0x00	; 0
     fae:	b0 e0       	ldi	r27, 0x00	; 0
     fb0:	84 2b       	or	r24, r20
     fb2:	95 2b       	or	r25, r21
     fb4:	a6 2b       	or	r26, r22
     fb6:	b7 2b       	or	r27, r23
     fb8:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
     fbc:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
     fc0:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
     fc4:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
     fc8:	e0 91 ca 01 	lds	r30, 0x01CA	; 0x8001ca <mtable+0xc>
     fcc:	f0 91 cb 01 	lds	r31, 0x01CB	; 0x8001cb <mtable+0xd>
     fd0:	30 97       	sbiw	r30, 0x00	; 0
     fd2:	39 f0       	breq	.+14     	; 0xfe2 <__vector_11+0xb4>
     fd4:	66 e0       	ldi	r22, 0x06	; 6
     fd6:	70 e0       	ldi	r23, 0x00	; 0
     fd8:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <otable+0xc>
     fdc:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <otable+0xd>
     fe0:	09 95       	icall
     fe2:	0e 94 c9 04 	call	0x992	; 0x992 <schedule>
     fe6:	ff 91       	pop	r31
     fe8:	ef 91       	pop	r30
     fea:	bf 91       	pop	r27
     fec:	af 91       	pop	r26
     fee:	9f 91       	pop	r25
     ff0:	8f 91       	pop	r24
     ff2:	7f 91       	pop	r23
     ff4:	6f 91       	pop	r22
     ff6:	5f 91       	pop	r21
     ff8:	4f 91       	pop	r20
     ffa:	3f 91       	pop	r19
     ffc:	2f 91       	pop	r18
     ffe:	1f 91       	pop	r17
    1000:	0f 91       	pop	r16
    1002:	0f 90       	pop	r0
    1004:	0f be       	out	0x3f, r0	; 63
    1006:	0f 90       	pop	r0
    1008:	1f 90       	pop	r1
    100a:	18 95       	reti

0000100c <__vector_12>:
    100c:	1f 92       	push	r1
    100e:	0f 92       	push	r0
    1010:	0f b6       	in	r0, 0x3f	; 63
    1012:	0f 92       	push	r0
    1014:	11 24       	eor	r1, r1
    1016:	0f 93       	push	r16
    1018:	1f 93       	push	r17
    101a:	2f 93       	push	r18
    101c:	3f 93       	push	r19
    101e:	4f 93       	push	r20
    1020:	5f 93       	push	r21
    1022:	6f 93       	push	r22
    1024:	7f 93       	push	r23
    1026:	8f 93       	push	r24
    1028:	9f 93       	push	r25
    102a:	af 93       	push	r26
    102c:	bf 93       	push	r27
    102e:	ef 93       	push	r30
    1030:	ff 93       	push	r31
    1032:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
    1036:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
    103a:	ac 01       	movw	r20, r24
    103c:	09 2e       	mov	r0, r25
    103e:	00 0c       	add	r0, r0
    1040:	66 0b       	sbc	r22, r22
    1042:	77 0b       	sbc	r23, r23
    1044:	9a 01       	movw	r18, r20
    1046:	11 27       	eor	r17, r17
    1048:	00 27       	eor	r16, r16
    104a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    104e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1052:	60 e0       	ldi	r22, 0x00	; 0
    1054:	70 e0       	ldi	r23, 0x00	; 0
    1056:	40 2b       	or	r20, r16
    1058:	51 2b       	or	r21, r17
    105a:	62 2b       	or	r22, r18
    105c:	73 2b       	or	r23, r19
    105e:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <timestamp>
    1062:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <timestamp+0x1>
    1066:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <timestamp+0x2>
    106a:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <timestamp+0x3>
    106e:	b0 9b       	sbis	0x16, 0	; 22
    1070:	1a c0       	rjmp	.+52     	; 0x10a6 <__vector_12+0x9a>
    1072:	01 96       	adiw	r24, 0x01	; 1
    1074:	09 2e       	mov	r0, r25
    1076:	00 0c       	add	r0, r0
    1078:	aa 0b       	sbc	r26, r26
    107a:	bb 0b       	sbc	r27, r27
    107c:	bc 01       	movw	r22, r24
    107e:	55 27       	eor	r21, r21
    1080:	44 27       	eor	r20, r20
    1082:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1086:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    108a:	a0 e0       	ldi	r26, 0x00	; 0
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	84 2b       	or	r24, r20
    1090:	95 2b       	or	r25, r21
    1092:	a6 2b       	or	r26, r22
    1094:	b7 2b       	or	r27, r23
    1096:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    109a:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    109e:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    10a2:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    10a6:	e0 91 cc 01 	lds	r30, 0x01CC	; 0x8001cc <mtable+0xe>
    10aa:	f0 91 cd 01 	lds	r31, 0x01CD	; 0x8001cd <mtable+0xf>
    10ae:	30 97       	sbiw	r30, 0x00	; 0
    10b0:	39 f0       	breq	.+14     	; 0x10c0 <__vector_12+0xb4>
    10b2:	67 e0       	ldi	r22, 0x07	; 7
    10b4:	70 e0       	ldi	r23, 0x00	; 0
    10b6:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <otable+0xe>
    10ba:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <otable+0xf>
    10be:	09 95       	icall
    10c0:	0e 94 c9 04 	call	0x992	; 0x992 <schedule>
    10c4:	ff 91       	pop	r31
    10c6:	ef 91       	pop	r30
    10c8:	bf 91       	pop	r27
    10ca:	af 91       	pop	r26
    10cc:	9f 91       	pop	r25
    10ce:	8f 91       	pop	r24
    10d0:	7f 91       	pop	r23
    10d2:	6f 91       	pop	r22
    10d4:	5f 91       	pop	r21
    10d6:	4f 91       	pop	r20
    10d8:	3f 91       	pop	r19
    10da:	2f 91       	pop	r18
    10dc:	1f 91       	pop	r17
    10de:	0f 91       	pop	r16
    10e0:	0f 90       	pop	r0
    10e2:	0f be       	out	0x3f, r0	; 63
    10e4:	0f 90       	pop	r0
    10e6:	1f 90       	pop	r1
    10e8:	18 95       	reti

000010ea <__vector_13>:
    10ea:	1f 92       	push	r1
    10ec:	0f 92       	push	r0
    10ee:	0f b6       	in	r0, 0x3f	; 63
    10f0:	0f 92       	push	r0
    10f2:	11 24       	eor	r1, r1
    10f4:	0f 93       	push	r16
    10f6:	1f 93       	push	r17
    10f8:	2f 93       	push	r18
    10fa:	3f 93       	push	r19
    10fc:	4f 93       	push	r20
    10fe:	5f 93       	push	r21
    1100:	6f 93       	push	r22
    1102:	7f 93       	push	r23
    1104:	8f 93       	push	r24
    1106:	9f 93       	push	r25
    1108:	af 93       	push	r26
    110a:	bf 93       	push	r27
    110c:	ef 93       	push	r30
    110e:	ff 93       	push	r31
    1110:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
    1114:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
    1118:	ac 01       	movw	r20, r24
    111a:	09 2e       	mov	r0, r25
    111c:	00 0c       	add	r0, r0
    111e:	66 0b       	sbc	r22, r22
    1120:	77 0b       	sbc	r23, r23
    1122:	9a 01       	movw	r18, r20
    1124:	11 27       	eor	r17, r17
    1126:	00 27       	eor	r16, r16
    1128:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    112c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1130:	60 e0       	ldi	r22, 0x00	; 0
    1132:	70 e0       	ldi	r23, 0x00	; 0
    1134:	40 2b       	or	r20, r16
    1136:	51 2b       	or	r21, r17
    1138:	62 2b       	or	r22, r18
    113a:	73 2b       	or	r23, r19
    113c:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <timestamp>
    1140:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <timestamp+0x1>
    1144:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <timestamp+0x2>
    1148:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <timestamp+0x3>
    114c:	b0 9b       	sbis	0x16, 0	; 22
    114e:	1a c0       	rjmp	.+52     	; 0x1184 <__vector_13+0x9a>
    1150:	01 96       	adiw	r24, 0x01	; 1
    1152:	09 2e       	mov	r0, r25
    1154:	00 0c       	add	r0, r0
    1156:	aa 0b       	sbc	r26, r26
    1158:	bb 0b       	sbc	r27, r27
    115a:	bc 01       	movw	r22, r24
    115c:	55 27       	eor	r21, r21
    115e:	44 27       	eor	r20, r20
    1160:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1164:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1168:	a0 e0       	ldi	r26, 0x00	; 0
    116a:	b0 e0       	ldi	r27, 0x00	; 0
    116c:	84 2b       	or	r24, r20
    116e:	95 2b       	or	r25, r21
    1170:	a6 2b       	or	r26, r22
    1172:	b7 2b       	or	r27, r23
    1174:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    1178:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    117c:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    1180:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    1184:	e0 91 ce 01 	lds	r30, 0x01CE	; 0x8001ce <mtable+0x10>
    1188:	f0 91 cf 01 	lds	r31, 0x01CF	; 0x8001cf <mtable+0x11>
    118c:	30 97       	sbiw	r30, 0x00	; 0
    118e:	39 f0       	breq	.+14     	; 0x119e <__vector_13+0xb4>
    1190:	68 e0       	ldi	r22, 0x08	; 8
    1192:	70 e0       	ldi	r23, 0x00	; 0
    1194:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <otable+0x10>
    1198:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <otable+0x11>
    119c:	09 95       	icall
    119e:	0e 94 c9 04 	call	0x992	; 0x992 <schedule>
    11a2:	ff 91       	pop	r31
    11a4:	ef 91       	pop	r30
    11a6:	bf 91       	pop	r27
    11a8:	af 91       	pop	r26
    11aa:	9f 91       	pop	r25
    11ac:	8f 91       	pop	r24
    11ae:	7f 91       	pop	r23
    11b0:	6f 91       	pop	r22
    11b2:	5f 91       	pop	r21
    11b4:	4f 91       	pop	r20
    11b6:	3f 91       	pop	r19
    11b8:	2f 91       	pop	r18
    11ba:	1f 91       	pop	r17
    11bc:	0f 91       	pop	r16
    11be:	0f 90       	pop	r0
    11c0:	0f be       	out	0x3f, r0	; 63
    11c2:	0f 90       	pop	r0
    11c4:	1f 90       	pop	r1
    11c6:	18 95       	reti

000011c8 <__vector_14>:
    11c8:	1f 92       	push	r1
    11ca:	0f 92       	push	r0
    11cc:	0f b6       	in	r0, 0x3f	; 63
    11ce:	0f 92       	push	r0
    11d0:	11 24       	eor	r1, r1
    11d2:	0f 93       	push	r16
    11d4:	1f 93       	push	r17
    11d6:	2f 93       	push	r18
    11d8:	3f 93       	push	r19
    11da:	4f 93       	push	r20
    11dc:	5f 93       	push	r21
    11de:	6f 93       	push	r22
    11e0:	7f 93       	push	r23
    11e2:	8f 93       	push	r24
    11e4:	9f 93       	push	r25
    11e6:	af 93       	push	r26
    11e8:	bf 93       	push	r27
    11ea:	ef 93       	push	r30
    11ec:	ff 93       	push	r31
    11ee:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
    11f2:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
    11f6:	ac 01       	movw	r20, r24
    11f8:	09 2e       	mov	r0, r25
    11fa:	00 0c       	add	r0, r0
    11fc:	66 0b       	sbc	r22, r22
    11fe:	77 0b       	sbc	r23, r23
    1200:	9a 01       	movw	r18, r20
    1202:	11 27       	eor	r17, r17
    1204:	00 27       	eor	r16, r16
    1206:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    120a:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    120e:	60 e0       	ldi	r22, 0x00	; 0
    1210:	70 e0       	ldi	r23, 0x00	; 0
    1212:	40 2b       	or	r20, r16
    1214:	51 2b       	or	r21, r17
    1216:	62 2b       	or	r22, r18
    1218:	73 2b       	or	r23, r19
    121a:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <timestamp>
    121e:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <timestamp+0x1>
    1222:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <timestamp+0x2>
    1226:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <timestamp+0x3>
    122a:	b0 9b       	sbis	0x16, 0	; 22
    122c:	1a c0       	rjmp	.+52     	; 0x1262 <__vector_14+0x9a>
    122e:	01 96       	adiw	r24, 0x01	; 1
    1230:	09 2e       	mov	r0, r25
    1232:	00 0c       	add	r0, r0
    1234:	aa 0b       	sbc	r26, r26
    1236:	bb 0b       	sbc	r27, r27
    1238:	bc 01       	movw	r22, r24
    123a:	55 27       	eor	r21, r21
    123c:	44 27       	eor	r20, r20
    123e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1242:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1246:	a0 e0       	ldi	r26, 0x00	; 0
    1248:	b0 e0       	ldi	r27, 0x00	; 0
    124a:	84 2b       	or	r24, r20
    124c:	95 2b       	or	r25, r21
    124e:	a6 2b       	or	r26, r22
    1250:	b7 2b       	or	r27, r23
    1252:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    1256:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    125a:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    125e:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    1262:	e0 91 d0 01 	lds	r30, 0x01D0	; 0x8001d0 <mtable+0x12>
    1266:	f0 91 d1 01 	lds	r31, 0x01D1	; 0x8001d1 <mtable+0x13>
    126a:	30 97       	sbiw	r30, 0x00	; 0
    126c:	39 f0       	breq	.+14     	; 0x127c <__vector_14+0xb4>
    126e:	69 e0       	ldi	r22, 0x09	; 9
    1270:	70 e0       	ldi	r23, 0x00	; 0
    1272:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <otable+0x12>
    1276:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <otable+0x13>
    127a:	09 95       	icall
    127c:	0e 94 c9 04 	call	0x992	; 0x992 <schedule>
    1280:	ff 91       	pop	r31
    1282:	ef 91       	pop	r30
    1284:	bf 91       	pop	r27
    1286:	af 91       	pop	r26
    1288:	9f 91       	pop	r25
    128a:	8f 91       	pop	r24
    128c:	7f 91       	pop	r23
    128e:	6f 91       	pop	r22
    1290:	5f 91       	pop	r21
    1292:	4f 91       	pop	r20
    1294:	3f 91       	pop	r19
    1296:	2f 91       	pop	r18
    1298:	1f 91       	pop	r17
    129a:	0f 91       	pop	r16
    129c:	0f 90       	pop	r0
    129e:	0f be       	out	0x3f, r0	; 63
    12a0:	0f 90       	pop	r0
    12a2:	1f 90       	pop	r1
    12a4:	18 95       	reti

000012a6 <__vector_15>:
    12a6:	1f 92       	push	r1
    12a8:	0f 92       	push	r0
    12aa:	0f b6       	in	r0, 0x3f	; 63
    12ac:	0f 92       	push	r0
    12ae:	11 24       	eor	r1, r1
    12b0:	0f 93       	push	r16
    12b2:	1f 93       	push	r17
    12b4:	2f 93       	push	r18
    12b6:	3f 93       	push	r19
    12b8:	4f 93       	push	r20
    12ba:	5f 93       	push	r21
    12bc:	6f 93       	push	r22
    12be:	7f 93       	push	r23
    12c0:	8f 93       	push	r24
    12c2:	9f 93       	push	r25
    12c4:	af 93       	push	r26
    12c6:	bf 93       	push	r27
    12c8:	ef 93       	push	r30
    12ca:	ff 93       	push	r31
    12cc:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
    12d0:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
    12d4:	ac 01       	movw	r20, r24
    12d6:	09 2e       	mov	r0, r25
    12d8:	00 0c       	add	r0, r0
    12da:	66 0b       	sbc	r22, r22
    12dc:	77 0b       	sbc	r23, r23
    12de:	9a 01       	movw	r18, r20
    12e0:	11 27       	eor	r17, r17
    12e2:	00 27       	eor	r16, r16
    12e4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    12e8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    12ec:	60 e0       	ldi	r22, 0x00	; 0
    12ee:	70 e0       	ldi	r23, 0x00	; 0
    12f0:	40 2b       	or	r20, r16
    12f2:	51 2b       	or	r21, r17
    12f4:	62 2b       	or	r22, r18
    12f6:	73 2b       	or	r23, r19
    12f8:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <timestamp>
    12fc:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <timestamp+0x1>
    1300:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <timestamp+0x2>
    1304:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <timestamp+0x3>
    1308:	b0 9b       	sbis	0x16, 0	; 22
    130a:	1a c0       	rjmp	.+52     	; 0x1340 <__vector_15+0x9a>
    130c:	01 96       	adiw	r24, 0x01	; 1
    130e:	09 2e       	mov	r0, r25
    1310:	00 0c       	add	r0, r0
    1312:	aa 0b       	sbc	r26, r26
    1314:	bb 0b       	sbc	r27, r27
    1316:	bc 01       	movw	r22, r24
    1318:	55 27       	eor	r21, r21
    131a:	44 27       	eor	r20, r20
    131c:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1320:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1324:	a0 e0       	ldi	r26, 0x00	; 0
    1326:	b0 e0       	ldi	r27, 0x00	; 0
    1328:	84 2b       	or	r24, r20
    132a:	95 2b       	or	r25, r21
    132c:	a6 2b       	or	r26, r22
    132e:	b7 2b       	or	r27, r23
    1330:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    1334:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    1338:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    133c:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    1340:	e0 91 d2 01 	lds	r30, 0x01D2	; 0x8001d2 <mtable+0x14>
    1344:	f0 91 d3 01 	lds	r31, 0x01D3	; 0x8001d3 <mtable+0x15>
    1348:	30 97       	sbiw	r30, 0x00	; 0
    134a:	39 f0       	breq	.+14     	; 0x135a <__vector_15+0xb4>
    134c:	6a e0       	ldi	r22, 0x0A	; 10
    134e:	70 e0       	ldi	r23, 0x00	; 0
    1350:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <otable+0x14>
    1354:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <otable+0x15>
    1358:	09 95       	icall
    135a:	0e 94 c9 04 	call	0x992	; 0x992 <schedule>
    135e:	ff 91       	pop	r31
    1360:	ef 91       	pop	r30
    1362:	bf 91       	pop	r27
    1364:	af 91       	pop	r26
    1366:	9f 91       	pop	r25
    1368:	8f 91       	pop	r24
    136a:	7f 91       	pop	r23
    136c:	6f 91       	pop	r22
    136e:	5f 91       	pop	r21
    1370:	4f 91       	pop	r20
    1372:	3f 91       	pop	r19
    1374:	2f 91       	pop	r18
    1376:	1f 91       	pop	r17
    1378:	0f 91       	pop	r16
    137a:	0f 90       	pop	r0
    137c:	0f be       	out	0x3f, r0	; 63
    137e:	0f 90       	pop	r0
    1380:	1f 90       	pop	r1
    1382:	18 95       	reti

00001384 <__vector_16>:
    1384:	1f 92       	push	r1
    1386:	0f 92       	push	r0
    1388:	0f b6       	in	r0, 0x3f	; 63
    138a:	0f 92       	push	r0
    138c:	11 24       	eor	r1, r1
    138e:	0f 93       	push	r16
    1390:	1f 93       	push	r17
    1392:	2f 93       	push	r18
    1394:	3f 93       	push	r19
    1396:	4f 93       	push	r20
    1398:	5f 93       	push	r21
    139a:	6f 93       	push	r22
    139c:	7f 93       	push	r23
    139e:	8f 93       	push	r24
    13a0:	9f 93       	push	r25
    13a2:	af 93       	push	r26
    13a4:	bf 93       	push	r27
    13a6:	ef 93       	push	r30
    13a8:	ff 93       	push	r31
    13aa:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
    13ae:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
    13b2:	ac 01       	movw	r20, r24
    13b4:	09 2e       	mov	r0, r25
    13b6:	00 0c       	add	r0, r0
    13b8:	66 0b       	sbc	r22, r22
    13ba:	77 0b       	sbc	r23, r23
    13bc:	9a 01       	movw	r18, r20
    13be:	11 27       	eor	r17, r17
    13c0:	00 27       	eor	r16, r16
    13c2:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    13c6:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    13ca:	60 e0       	ldi	r22, 0x00	; 0
    13cc:	70 e0       	ldi	r23, 0x00	; 0
    13ce:	40 2b       	or	r20, r16
    13d0:	51 2b       	or	r21, r17
    13d2:	62 2b       	or	r22, r18
    13d4:	73 2b       	or	r23, r19
    13d6:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <timestamp>
    13da:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <timestamp+0x1>
    13de:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <timestamp+0x2>
    13e2:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <timestamp+0x3>
    13e6:	b0 9b       	sbis	0x16, 0	; 22
    13e8:	1a c0       	rjmp	.+52     	; 0x141e <__vector_16+0x9a>
    13ea:	01 96       	adiw	r24, 0x01	; 1
    13ec:	09 2e       	mov	r0, r25
    13ee:	00 0c       	add	r0, r0
    13f0:	aa 0b       	sbc	r26, r26
    13f2:	bb 0b       	sbc	r27, r27
    13f4:	bc 01       	movw	r22, r24
    13f6:	55 27       	eor	r21, r21
    13f8:	44 27       	eor	r20, r20
    13fa:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    13fe:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1402:	a0 e0       	ldi	r26, 0x00	; 0
    1404:	b0 e0       	ldi	r27, 0x00	; 0
    1406:	84 2b       	or	r24, r20
    1408:	95 2b       	or	r25, r21
    140a:	a6 2b       	or	r26, r22
    140c:	b7 2b       	or	r27, r23
    140e:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    1412:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    1416:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    141a:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    141e:	e0 91 d4 01 	lds	r30, 0x01D4	; 0x8001d4 <mtable+0x16>
    1422:	f0 91 d5 01 	lds	r31, 0x01D5	; 0x8001d5 <mtable+0x17>
    1426:	30 97       	sbiw	r30, 0x00	; 0
    1428:	39 f0       	breq	.+14     	; 0x1438 <__vector_16+0xb4>
    142a:	6b e0       	ldi	r22, 0x0B	; 11
    142c:	70 e0       	ldi	r23, 0x00	; 0
    142e:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <otable+0x16>
    1432:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <otable+0x17>
    1436:	09 95       	icall
    1438:	0e 94 c9 04 	call	0x992	; 0x992 <schedule>
    143c:	ff 91       	pop	r31
    143e:	ef 91       	pop	r30
    1440:	bf 91       	pop	r27
    1442:	af 91       	pop	r26
    1444:	9f 91       	pop	r25
    1446:	8f 91       	pop	r24
    1448:	7f 91       	pop	r23
    144a:	6f 91       	pop	r22
    144c:	5f 91       	pop	r21
    144e:	4f 91       	pop	r20
    1450:	3f 91       	pop	r19
    1452:	2f 91       	pop	r18
    1454:	1f 91       	pop	r17
    1456:	0f 91       	pop	r16
    1458:	0f 90       	pop	r0
    145a:	0f be       	out	0x3f, r0	; 63
    145c:	0f 90       	pop	r0
    145e:	1f 90       	pop	r1
    1460:	18 95       	reti

00001462 <__vector_17>:
    1462:	1f 92       	push	r1
    1464:	0f 92       	push	r0
    1466:	0f b6       	in	r0, 0x3f	; 63
    1468:	0f 92       	push	r0
    146a:	11 24       	eor	r1, r1
    146c:	0f 93       	push	r16
    146e:	1f 93       	push	r17
    1470:	2f 93       	push	r18
    1472:	3f 93       	push	r19
    1474:	4f 93       	push	r20
    1476:	5f 93       	push	r21
    1478:	6f 93       	push	r22
    147a:	7f 93       	push	r23
    147c:	8f 93       	push	r24
    147e:	9f 93       	push	r25
    1480:	af 93       	push	r26
    1482:	bf 93       	push	r27
    1484:	ef 93       	push	r30
    1486:	ff 93       	push	r31
    1488:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
    148c:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
    1490:	ac 01       	movw	r20, r24
    1492:	09 2e       	mov	r0, r25
    1494:	00 0c       	add	r0, r0
    1496:	66 0b       	sbc	r22, r22
    1498:	77 0b       	sbc	r23, r23
    149a:	9a 01       	movw	r18, r20
    149c:	11 27       	eor	r17, r17
    149e:	00 27       	eor	r16, r16
    14a0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    14a4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    14a8:	60 e0       	ldi	r22, 0x00	; 0
    14aa:	70 e0       	ldi	r23, 0x00	; 0
    14ac:	40 2b       	or	r20, r16
    14ae:	51 2b       	or	r21, r17
    14b0:	62 2b       	or	r22, r18
    14b2:	73 2b       	or	r23, r19
    14b4:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <timestamp>
    14b8:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <timestamp+0x1>
    14bc:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <timestamp+0x2>
    14c0:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <timestamp+0x3>
    14c4:	b0 9b       	sbis	0x16, 0	; 22
    14c6:	1a c0       	rjmp	.+52     	; 0x14fc <__vector_17+0x9a>
    14c8:	01 96       	adiw	r24, 0x01	; 1
    14ca:	09 2e       	mov	r0, r25
    14cc:	00 0c       	add	r0, r0
    14ce:	aa 0b       	sbc	r26, r26
    14d0:	bb 0b       	sbc	r27, r27
    14d2:	bc 01       	movw	r22, r24
    14d4:	55 27       	eor	r21, r21
    14d6:	44 27       	eor	r20, r20
    14d8:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    14dc:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    14e0:	a0 e0       	ldi	r26, 0x00	; 0
    14e2:	b0 e0       	ldi	r27, 0x00	; 0
    14e4:	84 2b       	or	r24, r20
    14e6:	95 2b       	or	r25, r21
    14e8:	a6 2b       	or	r26, r22
    14ea:	b7 2b       	or	r27, r23
    14ec:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    14f0:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    14f4:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    14f8:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    14fc:	e0 91 d6 01 	lds	r30, 0x01D6	; 0x8001d6 <mtable+0x18>
    1500:	f0 91 d7 01 	lds	r31, 0x01D7	; 0x8001d7 <mtable+0x19>
    1504:	30 97       	sbiw	r30, 0x00	; 0
    1506:	39 f0       	breq	.+14     	; 0x1516 <__vector_17+0xb4>
    1508:	6c e0       	ldi	r22, 0x0C	; 12
    150a:	70 e0       	ldi	r23, 0x00	; 0
    150c:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <otable+0x18>
    1510:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <otable+0x19>
    1514:	09 95       	icall
    1516:	0e 94 c9 04 	call	0x992	; 0x992 <schedule>
    151a:	ff 91       	pop	r31
    151c:	ef 91       	pop	r30
    151e:	bf 91       	pop	r27
    1520:	af 91       	pop	r26
    1522:	9f 91       	pop	r25
    1524:	8f 91       	pop	r24
    1526:	7f 91       	pop	r23
    1528:	6f 91       	pop	r22
    152a:	5f 91       	pop	r21
    152c:	4f 91       	pop	r20
    152e:	3f 91       	pop	r19
    1530:	2f 91       	pop	r18
    1532:	1f 91       	pop	r17
    1534:	0f 91       	pop	r16
    1536:	0f 90       	pop	r0
    1538:	0f be       	out	0x3f, r0	; 63
    153a:	0f 90       	pop	r0
    153c:	1f 90       	pop	r1
    153e:	18 95       	reti

00001540 <__vector_18>:
    1540:	1f 92       	push	r1
    1542:	0f 92       	push	r0
    1544:	0f b6       	in	r0, 0x3f	; 63
    1546:	0f 92       	push	r0
    1548:	11 24       	eor	r1, r1
    154a:	0f 93       	push	r16
    154c:	1f 93       	push	r17
    154e:	2f 93       	push	r18
    1550:	3f 93       	push	r19
    1552:	4f 93       	push	r20
    1554:	5f 93       	push	r21
    1556:	6f 93       	push	r22
    1558:	7f 93       	push	r23
    155a:	8f 93       	push	r24
    155c:	9f 93       	push	r25
    155e:	af 93       	push	r26
    1560:	bf 93       	push	r27
    1562:	ef 93       	push	r30
    1564:	ff 93       	push	r31
    1566:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
    156a:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
    156e:	ac 01       	movw	r20, r24
    1570:	09 2e       	mov	r0, r25
    1572:	00 0c       	add	r0, r0
    1574:	66 0b       	sbc	r22, r22
    1576:	77 0b       	sbc	r23, r23
    1578:	9a 01       	movw	r18, r20
    157a:	11 27       	eor	r17, r17
    157c:	00 27       	eor	r16, r16
    157e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1582:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1586:	60 e0       	ldi	r22, 0x00	; 0
    1588:	70 e0       	ldi	r23, 0x00	; 0
    158a:	40 2b       	or	r20, r16
    158c:	51 2b       	or	r21, r17
    158e:	62 2b       	or	r22, r18
    1590:	73 2b       	or	r23, r19
    1592:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <timestamp>
    1596:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <timestamp+0x1>
    159a:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <timestamp+0x2>
    159e:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <timestamp+0x3>
    15a2:	b0 9b       	sbis	0x16, 0	; 22
    15a4:	1a c0       	rjmp	.+52     	; 0x15da <__vector_18+0x9a>
    15a6:	01 96       	adiw	r24, 0x01	; 1
    15a8:	09 2e       	mov	r0, r25
    15aa:	00 0c       	add	r0, r0
    15ac:	aa 0b       	sbc	r26, r26
    15ae:	bb 0b       	sbc	r27, r27
    15b0:	bc 01       	movw	r22, r24
    15b2:	55 27       	eor	r21, r21
    15b4:	44 27       	eor	r20, r20
    15b6:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    15ba:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    15be:	a0 e0       	ldi	r26, 0x00	; 0
    15c0:	b0 e0       	ldi	r27, 0x00	; 0
    15c2:	84 2b       	or	r24, r20
    15c4:	95 2b       	or	r25, r21
    15c6:	a6 2b       	or	r26, r22
    15c8:	b7 2b       	or	r27, r23
    15ca:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    15ce:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    15d2:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    15d6:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    15da:	e0 91 d8 01 	lds	r30, 0x01D8	; 0x8001d8 <mtable+0x1a>
    15de:	f0 91 d9 01 	lds	r31, 0x01D9	; 0x8001d9 <mtable+0x1b>
    15e2:	30 97       	sbiw	r30, 0x00	; 0
    15e4:	39 f0       	breq	.+14     	; 0x15f4 <__vector_18+0xb4>
    15e6:	6d e0       	ldi	r22, 0x0D	; 13
    15e8:	70 e0       	ldi	r23, 0x00	; 0
    15ea:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <otable+0x1a>
    15ee:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <otable+0x1b>
    15f2:	09 95       	icall
    15f4:	0e 94 c9 04 	call	0x992	; 0x992 <schedule>
    15f8:	ff 91       	pop	r31
    15fa:	ef 91       	pop	r30
    15fc:	bf 91       	pop	r27
    15fe:	af 91       	pop	r26
    1600:	9f 91       	pop	r25
    1602:	8f 91       	pop	r24
    1604:	7f 91       	pop	r23
    1606:	6f 91       	pop	r22
    1608:	5f 91       	pop	r21
    160a:	4f 91       	pop	r20
    160c:	3f 91       	pop	r19
    160e:	2f 91       	pop	r18
    1610:	1f 91       	pop	r17
    1612:	0f 91       	pop	r16
    1614:	0f 90       	pop	r0
    1616:	0f be       	out	0x3f, r0	; 63
    1618:	0f 90       	pop	r0
    161a:	1f 90       	pop	r1
    161c:	18 95       	reti

0000161e <__vector_19>:
    161e:	1f 92       	push	r1
    1620:	0f 92       	push	r0
    1622:	0f b6       	in	r0, 0x3f	; 63
    1624:	0f 92       	push	r0
    1626:	11 24       	eor	r1, r1
    1628:	0f 93       	push	r16
    162a:	1f 93       	push	r17
    162c:	2f 93       	push	r18
    162e:	3f 93       	push	r19
    1630:	4f 93       	push	r20
    1632:	5f 93       	push	r21
    1634:	6f 93       	push	r22
    1636:	7f 93       	push	r23
    1638:	8f 93       	push	r24
    163a:	9f 93       	push	r25
    163c:	af 93       	push	r26
    163e:	bf 93       	push	r27
    1640:	ef 93       	push	r30
    1642:	ff 93       	push	r31
    1644:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
    1648:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
    164c:	ac 01       	movw	r20, r24
    164e:	09 2e       	mov	r0, r25
    1650:	00 0c       	add	r0, r0
    1652:	66 0b       	sbc	r22, r22
    1654:	77 0b       	sbc	r23, r23
    1656:	9a 01       	movw	r18, r20
    1658:	11 27       	eor	r17, r17
    165a:	00 27       	eor	r16, r16
    165c:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1660:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1664:	60 e0       	ldi	r22, 0x00	; 0
    1666:	70 e0       	ldi	r23, 0x00	; 0
    1668:	40 2b       	or	r20, r16
    166a:	51 2b       	or	r21, r17
    166c:	62 2b       	or	r22, r18
    166e:	73 2b       	or	r23, r19
    1670:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <timestamp>
    1674:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <timestamp+0x1>
    1678:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <timestamp+0x2>
    167c:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <timestamp+0x3>
    1680:	b0 9b       	sbis	0x16, 0	; 22
    1682:	1a c0       	rjmp	.+52     	; 0x16b8 <__vector_19+0x9a>
    1684:	01 96       	adiw	r24, 0x01	; 1
    1686:	09 2e       	mov	r0, r25
    1688:	00 0c       	add	r0, r0
    168a:	aa 0b       	sbc	r26, r26
    168c:	bb 0b       	sbc	r27, r27
    168e:	bc 01       	movw	r22, r24
    1690:	55 27       	eor	r21, r21
    1692:	44 27       	eor	r20, r20
    1694:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1698:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    169c:	a0 e0       	ldi	r26, 0x00	; 0
    169e:	b0 e0       	ldi	r27, 0x00	; 0
    16a0:	84 2b       	or	r24, r20
    16a2:	95 2b       	or	r25, r21
    16a4:	a6 2b       	or	r26, r22
    16a6:	b7 2b       	or	r27, r23
    16a8:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    16ac:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    16b0:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    16b4:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    16b8:	e0 91 da 01 	lds	r30, 0x01DA	; 0x8001da <mtable+0x1c>
    16bc:	f0 91 db 01 	lds	r31, 0x01DB	; 0x8001db <mtable+0x1d>
    16c0:	30 97       	sbiw	r30, 0x00	; 0
    16c2:	39 f0       	breq	.+14     	; 0x16d2 <__vector_19+0xb4>
    16c4:	6e e0       	ldi	r22, 0x0E	; 14
    16c6:	70 e0       	ldi	r23, 0x00	; 0
    16c8:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <otable+0x1c>
    16cc:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <otable+0x1d>
    16d0:	09 95       	icall
    16d2:	0e 94 c9 04 	call	0x992	; 0x992 <schedule>
    16d6:	ff 91       	pop	r31
    16d8:	ef 91       	pop	r30
    16da:	bf 91       	pop	r27
    16dc:	af 91       	pop	r26
    16de:	9f 91       	pop	r25
    16e0:	8f 91       	pop	r24
    16e2:	7f 91       	pop	r23
    16e4:	6f 91       	pop	r22
    16e6:	5f 91       	pop	r21
    16e8:	4f 91       	pop	r20
    16ea:	3f 91       	pop	r19
    16ec:	2f 91       	pop	r18
    16ee:	1f 91       	pop	r17
    16f0:	0f 91       	pop	r16
    16f2:	0f 90       	pop	r0
    16f4:	0f be       	out	0x3f, r0	; 63
    16f6:	0f 90       	pop	r0
    16f8:	1f 90       	pop	r1
    16fa:	18 95       	reti

000016fc <__vector_20>:
    16fc:	1f 92       	push	r1
    16fe:	0f 92       	push	r0
    1700:	0f b6       	in	r0, 0x3f	; 63
    1702:	0f 92       	push	r0
    1704:	11 24       	eor	r1, r1
    1706:	0f 93       	push	r16
    1708:	1f 93       	push	r17
    170a:	2f 93       	push	r18
    170c:	3f 93       	push	r19
    170e:	4f 93       	push	r20
    1710:	5f 93       	push	r21
    1712:	6f 93       	push	r22
    1714:	7f 93       	push	r23
    1716:	8f 93       	push	r24
    1718:	9f 93       	push	r25
    171a:	af 93       	push	r26
    171c:	bf 93       	push	r27
    171e:	ef 93       	push	r30
    1720:	ff 93       	push	r31
    1722:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
    1726:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
    172a:	ac 01       	movw	r20, r24
    172c:	09 2e       	mov	r0, r25
    172e:	00 0c       	add	r0, r0
    1730:	66 0b       	sbc	r22, r22
    1732:	77 0b       	sbc	r23, r23
    1734:	9a 01       	movw	r18, r20
    1736:	11 27       	eor	r17, r17
    1738:	00 27       	eor	r16, r16
    173a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    173e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1742:	60 e0       	ldi	r22, 0x00	; 0
    1744:	70 e0       	ldi	r23, 0x00	; 0
    1746:	40 2b       	or	r20, r16
    1748:	51 2b       	or	r21, r17
    174a:	62 2b       	or	r22, r18
    174c:	73 2b       	or	r23, r19
    174e:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <timestamp>
    1752:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <timestamp+0x1>
    1756:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <timestamp+0x2>
    175a:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <timestamp+0x3>
    175e:	b0 9b       	sbis	0x16, 0	; 22
    1760:	1a c0       	rjmp	.+52     	; 0x1796 <__vector_20+0x9a>
    1762:	01 96       	adiw	r24, 0x01	; 1
    1764:	09 2e       	mov	r0, r25
    1766:	00 0c       	add	r0, r0
    1768:	aa 0b       	sbc	r26, r26
    176a:	bb 0b       	sbc	r27, r27
    176c:	bc 01       	movw	r22, r24
    176e:	55 27       	eor	r21, r21
    1770:	44 27       	eor	r20, r20
    1772:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1776:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    177a:	a0 e0       	ldi	r26, 0x00	; 0
    177c:	b0 e0       	ldi	r27, 0x00	; 0
    177e:	84 2b       	or	r24, r20
    1780:	95 2b       	or	r25, r21
    1782:	a6 2b       	or	r26, r22
    1784:	b7 2b       	or	r27, r23
    1786:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    178a:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    178e:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    1792:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    1796:	e0 91 dc 01 	lds	r30, 0x01DC	; 0x8001dc <mtable+0x1e>
    179a:	f0 91 dd 01 	lds	r31, 0x01DD	; 0x8001dd <mtable+0x1f>
    179e:	30 97       	sbiw	r30, 0x00	; 0
    17a0:	39 f0       	breq	.+14     	; 0x17b0 <__vector_20+0xb4>
    17a2:	6f e0       	ldi	r22, 0x0F	; 15
    17a4:	70 e0       	ldi	r23, 0x00	; 0
    17a6:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <otable+0x1e>
    17aa:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <otable+0x1f>
    17ae:	09 95       	icall
    17b0:	0e 94 c9 04 	call	0x992	; 0x992 <schedule>
    17b4:	ff 91       	pop	r31
    17b6:	ef 91       	pop	r30
    17b8:	bf 91       	pop	r27
    17ba:	af 91       	pop	r26
    17bc:	9f 91       	pop	r25
    17be:	8f 91       	pop	r24
    17c0:	7f 91       	pop	r23
    17c2:	6f 91       	pop	r22
    17c4:	5f 91       	pop	r21
    17c6:	4f 91       	pop	r20
    17c8:	3f 91       	pop	r19
    17ca:	2f 91       	pop	r18
    17cc:	1f 91       	pop	r17
    17ce:	0f 91       	pop	r16
    17d0:	0f 90       	pop	r0
    17d2:	0f be       	out	0x3f, r0	; 63
    17d4:	0f 90       	pop	r0
    17d6:	1f 90       	pop	r1
    17d8:	18 95       	reti

000017da <__vector_21>:
    17da:	1f 92       	push	r1
    17dc:	0f 92       	push	r0
    17de:	0f b6       	in	r0, 0x3f	; 63
    17e0:	0f 92       	push	r0
    17e2:	11 24       	eor	r1, r1
    17e4:	0f 93       	push	r16
    17e6:	1f 93       	push	r17
    17e8:	2f 93       	push	r18
    17ea:	3f 93       	push	r19
    17ec:	4f 93       	push	r20
    17ee:	5f 93       	push	r21
    17f0:	6f 93       	push	r22
    17f2:	7f 93       	push	r23
    17f4:	8f 93       	push	r24
    17f6:	9f 93       	push	r25
    17f8:	af 93       	push	r26
    17fa:	bf 93       	push	r27
    17fc:	ef 93       	push	r30
    17fe:	ff 93       	push	r31
    1800:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
    1804:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
    1808:	ac 01       	movw	r20, r24
    180a:	09 2e       	mov	r0, r25
    180c:	00 0c       	add	r0, r0
    180e:	66 0b       	sbc	r22, r22
    1810:	77 0b       	sbc	r23, r23
    1812:	9a 01       	movw	r18, r20
    1814:	11 27       	eor	r17, r17
    1816:	00 27       	eor	r16, r16
    1818:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    181c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1820:	60 e0       	ldi	r22, 0x00	; 0
    1822:	70 e0       	ldi	r23, 0x00	; 0
    1824:	40 2b       	or	r20, r16
    1826:	51 2b       	or	r21, r17
    1828:	62 2b       	or	r22, r18
    182a:	73 2b       	or	r23, r19
    182c:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <timestamp>
    1830:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <timestamp+0x1>
    1834:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <timestamp+0x2>
    1838:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <timestamp+0x3>
    183c:	b0 9b       	sbis	0x16, 0	; 22
    183e:	1a c0       	rjmp	.+52     	; 0x1874 <__vector_21+0x9a>
    1840:	01 96       	adiw	r24, 0x01	; 1
    1842:	09 2e       	mov	r0, r25
    1844:	00 0c       	add	r0, r0
    1846:	aa 0b       	sbc	r26, r26
    1848:	bb 0b       	sbc	r27, r27
    184a:	bc 01       	movw	r22, r24
    184c:	55 27       	eor	r21, r21
    184e:	44 27       	eor	r20, r20
    1850:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1854:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1858:	a0 e0       	ldi	r26, 0x00	; 0
    185a:	b0 e0       	ldi	r27, 0x00	; 0
    185c:	84 2b       	or	r24, r20
    185e:	95 2b       	or	r25, r21
    1860:	a6 2b       	or	r26, r22
    1862:	b7 2b       	or	r27, r23
    1864:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    1868:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    186c:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    1870:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    1874:	e0 91 de 01 	lds	r30, 0x01DE	; 0x8001de <mtable+0x20>
    1878:	f0 91 df 01 	lds	r31, 0x01DF	; 0x8001df <mtable+0x21>
    187c:	30 97       	sbiw	r30, 0x00	; 0
    187e:	39 f0       	breq	.+14     	; 0x188e <__vector_21+0xb4>
    1880:	60 e1       	ldi	r22, 0x10	; 16
    1882:	70 e0       	ldi	r23, 0x00	; 0
    1884:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <otable+0x20>
    1888:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <otable+0x21>
    188c:	09 95       	icall
    188e:	0e 94 c9 04 	call	0x992	; 0x992 <schedule>
    1892:	ff 91       	pop	r31
    1894:	ef 91       	pop	r30
    1896:	bf 91       	pop	r27
    1898:	af 91       	pop	r26
    189a:	9f 91       	pop	r25
    189c:	8f 91       	pop	r24
    189e:	7f 91       	pop	r23
    18a0:	6f 91       	pop	r22
    18a2:	5f 91       	pop	r21
    18a4:	4f 91       	pop	r20
    18a6:	3f 91       	pop	r19
    18a8:	2f 91       	pop	r18
    18aa:	1f 91       	pop	r17
    18ac:	0f 91       	pop	r16
    18ae:	0f 90       	pop	r0
    18b0:	0f be       	out	0x3f, r0	; 63
    18b2:	0f 90       	pop	r0
    18b4:	1f 90       	pop	r1
    18b6:	18 95       	reti

000018b8 <__vector_22>:
    18b8:	1f 92       	push	r1
    18ba:	0f 92       	push	r0
    18bc:	0f b6       	in	r0, 0x3f	; 63
    18be:	0f 92       	push	r0
    18c0:	11 24       	eor	r1, r1
    18c2:	0f 93       	push	r16
    18c4:	1f 93       	push	r17
    18c6:	2f 93       	push	r18
    18c8:	3f 93       	push	r19
    18ca:	4f 93       	push	r20
    18cc:	5f 93       	push	r21
    18ce:	6f 93       	push	r22
    18d0:	7f 93       	push	r23
    18d2:	8f 93       	push	r24
    18d4:	9f 93       	push	r25
    18d6:	af 93       	push	r26
    18d8:	bf 93       	push	r27
    18da:	ef 93       	push	r30
    18dc:	ff 93       	push	r31
    18de:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
    18e2:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
    18e6:	ac 01       	movw	r20, r24
    18e8:	09 2e       	mov	r0, r25
    18ea:	00 0c       	add	r0, r0
    18ec:	66 0b       	sbc	r22, r22
    18ee:	77 0b       	sbc	r23, r23
    18f0:	9a 01       	movw	r18, r20
    18f2:	11 27       	eor	r17, r17
    18f4:	00 27       	eor	r16, r16
    18f6:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    18fa:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    18fe:	60 e0       	ldi	r22, 0x00	; 0
    1900:	70 e0       	ldi	r23, 0x00	; 0
    1902:	40 2b       	or	r20, r16
    1904:	51 2b       	or	r21, r17
    1906:	62 2b       	or	r22, r18
    1908:	73 2b       	or	r23, r19
    190a:	40 93 1e 01 	sts	0x011E, r20	; 0x80011e <timestamp>
    190e:	50 93 1f 01 	sts	0x011F, r21	; 0x80011f <timestamp+0x1>
    1912:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <timestamp+0x2>
    1916:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <timestamp+0x3>
    191a:	b0 9b       	sbis	0x16, 0	; 22
    191c:	1a c0       	rjmp	.+52     	; 0x1952 <__vector_22+0x9a>
    191e:	01 96       	adiw	r24, 0x01	; 1
    1920:	09 2e       	mov	r0, r25
    1922:	00 0c       	add	r0, r0
    1924:	aa 0b       	sbc	r26, r26
    1926:	bb 0b       	sbc	r27, r27
    1928:	bc 01       	movw	r22, r24
    192a:	55 27       	eor	r21, r21
    192c:	44 27       	eor	r20, r20
    192e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1932:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1936:	a0 e0       	ldi	r26, 0x00	; 0
    1938:	b0 e0       	ldi	r27, 0x00	; 0
    193a:	84 2b       	or	r24, r20
    193c:	95 2b       	or	r25, r21
    193e:	a6 2b       	or	r26, r22
    1940:	b7 2b       	or	r27, r23
    1942:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <timestamp>
    1946:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <timestamp+0x1>
    194a:	a0 93 20 01 	sts	0x0120, r26	; 0x800120 <timestamp+0x2>
    194e:	b0 93 21 01 	sts	0x0121, r27	; 0x800121 <timestamp+0x3>
    1952:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <mtable+0x22>
    1956:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <mtable+0x23>
    195a:	30 97       	sbiw	r30, 0x00	; 0
    195c:	39 f0       	breq	.+14     	; 0x196c <__vector_22+0xb4>
    195e:	61 e1       	ldi	r22, 0x11	; 17
    1960:	70 e0       	ldi	r23, 0x00	; 0
    1962:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <otable+0x22>
    1966:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <otable+0x23>
    196a:	09 95       	icall
    196c:	0e 94 c9 04 	call	0x992	; 0x992 <schedule>
    1970:	ff 91       	pop	r31
    1972:	ef 91       	pop	r30
    1974:	bf 91       	pop	r27
    1976:	af 91       	pop	r26
    1978:	9f 91       	pop	r25
    197a:	8f 91       	pop	r24
    197c:	7f 91       	pop	r23
    197e:	6f 91       	pop	r22
    1980:	5f 91       	pop	r21
    1982:	4f 91       	pop	r20
    1984:	3f 91       	pop	r19
    1986:	2f 91       	pop	r18
    1988:	1f 91       	pop	r17
    198a:	0f 91       	pop	r16
    198c:	0f 90       	pop	r0
    198e:	0f be       	out	0x3f, r0	; 63
    1990:	0f 90       	pop	r0
    1992:	1f 90       	pop	r1
    1994:	18 95       	reti

00001996 <idle>:
    1996:	0e 94 c9 04 	call	0x992	; 0x992 <schedule>
    199a:	78 94       	sei
    199c:	81 e0       	ldi	r24, 0x01	; 1
    199e:	83 bf       	out	0x33, r24	; 51
    19a0:	88 95       	sleep
    19a2:	fc cf       	rjmp	.-8      	; 0x199c <idle+0x6>

000019a4 <__vector_9>:
    19a4:	1f 92       	push	r1
    19a6:	0f 92       	push	r0
    19a8:	0f b6       	in	r0, 0x3f	; 63
    19aa:	0f 92       	push	r0
    19ac:	11 24       	eor	r1, r1
    19ae:	2f 93       	push	r18
    19b0:	3f 93       	push	r19
    19b2:	4f 93       	push	r20
    19b4:	5f 93       	push	r21
    19b6:	6f 93       	push	r22
    19b8:	7f 93       	push	r23
    19ba:	8f 93       	push	r24
    19bc:	9f 93       	push	r25
    19be:	ef 93       	push	r30
    19c0:	ff 93       	push	r31
    19c2:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
    19c6:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
    19ca:	01 96       	adiw	r24, 0x01	; 1
    19cc:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <__data_end+0x1>
    19d0:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>
    19d4:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <timerQ>
    19d8:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <timerQ+0x1>
    19dc:	30 97       	sbiw	r30, 0x00	; 0
    19de:	01 f1       	breq	.+64     	; 0x1a20 <__vector_9+0x7c>
    19e0:	42 81       	ldd	r20, Z+2	; 0x02
    19e2:	53 81       	ldd	r21, Z+3	; 0x03
    19e4:	64 81       	ldd	r22, Z+4	; 0x04
    19e6:	75 81       	ldd	r23, Z+5	; 0x05
    19e8:	86 17       	cp	r24, r22
    19ea:	97 07       	cpc	r25, r23
    19ec:	c9 f4       	brne	.+50     	; 0x1a20 <__vector_9+0x7c>
    19ee:	ca 01       	movw	r24, r20
    19f0:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    19f4:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    19f8:	42 1b       	sub	r20, r18
    19fa:	53 0b       	sbc	r21, r19
    19fc:	41 30       	cpi	r20, 0x01	; 1
    19fe:	51 05       	cpc	r21, r1
    1a00:	29 f4       	brne	.+10     	; 0x1a0c <__vector_9+0x68>
    1a02:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1a06:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1a0a:	01 96       	adiw	r24, 0x01	; 1
    1a0c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1a10:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1a14:	ef e6       	ldi	r30, 0x6F	; 111
    1a16:	f0 e0       	ldi	r31, 0x00	; 0
    1a18:	80 81       	ld	r24, Z
    1a1a:	82 60       	ori	r24, 0x02	; 2
    1a1c:	80 83       	st	Z, r24
    1a1e:	05 c0       	rjmp	.+10     	; 0x1a2a <__vector_9+0x86>
    1a20:	ef e6       	ldi	r30, 0x6F	; 111
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	80 81       	ld	r24, Z
    1a26:	8d 7f       	andi	r24, 0xFD	; 253
    1a28:	80 83       	st	Z, r24
    1a2a:	ff 91       	pop	r31
    1a2c:	ef 91       	pop	r30
    1a2e:	9f 91       	pop	r25
    1a30:	8f 91       	pop	r24
    1a32:	7f 91       	pop	r23
    1a34:	6f 91       	pop	r22
    1a36:	5f 91       	pop	r21
    1a38:	4f 91       	pop	r20
    1a3a:	3f 91       	pop	r19
    1a3c:	2f 91       	pop	r18
    1a3e:	0f 90       	pop	r0
    1a40:	0f be       	out	0x3f, r0	; 63
    1a42:	0f 90       	pop	r0
    1a44:	1f 90       	pop	r1
    1a46:	18 95       	reti

00001a48 <__vector_7>:
    1a48:	1f 92       	push	r1
    1a4a:	0f 92       	push	r0
    1a4c:	0f b6       	in	r0, 0x3f	; 63
    1a4e:	0f 92       	push	r0
    1a50:	11 24       	eor	r1, r1
    1a52:	cf 92       	push	r12
    1a54:	df 92       	push	r13
    1a56:	ef 92       	push	r14
    1a58:	ff 92       	push	r15
    1a5a:	2f 93       	push	r18
    1a5c:	3f 93       	push	r19
    1a5e:	4f 93       	push	r20
    1a60:	5f 93       	push	r21
    1a62:	6f 93       	push	r22
    1a64:	7f 93       	push	r23
    1a66:	8f 93       	push	r24
    1a68:	9f 93       	push	r25
    1a6a:	af 93       	push	r26
    1a6c:	bf 93       	push	r27
    1a6e:	ef 93       	push	r30
    1a70:	ff 93       	push	r31
    1a72:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
    1a76:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
    1a7a:	6c 01       	movw	r12, r24
    1a7c:	09 2e       	mov	r0, r25
    1a7e:	00 0c       	add	r0, r0
    1a80:	ee 08       	sbc	r14, r14
    1a82:	ff 08       	sbc	r15, r15
    1a84:	76 01       	movw	r14, r12
    1a86:	dd 24       	eor	r13, r13
    1a88:	cc 24       	eor	r12, r12
    1a8a:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1a8e:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1a92:	60 e0       	ldi	r22, 0x00	; 0
    1a94:	70 e0       	ldi	r23, 0x00	; 0
    1a96:	c4 2a       	or	r12, r20
    1a98:	d5 2a       	or	r13, r21
    1a9a:	e6 2a       	or	r14, r22
    1a9c:	f7 2a       	or	r15, r23
    1a9e:	b0 9b       	sbis	0x16, 0	; 22
    1aa0:	1e c0       	rjmp	.+60     	; 0x1ade <__vector_7+0x96>
    1aa2:	6c 01       	movw	r12, r24
    1aa4:	2f ef       	ldi	r18, 0xFF	; 255
    1aa6:	c2 1a       	sub	r12, r18
    1aa8:	d2 0a       	sbc	r13, r18
    1aaa:	0d 2c       	mov	r0, r13
    1aac:	00 0c       	add	r0, r0
    1aae:	ee 08       	sbc	r14, r14
    1ab0:	ff 08       	sbc	r15, r15
    1ab2:	d6 01       	movw	r26, r12
    1ab4:	99 27       	eor	r25, r25
    1ab6:	88 27       	eor	r24, r24
    1ab8:	c0 90 84 00 	lds	r12, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1abc:	d0 90 85 00 	lds	r13, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1ac0:	e1 2c       	mov	r14, r1
    1ac2:	f1 2c       	mov	r15, r1
    1ac4:	c8 2a       	or	r12, r24
    1ac6:	d9 2a       	or	r13, r25
    1ac8:	ea 2a       	or	r14, r26
    1aca:	fb 2a       	or	r15, r27
    1acc:	08 c0       	rjmp	.+16     	; 0x1ade <__vector_7+0x96>
    1ace:	82 e2       	ldi	r24, 0x22	; 34
    1ad0:	91 e0       	ldi	r25, 0x01	; 1
    1ad2:	0e 94 94 04 	call	0x928	; 0x928 <dequeue>
    1ad6:	64 e2       	ldi	r22, 0x24	; 36
    1ad8:	71 e0       	ldi	r23, 0x01	; 1
    1ada:	0e 94 32 04 	call	0x864	; 0x864 <enqueueByDeadline>
    1ade:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <timerQ>
    1ae2:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <timerQ+0x1>
    1ae6:	30 97       	sbiw	r30, 0x00	; 0
    1ae8:	69 f0       	breq	.+26     	; 0x1b04 <__vector_7+0xbc>
    1aea:	82 81       	ldd	r24, Z+2	; 0x02
    1aec:	93 81       	ldd	r25, Z+3	; 0x03
    1aee:	a4 81       	ldd	r26, Z+4	; 0x04
    1af0:	b5 81       	ldd	r27, Z+5	; 0x05
    1af2:	8c 19       	sub	r24, r12
    1af4:	9d 09       	sbc	r25, r13
    1af6:	ae 09       	sbc	r26, r14
    1af8:	bf 09       	sbc	r27, r15
    1afa:	18 16       	cp	r1, r24
    1afc:	19 06       	cpc	r1, r25
    1afe:	1a 06       	cpc	r1, r26
    1b00:	1b 06       	cpc	r1, r27
    1b02:	2c f7       	brge	.-54     	; 0x1ace <__vector_7+0x86>
    1b04:	30 97       	sbiw	r30, 0x00	; 0
    1b06:	21 f1       	breq	.+72     	; 0x1b50 <__vector_7+0x108>
    1b08:	82 81       	ldd	r24, Z+2	; 0x02
    1b0a:	93 81       	ldd	r25, Z+3	; 0x03
    1b0c:	a4 81       	ldd	r26, Z+4	; 0x04
    1b0e:	b5 81       	ldd	r27, Z+5	; 0x05
    1b10:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
    1b14:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
    1b18:	2a 17       	cp	r18, r26
    1b1a:	3b 07       	cpc	r19, r27
    1b1c:	c9 f4       	brne	.+50     	; 0x1b50 <__vector_7+0x108>
    1b1e:	9c 01       	movw	r18, r24
    1b20:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1b24:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1b28:	84 1b       	sub	r24, r20
    1b2a:	95 0b       	sbc	r25, r21
    1b2c:	01 97       	sbiw	r24, 0x01	; 1
    1b2e:	31 f4       	brne	.+12     	; 0x1b3c <__vector_7+0xf4>
    1b30:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1b34:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1b38:	2f 5f       	subi	r18, 0xFF	; 255
    1b3a:	3f 4f       	sbci	r19, 0xFF	; 255
    1b3c:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1b40:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1b44:	ef e6       	ldi	r30, 0x6F	; 111
    1b46:	f0 e0       	ldi	r31, 0x00	; 0
    1b48:	80 81       	ld	r24, Z
    1b4a:	82 60       	ori	r24, 0x02	; 2
    1b4c:	80 83       	st	Z, r24
    1b4e:	05 c0       	rjmp	.+10     	; 0x1b5a <__vector_7+0x112>
    1b50:	ef e6       	ldi	r30, 0x6F	; 111
    1b52:	f0 e0       	ldi	r31, 0x00	; 0
    1b54:	80 81       	ld	r24, Z
    1b56:	8d 7f       	andi	r24, 0xFD	; 253
    1b58:	80 83       	st	Z, r24
    1b5a:	0e 94 c9 04 	call	0x992	; 0x992 <schedule>
    1b5e:	ff 91       	pop	r31
    1b60:	ef 91       	pop	r30
    1b62:	bf 91       	pop	r27
    1b64:	af 91       	pop	r26
    1b66:	9f 91       	pop	r25
    1b68:	8f 91       	pop	r24
    1b6a:	7f 91       	pop	r23
    1b6c:	6f 91       	pop	r22
    1b6e:	5f 91       	pop	r21
    1b70:	4f 91       	pop	r20
    1b72:	3f 91       	pop	r19
    1b74:	2f 91       	pop	r18
    1b76:	ff 90       	pop	r15
    1b78:	ef 90       	pop	r14
    1b7a:	df 90       	pop	r13
    1b7c:	cf 90       	pop	r12
    1b7e:	0f 90       	pop	r0
    1b80:	0f be       	out	0x3f, r0	; 63
    1b82:	0f 90       	pop	r0
    1b84:	1f 90       	pop	r1
    1b86:	18 95       	reti

00001b88 <async>:
    1b88:	3f 92       	push	r3
    1b8a:	4f 92       	push	r4
    1b8c:	5f 92       	push	r5
    1b8e:	6f 92       	push	r6
    1b90:	7f 92       	push	r7
    1b92:	8f 92       	push	r8
    1b94:	9f 92       	push	r9
    1b96:	af 92       	push	r10
    1b98:	bf 92       	push	r11
    1b9a:	cf 92       	push	r12
    1b9c:	df 92       	push	r13
    1b9e:	ef 92       	push	r14
    1ba0:	ff 92       	push	r15
    1ba2:	0f 93       	push	r16
    1ba4:	1f 93       	push	r17
    1ba6:	cf 93       	push	r28
    1ba8:	df 93       	push	r29
    1baa:	2b 01       	movw	r4, r22
    1bac:	3c 01       	movw	r6, r24
    1bae:	49 01       	movw	r8, r18
    1bb0:	5a 01       	movw	r10, r20
    1bb2:	8f b7       	in	r24, 0x3f	; 63
    1bb4:	80 78       	andi	r24, 0x80	; 128
    1bb6:	38 2e       	mov	r3, r24
    1bb8:	f8 94       	cli
    1bba:	86 e0       	ldi	r24, 0x06	; 6
    1bbc:	91 e0       	ldi	r25, 0x01	; 1
    1bbe:	0e 94 94 04 	call	0x928	; 0x928 <dequeue>
    1bc2:	ec 01       	movw	r28, r24
    1bc4:	1b 87       	std	Y+11, r17	; 0x0b
    1bc6:	0a 87       	std	Y+10, r16	; 0x0a
    1bc8:	fd 86       	std	Y+13, r15	; 0x0d
    1bca:	ec 86       	std	Y+12, r14	; 0x0c
    1bcc:	df 86       	std	Y+15, r13	; 0x0f
    1bce:	ce 86       	std	Y+14, r12	; 0x0e
    1bd0:	33 20       	and	r3, r3
    1bd2:	61 f0       	breq	.+24     	; 0x1bec <async+0x64>
    1bd4:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1bd8:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1bdc:	02 80       	ldd	r0, Z+2	; 0x02
    1bde:	f3 81       	ldd	r31, Z+3	; 0x03
    1be0:	e0 2d       	mov	r30, r0
    1be2:	82 81       	ldd	r24, Z+2	; 0x02
    1be4:	93 81       	ldd	r25, Z+3	; 0x03
    1be6:	a4 81       	ldd	r26, Z+4	; 0x04
    1be8:	b5 81       	ldd	r27, Z+5	; 0x05
    1bea:	08 c0       	rjmp	.+16     	; 0x1bfc <async+0x74>
    1bec:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <timestamp>
    1bf0:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <timestamp+0x1>
    1bf4:	a0 91 20 01 	lds	r26, 0x0120	; 0x800120 <timestamp+0x2>
    1bf8:	b0 91 21 01 	lds	r27, 0x0121	; 0x800121 <timestamp+0x3>
    1bfc:	48 0e       	add	r4, r24
    1bfe:	59 1e       	adc	r5, r25
    1c00:	6a 1e       	adc	r6, r26
    1c02:	7b 1e       	adc	r7, r27
    1c04:	4a 82       	std	Y+2, r4	; 0x02
    1c06:	5b 82       	std	Y+3, r5	; 0x03
    1c08:	6c 82       	std	Y+4, r6	; 0x04
    1c0a:	7d 82       	std	Y+5, r7	; 0x05
    1c0c:	18 14       	cp	r1, r8
    1c0e:	19 04       	cpc	r1, r9
    1c10:	1a 04       	cpc	r1, r10
    1c12:	1b 04       	cpc	r1, r11
    1c14:	44 f0       	brlt	.+16     	; 0x1c26 <async+0x9e>
    1c16:	0f 2e       	mov	r0, r31
    1c18:	88 24       	eor	r8, r8
    1c1a:	8a 94       	dec	r8
    1c1c:	98 2c       	mov	r9, r8
    1c1e:	a8 2c       	mov	r10, r8
    1c20:	ff e7       	ldi	r31, 0x7F	; 127
    1c22:	bf 2e       	mov	r11, r31
    1c24:	f0 2d       	mov	r31, r0
    1c26:	84 0c       	add	r8, r4
    1c28:	95 1c       	adc	r9, r5
    1c2a:	a6 1c       	adc	r10, r6
    1c2c:	b7 1c       	adc	r11, r7
    1c2e:	8e 82       	std	Y+6, r8	; 0x06
    1c30:	9f 82       	std	Y+7, r9	; 0x07
    1c32:	a8 86       	std	Y+8, r10	; 0x08
    1c34:	b9 86       	std	Y+9, r11	; 0x09
    1c36:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
    1c3a:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
    1c3e:	c9 01       	movw	r24, r18
    1c40:	03 2e       	mov	r0, r19
    1c42:	00 0c       	add	r0, r0
    1c44:	aa 0b       	sbc	r26, r26
    1c46:	bb 0b       	sbc	r27, r27
    1c48:	dc 01       	movw	r26, r24
    1c4a:	99 27       	eor	r25, r25
    1c4c:	88 27       	eor	r24, r24
    1c4e:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1c52:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1c56:	60 e0       	ldi	r22, 0x00	; 0
    1c58:	70 e0       	ldi	r23, 0x00	; 0
    1c5a:	84 2b       	or	r24, r20
    1c5c:	95 2b       	or	r25, r21
    1c5e:	a6 2b       	or	r26, r22
    1c60:	b7 2b       	or	r27, r23
    1c62:	b0 9b       	sbis	0x16, 0	; 22
    1c64:	13 c0       	rjmp	.+38     	; 0x1c8c <async+0x104>
    1c66:	c9 01       	movw	r24, r18
    1c68:	01 96       	adiw	r24, 0x01	; 1
    1c6a:	09 2e       	mov	r0, r25
    1c6c:	00 0c       	add	r0, r0
    1c6e:	aa 0b       	sbc	r26, r26
    1c70:	bb 0b       	sbc	r27, r27
    1c72:	dc 01       	movw	r26, r24
    1c74:	99 27       	eor	r25, r25
    1c76:	88 27       	eor	r24, r24
    1c78:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1c7c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1c80:	60 e0       	ldi	r22, 0x00	; 0
    1c82:	70 e0       	ldi	r23, 0x00	; 0
    1c84:	84 2b       	or	r24, r20
    1c86:	95 2b       	or	r25, r21
    1c88:	a6 2b       	or	r26, r22
    1c8a:	b7 2b       	or	r27, r23
    1c8c:	48 1a       	sub	r4, r24
    1c8e:	59 0a       	sbc	r5, r25
    1c90:	6a 0a       	sbc	r6, r26
    1c92:	7b 0a       	sbc	r7, r27
    1c94:	14 14       	cp	r1, r4
    1c96:	15 04       	cpc	r1, r5
    1c98:	16 04       	cpc	r1, r6
    1c9a:	17 04       	cpc	r1, r7
    1c9c:	ac f5       	brge	.+106    	; 0x1d08 <async+0x180>
    1c9e:	62 e2       	ldi	r22, 0x22	; 34
    1ca0:	71 e0       	ldi	r23, 0x01	; 1
    1ca2:	ce 01       	movw	r24, r28
    1ca4:	0e 94 63 04 	call	0x8c6	; 0x8c6 <enqueueByBaseline>
    1ca8:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <timerQ>
    1cac:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <timerQ+0x1>
    1cb0:	30 97       	sbiw	r30, 0x00	; 0
    1cb2:	21 f1       	breq	.+72     	; 0x1cfc <async+0x174>
    1cb4:	82 81       	ldd	r24, Z+2	; 0x02
    1cb6:	93 81       	ldd	r25, Z+3	; 0x03
    1cb8:	a4 81       	ldd	r26, Z+4	; 0x04
    1cba:	b5 81       	ldd	r27, Z+5	; 0x05
    1cbc:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <__data_end>
    1cc0:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <__data_end+0x1>
    1cc4:	2a 17       	cp	r18, r26
    1cc6:	3b 07       	cpc	r19, r27
    1cc8:	c9 f4       	brne	.+50     	; 0x1cfc <async+0x174>
    1cca:	9c 01       	movw	r18, r24
    1ccc:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1cd0:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1cd4:	84 1b       	sub	r24, r20
    1cd6:	95 0b       	sbc	r25, r21
    1cd8:	01 97       	sbiw	r24, 0x01	; 1
    1cda:	31 f4       	brne	.+12     	; 0x1ce8 <async+0x160>
    1cdc:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1ce0:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1ce4:	2f 5f       	subi	r18, 0xFF	; 255
    1ce6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ce8:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1cec:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1cf0:	ef e6       	ldi	r30, 0x6F	; 111
    1cf2:	f0 e0       	ldi	r31, 0x00	; 0
    1cf4:	80 81       	ld	r24, Z
    1cf6:	82 60       	ori	r24, 0x02	; 2
    1cf8:	80 83       	st	Z, r24
    1cfa:	39 c0       	rjmp	.+114    	; 0x1d6e <async+0x1e6>
    1cfc:	ef e6       	ldi	r30, 0x6F	; 111
    1cfe:	f0 e0       	ldi	r31, 0x00	; 0
    1d00:	80 81       	ld	r24, Z
    1d02:	8d 7f       	andi	r24, 0xFD	; 253
    1d04:	80 83       	st	Z, r24
    1d06:	33 c0       	rjmp	.+102    	; 0x1d6e <async+0x1e6>
    1d08:	64 e2       	ldi	r22, 0x24	; 36
    1d0a:	71 e0       	ldi	r23, 0x01	; 1
    1d0c:	ce 01       	movw	r24, r28
    1d0e:	0e 94 32 04 	call	0x864	; 0x864 <enqueueByDeadline>
    1d12:	33 20       	and	r3, r3
    1d14:	61 f1       	breq	.+88     	; 0x1d6e <async+0x1e6>
    1d16:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <threadPool>
    1d1a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <threadPool+0x1>
    1d1e:	89 2b       	or	r24, r25
    1d20:	31 f1       	breq	.+76     	; 0x1d6e <async+0x1e6>
    1d22:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <msgQ>
    1d26:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <msgQ+0x1>
    1d2a:	86 81       	ldd	r24, Z+6	; 0x06
    1d2c:	97 81       	ldd	r25, Z+7	; 0x07
    1d2e:	a0 85       	ldd	r26, Z+8	; 0x08
    1d30:	b1 85       	ldd	r27, Z+9	; 0x09
    1d32:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <activeStack>
    1d36:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <activeStack+0x1>
    1d3a:	02 80       	ldd	r0, Z+2	; 0x02
    1d3c:	f3 81       	ldd	r31, Z+3	; 0x03
    1d3e:	e0 2d       	mov	r30, r0
    1d40:	46 81       	ldd	r20, Z+6	; 0x06
    1d42:	57 81       	ldd	r21, Z+7	; 0x07
    1d44:	60 85       	ldd	r22, Z+8	; 0x08
    1d46:	71 85       	ldd	r23, Z+9	; 0x09
    1d48:	84 1b       	sub	r24, r20
    1d4a:	95 0b       	sbc	r25, r21
    1d4c:	a6 0b       	sbc	r26, r22
    1d4e:	b7 0b       	sbc	r27, r23
    1d50:	72 f4       	brpl	.+28     	; 0x1d6e <async+0x1e6>
    1d52:	84 e0       	ldi	r24, 0x04	; 4
    1d54:	91 e0       	ldi	r25, 0x01	; 1
    1d56:	0e 94 bf 04 	call	0x97e	; 0x97e <pop>
    1d5a:	62 e0       	ldi	r22, 0x02	; 2
    1d5c:	71 e0       	ldi	r23, 0x01	; 1
    1d5e:	0e 94 b5 04 	call	0x96a	; 0x96a <push>
    1d62:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <activeStack>
    1d66:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <activeStack+0x1>
    1d6a:	0e 94 12 04 	call	0x824	; 0x824 <dispatch>
    1d6e:	33 20       	and	r3, r3
    1d70:	09 f0       	breq	.+2      	; 0x1d74 <async+0x1ec>
    1d72:	78 94       	sei
    1d74:	ce 01       	movw	r24, r28
    1d76:	df 91       	pop	r29
    1d78:	cf 91       	pop	r28
    1d7a:	1f 91       	pop	r17
    1d7c:	0f 91       	pop	r16
    1d7e:	ff 90       	pop	r15
    1d80:	ef 90       	pop	r14
    1d82:	df 90       	pop	r13
    1d84:	cf 90       	pop	r12
    1d86:	bf 90       	pop	r11
    1d88:	af 90       	pop	r10
    1d8a:	9f 90       	pop	r9
    1d8c:	8f 90       	pop	r8
    1d8e:	7f 90       	pop	r7
    1d90:	6f 90       	pop	r6
    1d92:	5f 90       	pop	r5
    1d94:	4f 90       	pop	r4
    1d96:	3f 90       	pop	r3
    1d98:	08 95       	ret

00001d9a <sync>:
    1d9a:	cf 92       	push	r12
    1d9c:	df 92       	push	r13
    1d9e:	ef 92       	push	r14
    1da0:	ff 92       	push	r15
    1da2:	0f 93       	push	r16
    1da4:	1f 93       	push	r17
    1da6:	cf 93       	push	r28
    1da8:	df 93       	push	r29
    1daa:	ec 01       	movw	r28, r24
    1dac:	7b 01       	movw	r14, r22
    1dae:	6a 01       	movw	r12, r20
    1db0:	1f b7       	in	r17, 0x3f	; 63
    1db2:	10 78       	andi	r17, 0x80	; 128
    1db4:	f8 94       	cli
    1db6:	a8 81       	ld	r26, Y
    1db8:	b9 81       	ldd	r27, Y+1	; 0x01
    1dba:	10 97       	sbiw	r26, 0x00	; 0
    1dbc:	19 f4       	brne	.+6      	; 0x1dc4 <sync+0x2a>
    1dbe:	35 c0       	rjmp	.+106    	; 0x1e2a <sync+0x90>
    1dc0:	a0 81       	ld	r26, Z
    1dc2:	b1 81       	ldd	r27, Z+1	; 0x01
    1dc4:	14 96       	adiw	r26, 0x04	; 4
    1dc6:	ed 91       	ld	r30, X+
    1dc8:	fc 91       	ld	r31, X
    1dca:	15 97       	sbiw	r26, 0x05	; 5
    1dcc:	30 97       	sbiw	r30, 0x00	; 0
    1dce:	c1 f7       	brne	.-16     	; 0x1dc0 <sync+0x26>
    1dd0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1dd4:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1dd8:	a2 17       	cp	r26, r18
    1dda:	b3 07       	cpc	r27, r19
    1ddc:	11 f0       	breq	.+4      	; 0x1de2 <sync+0x48>
    1dde:	11 11       	cpse	r17, r1
    1de0:	07 c0       	rjmp	.+14     	; 0x1df0 <sync+0x56>
    1de2:	11 23       	and	r17, r17
    1de4:	09 f4       	brne	.+2      	; 0x1de8 <sync+0x4e>
    1de6:	4a c0       	rjmp	.+148    	; 0x1e7c <sync+0xe2>
    1de8:	78 94       	sei
    1dea:	8f ef       	ldi	r24, 0xFF	; 255
    1dec:	9f ef       	ldi	r25, 0xFF	; 255
    1dee:	4e c0       	rjmp	.+156    	; 0x1e8c <sync+0xf2>
    1df0:	8a 81       	ldd	r24, Y+2	; 0x02
    1df2:	9b 81       	ldd	r25, Y+3	; 0x03
    1df4:	00 97       	sbiw	r24, 0x00	; 0
    1df6:	19 f0       	breq	.+6      	; 0x1dfe <sync+0x64>
    1df8:	fc 01       	movw	r30, r24
    1dfa:	15 82       	std	Z+5, r1	; 0x05
    1dfc:	14 82       	std	Z+4, r1	; 0x04
    1dfe:	3b 83       	std	Y+3, r19	; 0x03
    1e00:	2a 83       	std	Y+2, r18	; 0x02
    1e02:	f9 01       	movw	r30, r18
    1e04:	d5 83       	std	Z+5, r29	; 0x05
    1e06:	c4 83       	std	Z+4, r28	; 0x04
    1e08:	cd 01       	movw	r24, r26
    1e0a:	0e 94 12 04 	call	0x824	; 0x824 <dispatch>
    1e0e:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1e12:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1e16:	82 81       	ldd	r24, Z+2	; 0x02
    1e18:	93 81       	ldd	r25, Z+3	; 0x03
    1e1a:	89 2b       	or	r24, r25
    1e1c:	31 f4       	brne	.+12     	; 0x1e2a <sync+0x90>
    1e1e:	11 23       	and	r17, r17
    1e20:	81 f1       	breq	.+96     	; 0x1e82 <sync+0xe8>
    1e22:	78 94       	sei
    1e24:	80 e0       	ldi	r24, 0x00	; 0
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	31 c0       	rjmp	.+98     	; 0x1e8c <sync+0xf2>
    1e2a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1e2e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1e32:	99 83       	std	Y+1, r25	; 0x01
    1e34:	88 83       	st	Y, r24
    1e36:	11 23       	and	r17, r17
    1e38:	29 f0       	breq	.+10     	; 0x1e44 <sync+0xaa>
    1e3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3c:	9b 81       	ldd	r25, Y+3	; 0x03
    1e3e:	01 97       	sbiw	r24, 0x01	; 1
    1e40:	09 f0       	breq	.+2      	; 0x1e44 <sync+0xaa>
    1e42:	78 94       	sei
    1e44:	b6 01       	movw	r22, r12
    1e46:	ce 01       	movw	r24, r28
    1e48:	f7 01       	movw	r30, r14
    1e4a:	09 95       	icall
    1e4c:	f8 2e       	mov	r15, r24
    1e4e:	09 2f       	mov	r16, r25
    1e50:	8f b7       	in	r24, 0x3f	; 63
    1e52:	f8 94       	cli
    1e54:	19 82       	std	Y+1, r1	; 0x01
    1e56:	18 82       	st	Y, r1
    1e58:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5a:	9b 81       	ldd	r25, Y+3	; 0x03
    1e5c:	82 30       	cpi	r24, 0x02	; 2
    1e5e:	91 05       	cpc	r25, r1
    1e60:	38 f0       	brcs	.+14     	; 0x1e70 <sync+0xd6>
    1e62:	1b 82       	std	Y+3, r1	; 0x03
    1e64:	1a 82       	std	Y+2, r1	; 0x02
    1e66:	fc 01       	movw	r30, r24
    1e68:	15 82       	std	Z+5, r1	; 0x05
    1e6a:	14 82       	std	Z+4, r1	; 0x04
    1e6c:	0e 94 12 04 	call	0x824	; 0x824 <dispatch>
    1e70:	11 23       	and	r17, r17
    1e72:	51 f0       	breq	.+20     	; 0x1e88 <sync+0xee>
    1e74:	78 94       	sei
    1e76:	8f 2d       	mov	r24, r15
    1e78:	90 2f       	mov	r25, r16
    1e7a:	08 c0       	rjmp	.+16     	; 0x1e8c <sync+0xf2>
    1e7c:	8f ef       	ldi	r24, 0xFF	; 255
    1e7e:	9f ef       	ldi	r25, 0xFF	; 255
    1e80:	05 c0       	rjmp	.+10     	; 0x1e8c <sync+0xf2>
    1e82:	80 e0       	ldi	r24, 0x00	; 0
    1e84:	90 e0       	ldi	r25, 0x00	; 0
    1e86:	02 c0       	rjmp	.+4      	; 0x1e8c <sync+0xf2>
    1e88:	8f 2d       	mov	r24, r15
    1e8a:	90 2f       	mov	r25, r16
    1e8c:	df 91       	pop	r29
    1e8e:	cf 91       	pop	r28
    1e90:	1f 91       	pop	r17
    1e92:	0f 91       	pop	r16
    1e94:	ff 90       	pop	r15
    1e96:	ef 90       	pop	r14
    1e98:	df 90       	pop	r13
    1e9a:	cf 90       	pop	r12
    1e9c:	08 95       	ret

00001e9e <run>:
    1e9e:	00 91 00 01 	lds	r16, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1ea2:	10 91 01 01 	lds	r17, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1ea6:	84 e2       	ldi	r24, 0x24	; 36
    1ea8:	91 e0       	ldi	r25, 0x01	; 1
    1eaa:	0e 94 94 04 	call	0x928	; 0x928 <dequeue>
    1eae:	ec 01       	movw	r28, r24
    1eb0:	f8 01       	movw	r30, r16
    1eb2:	93 83       	std	Z+3, r25	; 0x03
    1eb4:	82 83       	std	Z+2, r24	; 0x02
    1eb6:	78 94       	sei
    1eb8:	6c 85       	ldd	r22, Y+12	; 0x0c
    1eba:	7d 85       	ldd	r23, Y+13	; 0x0d
    1ebc:	4e 85       	ldd	r20, Y+14	; 0x0e
    1ebe:	5f 85       	ldd	r21, Y+15	; 0x0f
    1ec0:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ec2:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ec4:	0e 94 cd 0e 	call	0x1d9a	; 0x1d9a <sync>
    1ec8:	8f b7       	in	r24, 0x3f	; 63
    1eca:	f8 94       	cli
    1ecc:	66 e0       	ldi	r22, 0x06	; 6
    1ece:	71 e0       	ldi	r23, 0x01	; 1
    1ed0:	ce 01       	movw	r24, r28
    1ed2:	0e 94 ab 04 	call	0x956	; 0x956 <insert>
    1ed6:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <activeStack>
    1eda:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <activeStack+0x1>
    1ede:	01 90       	ld	r0, Z+
    1ee0:	f0 81       	ld	r31, Z
    1ee2:	e0 2d       	mov	r30, r0
    1ee4:	c2 81       	ldd	r28, Z+2	; 0x02
    1ee6:	d3 81       	ldd	r29, Z+3	; 0x03
    1ee8:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <msgQ>
    1eec:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <msgQ+0x1>
    1ef0:	30 97       	sbiw	r30, 0x00	; 0
    1ef2:	a1 f0       	breq	.+40     	; 0x1f1c <run+0x7e>
    1ef4:	20 97       	sbiw	r28, 0x00	; 0
    1ef6:	99 f2       	breq	.-90     	; 0x1e9e <run>
    1ef8:	86 81       	ldd	r24, Z+6	; 0x06
    1efa:	97 81       	ldd	r25, Z+7	; 0x07
    1efc:	a0 85       	ldd	r26, Z+8	; 0x08
    1efe:	b1 85       	ldd	r27, Z+9	; 0x09
    1f00:	4e 81       	ldd	r20, Y+6	; 0x06
    1f02:	5f 81       	ldd	r21, Y+7	; 0x07
    1f04:	68 85       	ldd	r22, Y+8	; 0x08
    1f06:	79 85       	ldd	r23, Y+9	; 0x09
    1f08:	84 1b       	sub	r24, r20
    1f0a:	95 0b       	sbc	r25, r21
    1f0c:	a6 0b       	sbc	r26, r22
    1f0e:	b7 0b       	sbc	r27, r23
    1f10:	18 16       	cp	r1, r24
    1f12:	19 06       	cpc	r1, r25
    1f14:	1a 06       	cpc	r1, r26
    1f16:	1b 06       	cpc	r1, r27
    1f18:	0c f0       	brlt	.+2      	; 0x1f1c <run+0x7e>
    1f1a:	c1 cf       	rjmp	.-126    	; 0x1e9e <run>
    1f1c:	82 e0       	ldi	r24, 0x02	; 2
    1f1e:	91 e0       	ldi	r25, 0x01	; 1
    1f20:	0e 94 bf 04 	call	0x97e	; 0x97e <pop>
    1f24:	64 e0       	ldi	r22, 0x04	; 4
    1f26:	71 e0       	ldi	r23, 0x01	; 1
    1f28:	0e 94 b5 04 	call	0x96a	; 0x96a <push>
    1f2c:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <activeStack>
    1f30:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <activeStack+0x1>
    1f34:	02 c0       	rjmp	.+4      	; 0x1f3a <run+0x9c>
    1f36:	a0 81       	ld	r26, Z
    1f38:	b1 81       	ldd	r27, Z+1	; 0x01
    1f3a:	14 96       	adiw	r26, 0x04	; 4
    1f3c:	ed 91       	ld	r30, X+
    1f3e:	fc 91       	ld	r31, X
    1f40:	15 97       	sbiw	r26, 0x05	; 5
    1f42:	30 97       	sbiw	r30, 0x00	; 0
    1f44:	c1 f7       	brne	.-16     	; 0x1f36 <run+0x98>
    1f46:	cd 01       	movw	r24, r26
    1f48:	0e 94 12 04 	call	0x824	; 0x824 <dispatch>
    1f4c:	a8 cf       	rjmp	.-176    	; 0x1e9e <run>

00001f4e <install>:
    thread0.msg = NULL;
    
    TIMER_INIT();
}

void install(Object *obj, Method m, enum Vector i) {
    1f4e:	fc 01       	movw	r30, r24
    if (i >= 0 && i < N_VECTORS) {
    1f50:	42 31       	cpi	r20, 0x12	; 18
    1f52:	b8 f4       	brcc	.+46     	; 0x1f82 <install+0x34>
        char status;
        DISABLE(status);
    1f54:	9f b7       	in	r25, 0x3f	; 63
    1f56:	90 78       	andi	r25, 0x80	; 128
    1f58:	f8 94       	cli
        otable[i] = obj;
    1f5a:	50 e0       	ldi	r21, 0x00	; 0
    1f5c:	44 0f       	add	r20, r20
    1f5e:	55 1f       	adc	r21, r21
    1f60:	da 01       	movw	r26, r20
    1f62:	aa 5d       	subi	r26, 0xDA	; 218
    1f64:	be 4f       	sbci	r27, 0xFE	; 254
    1f66:	ed 93       	st	X+, r30
    1f68:	fc 93       	st	X, r31
        mtable[i] = m;
    1f6a:	da 01       	movw	r26, r20
    1f6c:	a2 54       	subi	r26, 0x42	; 66
    1f6e:	be 4f       	sbci	r27, 0xFE	; 254
    1f70:	6d 93       	st	X+, r22
    1f72:	7c 93       	st	X, r23
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
    1f74:	21 e0       	ldi	r18, 0x01	; 1
    1f76:	30 e0       	ldi	r19, 0x00	; 0
    1f78:	33 83       	std	Z+3, r19	; 0x03
    1f7a:	22 83       	std	Z+2, r18	; 0x02
        ENABLE(status);
    1f7c:	99 23       	and	r25, r25
    1f7e:	09 f0       	breq	.+2      	; 0x1f82 <install+0x34>
    1f80:	78 94       	sei
    1f82:	08 95       	ret

00001f84 <tinytimber>:
    }
}

int tinytimber(Object *obj, Method m, int arg) {
    1f84:	8c 01       	movw	r16, r24
    1f86:	7b 01       	movw	r14, r22
    1f88:	6a 01       	movw	r12, r20
    char status;
    DISABLE(status);
    1f8a:	8f b7       	in	r24, 0x3f	; 63
    1f8c:	f8 94       	cli
    initialize();
    1f8e:	0e 94 73 03 	call	0x6e6	; 0x6e6 <initialize>
    ENABLE(1);
    1f92:	78 94       	sei
    if (m != NULL)
    1f94:	e1 14       	cp	r14, r1
    1f96:	f1 04       	cpc	r15, r1
    1f98:	41 f0       	breq	.+16     	; 0x1faa <tinytimber+0x26>
        //m(obj, arg);
		ASYNC(obj,m,arg);
    1f9a:	20 e0       	ldi	r18, 0x00	; 0
    1f9c:	30 e0       	ldi	r19, 0x00	; 0
    1f9e:	a9 01       	movw	r20, r18
    1fa0:	60 e0       	ldi	r22, 0x00	; 0
    1fa2:	70 e0       	ldi	r23, 0x00	; 0
    1fa4:	cb 01       	movw	r24, r22
    1fa6:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <async>
    DISABLE(status);
    1faa:	8f b7       	in	r24, 0x3f	; 63
    1fac:	f8 94       	cli
    idle();
    1fae:	0e 94 cb 0c 	call	0x1996	; 0x1996 <idle>

00001fb2 <__divmodsi4>:
    1fb2:	05 2e       	mov	r0, r21
    1fb4:	97 fb       	bst	r25, 7
    1fb6:	1e f4       	brtc	.+6      	; 0x1fbe <__divmodsi4+0xc>
    1fb8:	00 94       	com	r0
    1fba:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <__negsi2>
    1fbe:	57 fd       	sbrc	r21, 7
    1fc0:	07 d0       	rcall	.+14     	; 0x1fd0 <__divmodsi4_neg2>
    1fc2:	0e 94 f8 0f 	call	0x1ff0	; 0x1ff0 <__udivmodsi4>
    1fc6:	07 fc       	sbrc	r0, 7
    1fc8:	03 d0       	rcall	.+6      	; 0x1fd0 <__divmodsi4_neg2>
    1fca:	4e f4       	brtc	.+18     	; 0x1fde <__divmodsi4_exit>
    1fcc:	0c 94 f0 0f 	jmp	0x1fe0	; 0x1fe0 <__negsi2>

00001fd0 <__divmodsi4_neg2>:
    1fd0:	50 95       	com	r21
    1fd2:	40 95       	com	r20
    1fd4:	30 95       	com	r19
    1fd6:	21 95       	neg	r18
    1fd8:	3f 4f       	sbci	r19, 0xFF	; 255
    1fda:	4f 4f       	sbci	r20, 0xFF	; 255
    1fdc:	5f 4f       	sbci	r21, 0xFF	; 255

00001fde <__divmodsi4_exit>:
    1fde:	08 95       	ret

00001fe0 <__negsi2>:
    1fe0:	90 95       	com	r25
    1fe2:	80 95       	com	r24
    1fe4:	70 95       	com	r23
    1fe6:	61 95       	neg	r22
    1fe8:	7f 4f       	sbci	r23, 0xFF	; 255
    1fea:	8f 4f       	sbci	r24, 0xFF	; 255
    1fec:	9f 4f       	sbci	r25, 0xFF	; 255
    1fee:	08 95       	ret

00001ff0 <__udivmodsi4>:
    1ff0:	a1 e2       	ldi	r26, 0x21	; 33
    1ff2:	1a 2e       	mov	r1, r26
    1ff4:	aa 1b       	sub	r26, r26
    1ff6:	bb 1b       	sub	r27, r27
    1ff8:	fd 01       	movw	r30, r26
    1ffa:	0d c0       	rjmp	.+26     	; 0x2016 <__udivmodsi4_ep>

00001ffc <__udivmodsi4_loop>:
    1ffc:	aa 1f       	adc	r26, r26
    1ffe:	bb 1f       	adc	r27, r27
    2000:	ee 1f       	adc	r30, r30
    2002:	ff 1f       	adc	r31, r31
    2004:	a2 17       	cp	r26, r18
    2006:	b3 07       	cpc	r27, r19
    2008:	e4 07       	cpc	r30, r20
    200a:	f5 07       	cpc	r31, r21
    200c:	20 f0       	brcs	.+8      	; 0x2016 <__udivmodsi4_ep>
    200e:	a2 1b       	sub	r26, r18
    2010:	b3 0b       	sbc	r27, r19
    2012:	e4 0b       	sbc	r30, r20
    2014:	f5 0b       	sbc	r31, r21

00002016 <__udivmodsi4_ep>:
    2016:	66 1f       	adc	r22, r22
    2018:	77 1f       	adc	r23, r23
    201a:	88 1f       	adc	r24, r24
    201c:	99 1f       	adc	r25, r25
    201e:	1a 94       	dec	r1
    2020:	69 f7       	brne	.-38     	; 0x1ffc <__udivmodsi4_loop>
    2022:	60 95       	com	r22
    2024:	70 95       	com	r23
    2026:	80 95       	com	r24
    2028:	90 95       	com	r25
    202a:	9b 01       	movw	r18, r22
    202c:	ac 01       	movw	r20, r24
    202e:	bd 01       	movw	r22, r26
    2030:	cf 01       	movw	r24, r30
    2032:	08 95       	ret

00002034 <setjmp>:
    2034:	dc 01       	movw	r26, r24
    2036:	2d 92       	st	X+, r2
    2038:	3d 92       	st	X+, r3
    203a:	4d 92       	st	X+, r4
    203c:	5d 92       	st	X+, r5
    203e:	6d 92       	st	X+, r6
    2040:	7d 92       	st	X+, r7
    2042:	8d 92       	st	X+, r8
    2044:	9d 92       	st	X+, r9
    2046:	ad 92       	st	X+, r10
    2048:	bd 92       	st	X+, r11
    204a:	cd 92       	st	X+, r12
    204c:	dd 92       	st	X+, r13
    204e:	ed 92       	st	X+, r14
    2050:	fd 92       	st	X+, r15
    2052:	0d 93       	st	X+, r16
    2054:	1d 93       	st	X+, r17
    2056:	cd 93       	st	X+, r28
    2058:	dd 93       	st	X+, r29
    205a:	ff 91       	pop	r31
    205c:	ef 91       	pop	r30
    205e:	8d b7       	in	r24, 0x3d	; 61
    2060:	8d 93       	st	X+, r24
    2062:	8e b7       	in	r24, 0x3e	; 62
    2064:	8d 93       	st	X+, r24
    2066:	8f b7       	in	r24, 0x3f	; 63
    2068:	8d 93       	st	X+, r24
    206a:	ed 93       	st	X+, r30
    206c:	fd 93       	st	X+, r31
    206e:	88 27       	eor	r24, r24
    2070:	99 27       	eor	r25, r25
    2072:	09 94       	ijmp

00002074 <longjmp>:
    2074:	dc 01       	movw	r26, r24
    2076:	cb 01       	movw	r24, r22
    2078:	81 30       	cpi	r24, 0x01	; 1
    207a:	91 05       	cpc	r25, r1
    207c:	81 1d       	adc	r24, r1
    207e:	2d 90       	ld	r2, X+
    2080:	3d 90       	ld	r3, X+
    2082:	4d 90       	ld	r4, X+
    2084:	5d 90       	ld	r5, X+
    2086:	6d 90       	ld	r6, X+
    2088:	7d 90       	ld	r7, X+
    208a:	8d 90       	ld	r8, X+
    208c:	9d 90       	ld	r9, X+
    208e:	ad 90       	ld	r10, X+
    2090:	bd 90       	ld	r11, X+
    2092:	cd 90       	ld	r12, X+
    2094:	dd 90       	ld	r13, X+
    2096:	ed 90       	ld	r14, X+
    2098:	fd 90       	ld	r15, X+
    209a:	0d 91       	ld	r16, X+
    209c:	1d 91       	ld	r17, X+
    209e:	cd 91       	ld	r28, X+
    20a0:	dd 91       	ld	r29, X+
    20a2:	ed 91       	ld	r30, X+
    20a4:	fd 91       	ld	r31, X+
    20a6:	0d 90       	ld	r0, X+
    20a8:	f8 94       	cli
    20aa:	fe bf       	out	0x3e, r31	; 62
    20ac:	0f be       	out	0x3f, r0	; 63
    20ae:	ed bf       	out	0x3d, r30	; 61
    20b0:	ed 91       	ld	r30, X+
    20b2:	fd 91       	ld	r31, X+
    20b4:	09 94       	ijmp

000020b6 <_exit>:
    20b6:	f8 94       	cli

000020b8 <__stop_program>:
    20b8:	ff cf       	rjmp	.-2      	; 0x20b8 <__stop_program>
