
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000734  000007c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000734  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000022b  00800118  00800118  000007e0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007e0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000810  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000850  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011ce  00000000  00000000  000008e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b65  00000000  00000000  00001ab6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006d0  00000000  00000000  0000261b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000022c  00000000  00000000  00002cec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000550  00000000  00000000  00002f18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000af4  00000000  00000000  00003468  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  00003f5c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 52 02 	jmp	0x4a4	; 0x4a4 <__vector_3>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <__vector_7>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	e4 e3       	ldi	r30, 0x34	; 52
  70:	f7 e0       	ldi	r31, 0x07	; 7
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	a8 31       	cpi	r26, 0x18	; 24
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
  7e:	23 e0       	ldi	r18, 0x03	; 3
  80:	a8 e1       	ldi	r26, 0x18	; 24
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	a3 34       	cpi	r26, 0x43	; 67
  8a:	b2 07       	cpc	r27, r18
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 1e 01 	call	0x23c	; 0x23c <main>
  92:	0c 94 98 03 	jmp	0x730	; 0x730 <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <writeChar>:
    spawn(computePrimes, 0);
    computePrimes(3);
}

void writeChar(char ch, int pos)
{
  9a:	cf 93       	push	r28
  9c:	df 93       	push	r29
  9e:	cd b7       	in	r28, 0x3d	; 61
  a0:	de b7       	in	r29, 0x3e	; 62
  a2:	64 97       	sbiw	r28, 0x14	; 20
  a4:	0f b6       	in	r0, 0x3f	; 63
  a6:	f8 94       	cli
  a8:	de bf       	out	0x3e, r29	; 62
  aa:	0f be       	out	0x3f, r0	; 63
  ac:	cd bf       	out	0x3d, r28	; 61
	// All the numbers
	// 0 - 0x1551, 1 - 0x0110, 2 - 0x1E11, 3 - 0x1B11, 4 - 0x0B50, 5 - 0x1B41, 6 - 0x1F41, 7 - 0x0111, 8 - 0x1F51, 9 - 0x0B51
	uint16_t scc[] = {0x1551, 0x0110, 0x1E11, 0x1B11, 0x0B50, 0x1B41, 0x1F41, 0x0111, 0x1F51, 0x0B51};
  ae:	94 e1       	ldi	r25, 0x14	; 20
  b0:	e4 e0       	ldi	r30, 0x04	; 4
  b2:	f1 e0       	ldi	r31, 0x01	; 1
  b4:	de 01       	movw	r26, r28
  b6:	11 96       	adiw	r26, 0x01	; 1
  b8:	01 90       	ld	r0, Z+
  ba:	0d 92       	st	X+, r0
  bc:	9a 95       	dec	r25
  be:	e1 f7       	brne	.-8      	; 0xb8 <writeChar+0x1e>
	
	if(pos >= 0 && pos <= 5){
  c0:	66 30       	cpi	r22, 0x06	; 6
  c2:	71 05       	cpc	r23, r1
  c4:	50 f5       	brcc	.+84     	; 0x11a <writeChar+0x80>
		if (ch >= '0' || ch <= '9'){
			int lr;
			int pair = pos / 2;					      // Make sure it's either pair 0,1 - 2,3 or 4,5
			uint8_t *lcddr = (uint8_t *) 0xEC + pair; // Point to register position 0xEC which is LCDDR0 and add pair to get LCDDR0, LCDDR1 or LCDDR2
  c6:	fb 01       	movw	r30, r22
  c8:	f5 95       	asr	r31
  ca:	e7 95       	ror	r30
  cc:	e4 51       	subi	r30, 0x14	; 20
  ce:	ff 4f       	sbci	r31, 0xFF	; 255
			uint16_t num = scc[ch - '0'];			  // Get the hexadecimal number from the list
  d0:	a8 2f       	mov	r26, r24
  d2:	b0 e0       	ldi	r27, 0x00	; 0
  d4:	d0 97       	sbiw	r26, 0x30	; 48
  d6:	aa 0f       	add	r26, r26
  d8:	bb 1f       	adc	r27, r27
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	8c 0f       	add	r24, r28
  e0:	9d 1f       	adc	r25, r29
  e2:	a8 0f       	add	r26, r24
  e4:	b9 1f       	adc	r27, r25
  e6:	4d 91       	ld	r20, X+
  e8:	5c 91       	ld	r21, X
  ea:	61 70       	andi	r22, 0x01	; 1
  ec:	77 27       	eor	r23, r23
  ee:	df 01       	movw	r26, r30
  f0:	54 96       	adiw	r26, 0x14	; 20

			for (int i = 0; i <= 3; i++) {			  // Loop through every number in the hexadecimal number
				int nibble = num & 0xF;				  // Get the least significant number in the hex
  f2:	ca 01       	movw	r24, r20
  f4:	8f 70       	andi	r24, 0x0F	; 15
  f6:	99 27       	eor	r25, r25
				
				if(pos % 2 == 1) {				      // Check if the nibble parts should be in the left or right number in the pair
  f8:	61 30       	cpi	r22, 0x01	; 1
  fa:	71 05       	cpc	r23, r1
  fc:	b9 f0       	breq	.+46     	; 0x12c <writeChar+0x92>
					nibble *= 0x10;					  // If pos % 2 == 1 -> nibble will load in right digit
					*lcddr = *lcddr & 0xF;
				}
				
				else {
					*lcddr = *lcddr & 0xF0;
  fe:	20 81       	ld	r18, Z
 100:	20 7f       	andi	r18, 0xF0	; 240
				}
				
				*lcddr = *lcddr | nibble;			  // Write the nibble to the digit
 102:	82 2b       	or	r24, r18
 104:	80 83       	st	Z, r24
				lcddr += 5;							  // Go to LCDDRx + 5
 106:	35 96       	adiw	r30, 0x05	; 5
				num /= 0x10;						  // Next nibble
 108:	52 95       	swap	r21
 10a:	42 95       	swap	r20
 10c:	4f 70       	andi	r20, 0x0F	; 15
 10e:	45 27       	eor	r20, r21
 110:	5f 70       	andi	r21, 0x0F	; 15
 112:	45 27       	eor	r20, r21
			int lr;
			int pair = pos / 2;					      // Make sure it's either pair 0,1 - 2,3 or 4,5
			uint8_t *lcddr = (uint8_t *) 0xEC + pair; // Point to register position 0xEC which is LCDDR0 and add pair to get LCDDR0, LCDDR1 or LCDDR2
			uint16_t num = scc[ch - '0'];			  // Get the hexadecimal number from the list

			for (int i = 0; i <= 3; i++) {			  // Loop through every number in the hexadecimal number
 114:	ea 17       	cp	r30, r26
 116:	fb 07       	cpc	r31, r27
 118:	61 f7       	brne	.-40     	; 0xf2 <writeChar+0x58>
				lcddr += 5;							  // Go to LCDDRx + 5
				num /= 0x10;						  // Next nibble
			}
		}
	}
}
 11a:	64 96       	adiw	r28, 0x14	; 20
 11c:	0f b6       	in	r0, 0x3f	; 63
 11e:	f8 94       	cli
 120:	de bf       	out	0x3e, r29	; 62
 122:	0f be       	out	0x3f, r0	; 63
 124:	cd bf       	out	0x3d, r28	; 61
 126:	df 91       	pop	r29
 128:	cf 91       	pop	r28
 12a:	08 95       	ret

			for (int i = 0; i <= 3; i++) {			  // Loop through every number in the hexadecimal number
				int nibble = num & 0xF;				  // Get the least significant number in the hex
				
				if(pos % 2 == 1) {				      // Check if the nibble parts should be in the left or right number in the pair
					nibble *= 0x10;					  // If pos % 2 == 1 -> nibble will load in right digit
 12c:	82 95       	swap	r24
 12e:	92 95       	swap	r25
 130:	90 7f       	andi	r25, 0xF0	; 240
 132:	98 27       	eor	r25, r24
 134:	80 7f       	andi	r24, 0xF0	; 240
 136:	98 27       	eor	r25, r24
					*lcddr = *lcddr & 0xF;
 138:	20 81       	ld	r18, Z
 13a:	2f 70       	andi	r18, 0x0F	; 15
 13c:	e2 cf       	rjmp	.-60     	; 0x102 <writeChar+0x68>

0000013e <printAt>:
		LCDAB = Low Power Waveform
	*/
	LCDCRA = (1 << LCDEN) | (1 << LCDAB);
}
	
void printAt(long num, int pos) {
 13e:	8f 92       	push	r8
 140:	9f 92       	push	r9
 142:	af 92       	push	r10
 144:	bf 92       	push	r11
 146:	cf 92       	push	r12
 148:	df 92       	push	r13
 14a:	ef 92       	push	r14
 14c:	ff 92       	push	r15
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29
 152:	4b 01       	movw	r8, r22
 154:	5c 01       	movw	r10, r24
 156:	ea 01       	movw	r28, r20
	lock(&m);
 158:	88 e1       	ldi	r24, 0x18	; 24
 15a:	91 e0       	ldi	r25, 0x01	; 1
 15c:	0e 94 9b 02 	call	0x536	; 0x536 <lock>
    pp = pos;
 160:	d0 93 21 01 	sts	0x0121, r29	; 0x800121 <pp+0x1>
 164:	c0 93 20 01 	sts	0x0120, r28	; 0x800120 <pp>
    writeChar( (num % 100) / 10 + '0', pp);
 168:	c5 01       	movw	r24, r10
 16a:	b4 01       	movw	r22, r8
 16c:	24 e6       	ldi	r18, 0x64	; 100
 16e:	30 e0       	ldi	r19, 0x00	; 0
 170:	40 e0       	ldi	r20, 0x00	; 0
 172:	50 e0       	ldi	r21, 0x00	; 0
 174:	0e 94 16 03 	call	0x62c	; 0x62c <__divmodsi4>
 178:	2a e0       	ldi	r18, 0x0A	; 10
 17a:	c2 2e       	mov	r12, r18
 17c:	d1 2c       	mov	r13, r1
 17e:	e1 2c       	mov	r14, r1
 180:	f1 2c       	mov	r15, r1
 182:	a7 01       	movw	r20, r14
 184:	96 01       	movw	r18, r12
 186:	0e 94 16 03 	call	0x62c	; 0x62c <__divmodsi4>
 18a:	be 01       	movw	r22, r28
 18c:	80 e3       	ldi	r24, 0x30	; 48
 18e:	82 0f       	add	r24, r18
 190:	0e 94 4d 00 	call	0x9a	; 0x9a <writeChar>
	//for(volatile int i = 0; i < 1000; i++){
	//}
    pp++;
 194:	c0 91 20 01 	lds	r28, 0x0120	; 0x800120 <pp>
 198:	d0 91 21 01 	lds	r29, 0x0121	; 0x800121 <pp+0x1>
 19c:	21 96       	adiw	r28, 0x01	; 1
 19e:	d0 93 21 01 	sts	0x0121, r29	; 0x800121 <pp+0x1>
 1a2:	c0 93 20 01 	sts	0x0120, r28	; 0x800120 <pp>
    writeChar( num % 10 + '0', pp);
 1a6:	c5 01       	movw	r24, r10
 1a8:	b4 01       	movw	r22, r8
 1aa:	a7 01       	movw	r20, r14
 1ac:	96 01       	movw	r18, r12
 1ae:	0e 94 16 03 	call	0x62c	; 0x62c <__divmodsi4>
 1b2:	86 2f       	mov	r24, r22
 1b4:	be 01       	movw	r22, r28
 1b6:	80 5d       	subi	r24, 0xD0	; 208
 1b8:	0e 94 4d 00 	call	0x9a	; 0x9a <writeChar>
	//yield();
	unlock(&m);
 1bc:	88 e1       	ldi	r24, 0x18	; 24
 1be:	91 e0       	ldi	r25, 0x01	; 1
}
 1c0:	df 91       	pop	r29
 1c2:	cf 91       	pop	r28
 1c4:	ff 90       	pop	r15
 1c6:	ef 90       	pop	r14
 1c8:	df 90       	pop	r13
 1ca:	cf 90       	pop	r12
 1cc:	bf 90       	pop	r11
 1ce:	af 90       	pop	r10
 1d0:	9f 90       	pop	r9
 1d2:	8f 90       	pop	r8
	//for(volatile int i = 0; i < 1000; i++){
	//}
    pp++;
    writeChar( num % 10 + '0', pp);
	//yield();
	unlock(&m);
 1d4:	0c 94 d9 02 	jmp	0x5b2	; 0x5b2 <unlock>

000001d8 <computePrimes>:
}

void computePrimes(int pos) {
 1d8:	ec 01       	movw	r28, r24
    long n;

    for(n = 1; ; n++) {
 1da:	81 2c       	mov	r8, r1
 1dc:	91 2c       	mov	r9, r1
 1de:	54 01       	movw	r10, r8
 1e0:	83 94       	inc	r8
			}
		}
	}
}
bool is_prime(long i){
	for(int n = 2; n < i; n++){
 1e2:	83 e0       	ldi	r24, 0x03	; 3
 1e4:	88 16       	cp	r8, r24
 1e6:	91 04       	cpc	r9, r1
 1e8:	a1 04       	cpc	r10, r1
 1ea:	b1 04       	cpc	r11, r1
 1ec:	e4 f0       	brlt	.+56     	; 0x226 <__EEPROM_REGION_LENGTH__+0x26>
		if(i % n == 0){
 1ee:	80 fe       	sbrs	r8, 0
 1f0:	1f c0       	rjmp	.+62     	; 0x230 <__EEPROM_REGION_LENGTH__+0x30>
 1f2:	83 e0       	ldi	r24, 0x03	; 3
 1f4:	c8 2e       	mov	r12, r24
 1f6:	d1 2c       	mov	r13, r1
 1f8:	e1 2c       	mov	r14, r1
 1fa:	f1 2c       	mov	r15, r1
 1fc:	0d c0       	rjmp	.+26     	; 0x218 <__EEPROM_REGION_LENGTH__+0x18>
 1fe:	8f ef       	ldi	r24, 0xFF	; 255
 200:	c8 1a       	sub	r12, r24
 202:	d8 0a       	sbc	r13, r24
 204:	e8 0a       	sbc	r14, r24
 206:	f8 0a       	sbc	r15, r24
 208:	c5 01       	movw	r24, r10
 20a:	b4 01       	movw	r22, r8
 20c:	0e 94 16 03 	call	0x62c	; 0x62c <__divmodsi4>
 210:	67 2b       	or	r22, r23
 212:	68 2b       	or	r22, r24
 214:	69 2b       	or	r22, r25
 216:	61 f0       	breq	.+24     	; 0x230 <__EEPROM_REGION_LENGTH__+0x30>
			}
		}
	}
}
bool is_prime(long i){
	for(int n = 2; n < i; n++){
 218:	96 01       	movw	r18, r12
 21a:	a7 01       	movw	r20, r14
 21c:	c8 14       	cp	r12, r8
 21e:	d9 04       	cpc	r13, r9
 220:	ea 04       	cpc	r14, r10
 222:	fb 04       	cpc	r15, r11
 224:	61 f7       	brne	.-40     	; 0x1fe <computePrimes+0x26>
void computePrimes(int pos) {
    long n;

    for(n = 1; ; n++) {
        if (is_prime(n)) {
            printAt(n, pos);
 226:	ae 01       	movw	r20, r28
 228:	c5 01       	movw	r24, r10
 22a:	b4 01       	movw	r22, r8
 22c:	0e 94 9f 00 	call	0x13e	; 0x13e <printAt>
}

void computePrimes(int pos) {
    long n;

    for(n = 1; ; n++) {
 230:	8f ef       	ldi	r24, 0xFF	; 255
 232:	88 1a       	sub	r8, r24
 234:	98 0a       	sbc	r9, r24
 236:	a8 0a       	sbc	r10, r24
 238:	b8 0a       	sbc	r11, r24
        if (is_prime(n)) {
            printAt(n, pos);
        }
    }
 23a:	d3 cf       	rjmp	.-90     	; 0x1e2 <computePrimes+0xa>

0000023c <main>:
}

int main() {
	CLKPR = 0x80;
 23c:	e1 e6       	ldi	r30, 0x61	; 97
 23e:	f0 e0       	ldi	r31, 0x00	; 0
 240:	80 e8       	ldi	r24, 0x80	; 128
 242:	80 83       	st	Z, r24
	CLKPR = 0x00;
 244:	10 82       	st	Z, r1
		LCDCS    - Asynchronous clock source
		LCDMUX's - Duty = 1/4, Bias = 1/3
		LCDPM's  - Number of Segments = 25
	*/
	
	LCDCRB = (1 << LCDCS) | (1 << LCDMUX1) | (1 << LCDMUX0) | (1 << LCDPM2) | (1 << LCDPM1) | (1 << LCDPM0);
 246:	87 eb       	ldi	r24, 0xB7	; 183
 248:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
	/*
		LCD Frame Rate Register:
		LCDCD's - Prescaler setting N = 16
	*/
	
	LCDFRR = (1 << LCDCD2) | (1 << LCDCD1) | (1 << LCDCD0);
 24c:	87 e0       	ldi	r24, 0x07	; 7
 24e:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>
		LCD Contrast Control Register
		None of the LCDDC's used = 300 microseconds
		LCDCC's = 3,35V
	*/
	
	LCDCCR = (1 << LCDCC3) | (1 << LCDCC2) | (1 << LCDCC1) | (1 << LCDCC0);
 252:	8f e0       	ldi	r24, 0x0F	; 15
 254:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
	
	/*
		LCDEN = LCD Enabled
		LCDAB = Low Power Waveform
	*/
	LCDCRA = (1 << LCDEN) | (1 << LCDAB);
 258:	80 ec       	ldi	r24, 0xC0	; 192
 25a:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>

int main() {
	CLKPR = 0x80;
	CLKPR = 0x00;
	LCD_Init();
    spawn(computePrimes, 0);
 25e:	60 e0       	ldi	r22, 0x00	; 0
 260:	70 e0       	ldi	r23, 0x00	; 0
 262:	8c ee       	ldi	r24, 0xEC	; 236
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	0e 94 59 01 	call	0x2b2	; 0x2b2 <spawn>
    computePrimes(3);
 26a:	83 e0       	ldi	r24, 0x03	; 3
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <computePrimes>

00000272 <dispatch>:
        while (1) ;  // not much else to do...
    }
    return p;
}

static void dispatch(thread next) {
 272:	cf 93       	push	r28
 274:	df 93       	push	r29
 276:	00 d0       	rcall	.+0      	; 0x278 <dispatch+0x6>
 278:	cd b7       	in	r28, 0x3d	; 61
 27a:	de b7       	in	r29, 0x3e	; 62
 27c:	9a 83       	std	Y+2, r25	; 0x02
 27e:	89 83       	std	Y+1, r24	; 0x01
    if (setjmp(current->context) == 0) {
 280:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 284:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 288:	06 96       	adiw	r24, 0x06	; 6
 28a:	0e 94 57 03 	call	0x6ae	; 0x6ae <setjmp>
 28e:	89 2b       	or	r24, r25
 290:	29 f0       	breq	.+10     	; 0x29c <dispatch+0x2a>
        current = next;
        longjmp(next->context,1);
    }
}
 292:	0f 90       	pop	r0
 294:	0f 90       	pop	r0
 296:	df 91       	pop	r29
 298:	cf 91       	pop	r28
 29a:	08 95       	ret
    return p;
}

static void dispatch(thread next) {
    if (setjmp(current->context) == 0) {
        current = next;
 29c:	89 81       	ldd	r24, Y+1	; 0x01
 29e:	9a 81       	ldd	r25, Y+2	; 0x02
 2a0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2a4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
        longjmp(next->context,1);
 2a8:	61 e0       	ldi	r22, 0x01	; 1
 2aa:	70 e0       	ldi	r23, 0x00	; 0
 2ac:	06 96       	adiw	r24, 0x06	; 6
 2ae:	0e 94 77 03 	call	0x6ee	; 0x6ee <longjmp>

000002b2 <spawn>:
    }
}

void spawn(void (* function)(int), int arg) {
 2b2:	cf 93       	push	r28
 2b4:	df 93       	push	r29
 2b6:	00 d0       	rcall	.+0      	; 0x2b8 <spawn+0x6>
 2b8:	cd b7       	in	r28, 0x3d	; 61
 2ba:	de b7       	in	r29, 0x3e	; 62
    thread newp;

    DISABLE();
 2bc:	f8 94       	cli
    if (!initialized) initialize();
 2be:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <initialized>
 2c2:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <initialized+0x1>
 2c6:	23 2b       	or	r18, r19
 2c8:	a9 f5       	brne	.+106    	; 0x334 <spawn+0x82>
int initialized = 0;

static void initialize(void) {
    int i;
    for (i=0; i<NTHREADS-1; i++)
        threads[i].next = &threads[i+1];
 2ca:	2c ef       	ldi	r18, 0xFC	; 252
 2cc:	31 e0       	ldi	r19, 0x01	; 1
 2ce:	30 93 94 01 	sts	0x0194, r19	; 0x800194 <threads+0x5>
 2d2:	20 93 93 01 	sts	0x0193, r18	; 0x800193 <threads+0x4>
 2d6:	29 e6       	ldi	r18, 0x69	; 105
 2d8:	32 e0       	ldi	r19, 0x02	; 2
 2da:	30 93 01 02 	sts	0x0201, r19	; 0x800201 <threads+0x72>
 2de:	20 93 00 02 	sts	0x0200, r18	; 0x800200 <threads+0x71>
 2e2:	26 ed       	ldi	r18, 0xD6	; 214
 2e4:	32 e0       	ldi	r19, 0x02	; 2
 2e6:	30 93 6e 02 	sts	0x026E, r19	; 0x80026e <threads+0xdf>
 2ea:	20 93 6d 02 	sts	0x026D, r18	; 0x80026d <threads+0xde>
    threads[NTHREADS-1].next = NULL;
 2ee:	10 92 db 02 	sts	0x02DB, r1	; 0x8002db <threads+0x14c>
 2f2:	10 92 da 02 	sts	0x02DA, r1	; 0x8002da <threads+0x14b>

    initialized = 1;
 2f6:	21 e0       	ldi	r18, 0x01	; 1
 2f8:	30 e0       	ldi	r19, 0x00	; 0
 2fa:	30 93 1d 01 	sts	0x011D, r19	; 0x80011d <initialized+0x1>
 2fe:	20 93 1c 01 	sts	0x011C, r18	; 0x80011c <initialized>
	
	/*
		Interrupts are enabled on the 7th pin of PORTB
	*/
	PCMSK1 = (1 << PCINT15);
 302:	20 e8       	ldi	r18, 0x80	; 128
 304:	20 93 6c 00 	sts	0x006C, r18	; 0x80006c <__TEXT_REGION_LENGTH__+0x7fc06c>
	EIMSK = (1 << PCIE1);
 308:	2d bb       	out	0x1d, r18	; 29
	
	/*
		Enables Joystick
	*/
	PORTB = (1 << PB7) | (1 << PB4);
 30a:	20 e9       	ldi	r18, 0x90	; 144
 30c:	25 b9       	out	0x05, r18	; 5
	
	/*
		Sets OC1A to compare match
		Sets timer to CTC mode
	*/
	TCCR1A = (1 << COM1A1) | (1 << COM1A0);
 30e:	20 ec       	ldi	r18, 0xC0	; 192
 310:	20 93 80 00 	sts	0x0080, r18	; 0x800080 <__TEXT_REGION_LENGTH__+0x7fc080>
	TCCR1B = (1 << WGM12) | (1 << CS12) | (1 << CS10);
 314:	2d e0       	ldi	r18, 0x0D	; 13
 316:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
	
	/*
		Timer compare A match interrupt: Enabled
	*/
	TIMSK1 = (1 << OCIE1A);
 31a:	22 e0       	ldi	r18, 0x02	; 2
 31c:	20 93 6f 00 	sts	0x006F, r18	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
	
	/*
		8MHz/(1024*20) = 50ms
		Set TCNT1 = 0
	*/
	OCR1A = 8000000/(1024 * 20);
 320:	26 e8       	ldi	r18, 0x86	; 134
 322:	31 e0       	ldi	r19, 0x01	; 1
 324:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
 328:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
	TCNT1 = 0x0;
 32c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
 330:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 334:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <freeQ>
 338:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <freeQ+0x1>
 33c:	3a 83       	std	Y+2, r19	; 0x02
 33e:	29 83       	std	Y+1, r18	; 0x01
    if (*queue) {
 340:	23 2b       	or	r18, r19
 342:	c9 f1       	breq	.+114    	; 0x3b6 <spawn+0x104>
        *queue = (*queue)->next;
 344:	e9 81       	ldd	r30, Y+1	; 0x01
 346:	fa 81       	ldd	r31, Y+2	; 0x02
 348:	44 81       	ldd	r20, Z+4	; 0x04
 34a:	55 81       	ldd	r21, Z+5	; 0x05
 34c:	50 93 03 01 	sts	0x0103, r21	; 0x800103 <freeQ+0x1>
 350:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <freeQ>

    DISABLE();
    if (!initialized) initialize();

    newp = dequeue(&freeQ);
    newp->function = function;
 354:	91 83       	std	Z+1, r25	; 0x01
 356:	80 83       	st	Z, r24
    newp->arg = arg;
 358:	73 83       	std	Z+3, r23	; 0x03
 35a:	62 83       	std	Z+2, r22	; 0x02
    newp->next = NULL;
 35c:	15 82       	std	Z+5, r1	; 0x05
 35e:	14 82       	std	Z+4, r1	; 0x04
    if (setjmp(newp->context) == 1) {
 360:	cf 01       	movw	r24, r30
 362:	06 96       	adiw	r24, 0x06	; 6
 364:	0e 94 57 03 	call	0x6ae	; 0x6ae <setjmp>
 368:	01 97       	sbiw	r24, 0x01	; 1
 36a:	91 f1       	breq	.+100    	; 0x3d0 <spawn+0x11e>
        current->function(current->arg);
        DISABLE();
        enqueue(current, &freeQ);
        dispatch(dequeue(&readyQ));
    }
    SETSTACK(&newp->context, &newp->stack);
 36c:	e9 81       	ldd	r30, Y+1	; 0x01
 36e:	fa 81       	ldd	r31, Y+2	; 0x02
 370:	36 96       	adiw	r30, 0x06	; 6
 372:	89 81       	ldd	r24, Y+1	; 0x01
 374:	9a 81       	ldd	r25, Y+2	; 0x02
 376:	87 59       	subi	r24, 0x97	; 151
 378:	9f 4f       	sbci	r25, 0xFF	; 255
 37a:	91 8b       	std	Z+17, r25	; 0x11
 37c:	80 8b       	std	Z+16, r24	; 0x10
 37e:	93 8b       	std	Z+19, r25	; 0x13
 380:	82 8b       	std	Z+18, r24	; 0x12
	OCR1A = 8000000/(1024 * 20);
	TCNT1 = 0x0;
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 382:	e9 81       	ldd	r30, Y+1	; 0x01
 384:	fa 81       	ldd	r31, Y+2	; 0x02
 386:	15 82       	std	Z+5, r1	; 0x05
 388:	14 82       	std	Z+4, r1	; 0x04
    if (*queue == NULL) {
 38a:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <readyQ>
 38e:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <readyQ+0x1>
 392:	30 97       	sbiw	r30, 0x00	; 0
 394:	11 f4       	brne	.+4      	; 0x39a <spawn+0xe8>
 396:	10 c0       	rjmp	.+32     	; 0x3b8 <spawn+0x106>
        *queue = p;
    } else {
        thread q = *queue;
        while (q->next)
 398:	fc 01       	movw	r30, r24
 39a:	84 81       	ldd	r24, Z+4	; 0x04
 39c:	95 81       	ldd	r25, Z+5	; 0x05
 39e:	00 97       	sbiw	r24, 0x00	; 0
 3a0:	d9 f7       	brne	.-10     	; 0x398 <spawn+0xe6>
            q = q->next;
        q->next = p;
 3a2:	89 81       	ldd	r24, Y+1	; 0x01
 3a4:	9a 81       	ldd	r25, Y+2	; 0x02
 3a6:	95 83       	std	Z+5, r25	; 0x05
 3a8:	84 83       	std	Z+4, r24	; 0x04
        dispatch(dequeue(&readyQ));
    }
    SETSTACK(&newp->context, &newp->stack);

    enqueue(newp, &readyQ);
    ENABLE();
 3aa:	78 94       	sei
}
 3ac:	0f 90       	pop	r0
 3ae:	0f 90       	pop	r0
 3b0:	df 91       	pop	r29
 3b2:	cf 91       	pop	r28
 3b4:	08 95       	ret
 3b6:	ff cf       	rjmp	.-2      	; 0x3b6 <spawn+0x104>
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
    if (*queue == NULL) {
        *queue = p;
 3b8:	29 81       	ldd	r18, Y+1	; 0x01
 3ba:	3a 81       	ldd	r19, Y+2	; 0x02
 3bc:	30 93 1f 01 	sts	0x011F, r19	; 0x80011f <readyQ+0x1>
 3c0:	20 93 1e 01 	sts	0x011E, r18	; 0x80011e <readyQ>
        dispatch(dequeue(&readyQ));
    }
    SETSTACK(&newp->context, &newp->stack);

    enqueue(newp, &readyQ);
    ENABLE();
 3c4:	78 94       	sei
}
 3c6:	0f 90       	pop	r0
 3c8:	0f 90       	pop	r0
 3ca:	df 91       	pop	r29
 3cc:	cf 91       	pop	r28
 3ce:	08 95       	ret
    newp = dequeue(&freeQ);
    newp->function = function;
    newp->arg = arg;
    newp->next = NULL;
    if (setjmp(newp->context) == 1) {
        ENABLE();
 3d0:	78 94       	sei
        current->function(current->arg);
 3d2:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3d6:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3da:	ed 91       	ld	r30, X+
 3dc:	fc 91       	ld	r31, X
 3de:	11 97       	sbiw	r26, 0x01	; 1
 3e0:	12 96       	adiw	r26, 0x02	; 2
 3e2:	8d 91       	ld	r24, X+
 3e4:	9c 91       	ld	r25, X
 3e6:	13 97       	sbiw	r26, 0x03	; 3
 3e8:	09 95       	icall
        DISABLE();
 3ea:	f8 94       	cli
        enqueue(current, &freeQ);
 3ec:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3f0:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
	OCR1A = 8000000/(1024 * 20);
	TCNT1 = 0x0;
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 3f4:	15 96       	adiw	r26, 0x05	; 5
 3f6:	1c 92       	st	X, r1
 3f8:	1e 92       	st	-X, r1
 3fa:	14 97       	sbiw	r26, 0x04	; 4
    if (*queue == NULL) {
 3fc:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <freeQ>
 400:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <freeQ+0x1>
 404:	30 97       	sbiw	r30, 0x00	; 0
 406:	11 f4       	brne	.+4      	; 0x40c <__DATA_REGION_LENGTH__+0xc>
 408:	17 c0       	rjmp	.+46     	; 0x438 <__DATA_REGION_LENGTH__+0x38>
        *queue = p;
    } else {
        thread q = *queue;
        while (q->next)
 40a:	fc 01       	movw	r30, r24
 40c:	84 81       	ldd	r24, Z+4	; 0x04
 40e:	95 81       	ldd	r25, Z+5	; 0x05
 410:	00 97       	sbiw	r24, 0x00	; 0
 412:	d9 f7       	brne	.-10     	; 0x40a <__DATA_REGION_LENGTH__+0xa>
            q = q->next;
        q->next = p;
 414:	b5 83       	std	Z+5, r27	; 0x05
 416:	a4 83       	std	Z+4, r26	; 0x04
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 418:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <readyQ>
 41c:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <readyQ+0x1>
    if (*queue) {
 420:	00 97       	sbiw	r24, 0x00	; 0
 422:	a1 f0       	breq	.+40     	; 0x44c <__DATA_REGION_LENGTH__+0x4c>
        *queue = (*queue)->next;
 424:	fc 01       	movw	r30, r24
 426:	24 81       	ldd	r18, Z+4	; 0x04
 428:	35 81       	ldd	r19, Z+5	; 0x05
 42a:	30 93 1f 01 	sts	0x011F, r19	; 0x80011f <readyQ+0x1>
 42e:	20 93 1e 01 	sts	0x011E, r18	; 0x80011e <readyQ>
    if (setjmp(newp->context) == 1) {
        ENABLE();
        current->function(current->arg);
        DISABLE();
        enqueue(current, &freeQ);
        dispatch(dequeue(&readyQ));
 432:	0e 94 39 01 	call	0x272	; 0x272 <dispatch>
 436:	9a cf       	rjmp	.-204    	; 0x36c <spawn+0xba>
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
    if (*queue == NULL) {
        *queue = p;
 438:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <freeQ+0x1>
 43c:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <freeQ>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 440:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <readyQ>
 444:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <readyQ+0x1>
    if (*queue) {
 448:	00 97       	sbiw	r24, 0x00	; 0
 44a:	61 f7       	brne	.-40     	; 0x424 <__DATA_REGION_LENGTH__+0x24>
 44c:	ff cf       	rjmp	.-2      	; 0x44c <__DATA_REGION_LENGTH__+0x4c>

0000044e <yield>:
	yield();
}

// Change thread
void yield(void) {
	DISABLE();
 44e:	f8 94       	cli
	enqueue(current, &readyQ);
 450:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 454:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
	OCR1A = 8000000/(1024 * 20);
	TCNT1 = 0x0;
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 458:	fc 01       	movw	r30, r24
 45a:	15 82       	std	Z+5, r1	; 0x05
 45c:	14 82       	std	Z+4, r1	; 0x04
    if (*queue == NULL) {
 45e:	a0 91 1e 01 	lds	r26, 0x011E	; 0x80011e <readyQ>
 462:	b0 91 1f 01 	lds	r27, 0x011F	; 0x80011f <readyQ+0x1>
 466:	10 97       	sbiw	r26, 0x00	; 0
 468:	b9 f0       	breq	.+46     	; 0x498 <yield+0x4a>
 46a:	fd 01       	movw	r30, r26
 46c:	01 c0       	rjmp	.+2      	; 0x470 <yield+0x22>
        *queue = p;
    } else {
        thread q = *queue;
        while (q->next)
 46e:	f9 01       	movw	r30, r18
 470:	24 81       	ldd	r18, Z+4	; 0x04
 472:	35 81       	ldd	r19, Z+5	; 0x05
 474:	21 15       	cp	r18, r1
 476:	31 05       	cpc	r19, r1
 478:	d1 f7       	brne	.-12     	; 0x46e <yield+0x20>
            q = q->next;
        q->next = p;
 47a:	95 83       	std	Z+5, r25	; 0x05
 47c:	84 83       	std	Z+4, r24	; 0x04
 47e:	14 96       	adiw	r26, 0x04	; 4
 480:	2d 91       	ld	r18, X+
 482:	3c 91       	ld	r19, X
 484:	15 97       	sbiw	r26, 0x05	; 5
 486:	cd 01       	movw	r24, r26
}

static thread dequeue(thread *queue) {
    thread p = *queue;
    if (*queue) {
        *queue = (*queue)->next;
 488:	30 93 1f 01 	sts	0x011F, r19	; 0x80011f <readyQ+0x1>
 48c:	20 93 1e 01 	sts	0x011E, r18	; 0x80011e <readyQ>

// Change thread
void yield(void) {
	DISABLE();
	enqueue(current, &readyQ);
	dispatch(dequeue(&readyQ));
 490:	0e 94 39 01 	call	0x272	; 0x272 <dispatch>
	ENABLE();
 494:	78 94       	sei
}
 496:	08 95       	ret
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
    if (*queue) {
 498:	00 97       	sbiw	r24, 0x00	; 0
 49a:	09 f4       	brne	.+2      	; 0x49e <yield+0x50>
 49c:	ff cf       	rjmp	.-2      	; 0x49c <yield+0x4e>
 49e:	20 e0       	ldi	r18, 0x00	; 0
 4a0:	30 e0       	ldi	r19, 0x00	; 0
 4a2:	f2 cf       	rjmp	.-28     	; 0x488 <yield+0x3a>

000004a4 <__vector_3>:
    enqueue(newp, &readyQ);
    ENABLE();
}

// Interrupt handler for button
ISR(PCINT1_vect) {
 4a4:	1f 92       	push	r1
 4a6:	0f 92       	push	r0
 4a8:	0f b6       	in	r0, 0x3f	; 63
 4aa:	0f 92       	push	r0
 4ac:	11 24       	eor	r1, r1
 4ae:	2f 93       	push	r18
 4b0:	3f 93       	push	r19
 4b2:	4f 93       	push	r20
 4b4:	5f 93       	push	r21
 4b6:	6f 93       	push	r22
 4b8:	7f 93       	push	r23
 4ba:	8f 93       	push	r24
 4bc:	9f 93       	push	r25
 4be:	af 93       	push	r26
 4c0:	bf 93       	push	r27
 4c2:	ef 93       	push	r30
 4c4:	ff 93       	push	r31
	if (PINB >> 7 == 0) {
 4c6:	1f 9b       	sbis	0x03, 7	; 3
		yield();
 4c8:	0e 94 27 02 	call	0x44e	; 0x44e <yield>
	}
}
 4cc:	ff 91       	pop	r31
 4ce:	ef 91       	pop	r30
 4d0:	bf 91       	pop	r27
 4d2:	af 91       	pop	r26
 4d4:	9f 91       	pop	r25
 4d6:	8f 91       	pop	r24
 4d8:	7f 91       	pop	r23
 4da:	6f 91       	pop	r22
 4dc:	5f 91       	pop	r21
 4de:	4f 91       	pop	r20
 4e0:	3f 91       	pop	r19
 4e2:	2f 91       	pop	r18
 4e4:	0f 90       	pop	r0
 4e6:	0f be       	out	0x3f, r0	; 63
 4e8:	0f 90       	pop	r0
 4ea:	1f 90       	pop	r1
 4ec:	18 95       	reti

000004ee <__vector_7>:

// Should be interrupt handler for sequential interrupts
ISR(TIMER1_COMPA_vect) {
 4ee:	1f 92       	push	r1
 4f0:	0f 92       	push	r0
 4f2:	0f b6       	in	r0, 0x3f	; 63
 4f4:	0f 92       	push	r0
 4f6:	11 24       	eor	r1, r1
 4f8:	2f 93       	push	r18
 4fa:	3f 93       	push	r19
 4fc:	4f 93       	push	r20
 4fe:	5f 93       	push	r21
 500:	6f 93       	push	r22
 502:	7f 93       	push	r23
 504:	8f 93       	push	r24
 506:	9f 93       	push	r25
 508:	af 93       	push	r26
 50a:	bf 93       	push	r27
 50c:	ef 93       	push	r30
 50e:	ff 93       	push	r31
	yield();
 510:	0e 94 27 02 	call	0x44e	; 0x44e <yield>
}
 514:	ff 91       	pop	r31
 516:	ef 91       	pop	r30
 518:	bf 91       	pop	r27
 51a:	af 91       	pop	r26
 51c:	9f 91       	pop	r25
 51e:	8f 91       	pop	r24
 520:	7f 91       	pop	r23
 522:	6f 91       	pop	r22
 524:	5f 91       	pop	r21
 526:	4f 91       	pop	r20
 528:	3f 91       	pop	r19
 52a:	2f 91       	pop	r18
 52c:	0f 90       	pop	r0
 52e:	0f be       	out	0x3f, r0	; 63
 530:	0f 90       	pop	r0
 532:	1f 90       	pop	r1
 534:	18 95       	reti

00000536 <lock>:
	enqueue(current, &readyQ);
	dispatch(dequeue(&readyQ));
	ENABLE();
}

void lock(mutex *m) {
 536:	cf 93       	push	r28
 538:	df 93       	push	r29
 53a:	dc 01       	movw	r26, r24
	DISABLE();
 53c:	f8 94       	cli
	if(m->locked == 0){
 53e:	8d 91       	ld	r24, X+
 540:	9c 91       	ld	r25, X
 542:	11 97       	sbiw	r26, 0x01	; 1
 544:	89 2b       	or	r24, r25
 546:	41 f1       	breq	.+80     	; 0x598 <lock+0x62>
		m->locked = 1;
	}else{
		enqueue(current, &(m->waitQ));
 548:	c0 91 00 01 	lds	r28, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 54c:	d0 91 01 01 	lds	r29, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
	OCR1A = 8000000/(1024 * 20);
	TCNT1 = 0x0;
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 550:	1d 82       	std	Y+5, r1	; 0x05
 552:	1c 82       	std	Y+4, r1	; 0x04
    if (*queue == NULL) {
 554:	12 96       	adiw	r26, 0x02	; 2
 556:	ed 91       	ld	r30, X+
 558:	fc 91       	ld	r31, X
 55a:	13 97       	sbiw	r26, 0x03	; 3
 55c:	30 97       	sbiw	r30, 0x00	; 0
 55e:	11 f4       	brne	.+4      	; 0x564 <lock+0x2e>
 560:	23 c0       	rjmp	.+70     	; 0x5a8 <lock+0x72>
        *queue = p;
    } else {
        thread q = *queue;
        while (q->next)
 562:	fc 01       	movw	r30, r24
 564:	84 81       	ldd	r24, Z+4	; 0x04
 566:	95 81       	ldd	r25, Z+5	; 0x05
 568:	00 97       	sbiw	r24, 0x00	; 0
 56a:	d9 f7       	brne	.-10     	; 0x562 <lock+0x2c>
            q = q->next;
        q->next = p;
 56c:	d5 83       	std	Z+5, r29	; 0x05
 56e:	c4 83       	std	Z+4, r28	; 0x04
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 570:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <readyQ>
 574:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <readyQ+0x1>
    if (*queue) {
 578:	00 97       	sbiw	r24, 0x00	; 0
 57a:	69 f0       	breq	.+26     	; 0x596 <lock+0x60>
        *queue = (*queue)->next;
 57c:	fc 01       	movw	r30, r24
 57e:	24 81       	ldd	r18, Z+4	; 0x04
 580:	35 81       	ldd	r19, Z+5	; 0x05
 582:	30 93 1f 01 	sts	0x011F, r19	; 0x80011f <readyQ+0x1>
 586:	20 93 1e 01 	sts	0x011E, r18	; 0x80011e <readyQ>
	DISABLE();
	if(m->locked == 0){
		m->locked = 1;
	}else{
		enqueue(current, &(m->waitQ));
		dispatch(dequeue(&readyQ));
 58a:	0e 94 39 01 	call	0x272	; 0x272 <dispatch>
	}
	ENABLE();
 58e:	78 94       	sei
}
 590:	df 91       	pop	r29
 592:	cf 91       	pop	r28
 594:	08 95       	ret
 596:	ff cf       	rjmp	.-2      	; 0x596 <lock+0x60>
}

void lock(mutex *m) {
	DISABLE();
	if(m->locked == 0){
		m->locked = 1;
 598:	81 e0       	ldi	r24, 0x01	; 1
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	8d 93       	st	X+, r24
 59e:	9c 93       	st	X, r25
	}else{
		enqueue(current, &(m->waitQ));
		dispatch(dequeue(&readyQ));
	}
	ENABLE();
 5a0:	78 94       	sei
}
 5a2:	df 91       	pop	r29
 5a4:	cf 91       	pop	r28
 5a6:	08 95       	ret
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
    if (*queue == NULL) {
        *queue = p;
 5a8:	13 96       	adiw	r26, 0x03	; 3
 5aa:	dc 93       	st	X, r29
 5ac:	ce 93       	st	-X, r28
 5ae:	12 97       	sbiw	r26, 0x02	; 2
 5b0:	df cf       	rjmp	.-66     	; 0x570 <lock+0x3a>

000005b2 <unlock>:
		dispatch(dequeue(&readyQ));
	}
	ENABLE();
}

void unlock(mutex *m) {
 5b2:	cf 93       	push	r28
 5b4:	df 93       	push	r29
 5b6:	fc 01       	movw	r30, r24
	DISABLE();
 5b8:	f8 94       	cli
	if(m->waitQ != NULL){
 5ba:	82 81       	ldd	r24, Z+2	; 0x02
 5bc:	93 81       	ldd	r25, Z+3	; 0x03
 5be:	89 2b       	or	r24, r25
 5c0:	51 f1       	breq	.+84     	; 0x616 <unlock+0x64>
		enqueue(current, &readyQ);
 5c2:	c0 91 00 01 	lds	r28, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 5c6:	d0 91 01 01 	lds	r29, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
	OCR1A = 8000000/(1024 * 20);
	TCNT1 = 0x0;
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 5ca:	1d 82       	std	Y+5, r1	; 0x05
 5cc:	1c 82       	std	Y+4, r1	; 0x04
    if (*queue == NULL) {
 5ce:	a0 91 1e 01 	lds	r26, 0x011E	; 0x80011e <readyQ>
 5d2:	b0 91 1f 01 	lds	r27, 0x011F	; 0x80011f <readyQ+0x1>
 5d6:	10 97       	sbiw	r26, 0x00	; 0
 5d8:	11 f4       	brne	.+4      	; 0x5de <unlock+0x2c>
 5da:	23 c0       	rjmp	.+70     	; 0x622 <unlock+0x70>
        *queue = p;
    } else {
        thread q = *queue;
        while (q->next)
 5dc:	dc 01       	movw	r26, r24
 5de:	14 96       	adiw	r26, 0x04	; 4
 5e0:	8d 91       	ld	r24, X+
 5e2:	9c 91       	ld	r25, X
 5e4:	15 97       	sbiw	r26, 0x05	; 5
 5e6:	00 97       	sbiw	r24, 0x00	; 0
 5e8:	c9 f7       	brne	.-14     	; 0x5dc <unlock+0x2a>
            q = q->next;
        q->next = p;
 5ea:	15 96       	adiw	r26, 0x05	; 5
 5ec:	dc 93       	st	X, r29
 5ee:	ce 93       	st	-X, r28
 5f0:	14 97       	sbiw	r26, 0x04	; 4
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 5f2:	82 81       	ldd	r24, Z+2	; 0x02
 5f4:	93 81       	ldd	r25, Z+3	; 0x03
    if (*queue) {
 5f6:	00 97       	sbiw	r24, 0x00	; 0
 5f8:	69 f0       	breq	.+26     	; 0x614 <unlock+0x62>
        *queue = (*queue)->next;
 5fa:	dc 01       	movw	r26, r24
 5fc:	14 96       	adiw	r26, 0x04	; 4
 5fe:	2d 91       	ld	r18, X+
 600:	3c 91       	ld	r19, X
 602:	15 97       	sbiw	r26, 0x05	; 5
 604:	33 83       	std	Z+3, r19	; 0x03
 606:	22 83       	std	Z+2, r18	; 0x02

void unlock(mutex *m) {
	DISABLE();
	if(m->waitQ != NULL){
		enqueue(current, &readyQ);
		dispatch(dequeue(&(m->waitQ)));
 608:	0e 94 39 01 	call	0x272	; 0x272 <dispatch>
	}else{
		m->locked = 0;
	}
	
	ENABLE();
 60c:	78 94       	sei
}
 60e:	df 91       	pop	r29
 610:	cf 91       	pop	r28
 612:	08 95       	ret
 614:	ff cf       	rjmp	.-2      	; 0x614 <unlock+0x62>
	DISABLE();
	if(m->waitQ != NULL){
		enqueue(current, &readyQ);
		dispatch(dequeue(&(m->waitQ)));
	}else{
		m->locked = 0;
 616:	11 82       	std	Z+1, r1	; 0x01
 618:	10 82       	st	Z, r1
	}
	
	ENABLE();
 61a:	78 94       	sei
}
 61c:	df 91       	pop	r29
 61e:	cf 91       	pop	r28
 620:	08 95       	ret
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
    if (*queue == NULL) {
        *queue = p;
 622:	d0 93 1f 01 	sts	0x011F, r29	; 0x80011f <readyQ+0x1>
 626:	c0 93 1e 01 	sts	0x011E, r28	; 0x80011e <readyQ>
 62a:	e3 cf       	rjmp	.-58     	; 0x5f2 <unlock+0x40>

0000062c <__divmodsi4>:
 62c:	05 2e       	mov	r0, r21
 62e:	97 fb       	bst	r25, 7
 630:	1e f4       	brtc	.+6      	; 0x638 <__divmodsi4+0xc>
 632:	00 94       	com	r0
 634:	0e 94 2d 03 	call	0x65a	; 0x65a <__negsi2>
 638:	57 fd       	sbrc	r21, 7
 63a:	07 d0       	rcall	.+14     	; 0x64a <__divmodsi4_neg2>
 63c:	0e 94 35 03 	call	0x66a	; 0x66a <__udivmodsi4>
 640:	07 fc       	sbrc	r0, 7
 642:	03 d0       	rcall	.+6      	; 0x64a <__divmodsi4_neg2>
 644:	4e f4       	brtc	.+18     	; 0x658 <__divmodsi4_exit>
 646:	0c 94 2d 03 	jmp	0x65a	; 0x65a <__negsi2>

0000064a <__divmodsi4_neg2>:
 64a:	50 95       	com	r21
 64c:	40 95       	com	r20
 64e:	30 95       	com	r19
 650:	21 95       	neg	r18
 652:	3f 4f       	sbci	r19, 0xFF	; 255
 654:	4f 4f       	sbci	r20, 0xFF	; 255
 656:	5f 4f       	sbci	r21, 0xFF	; 255

00000658 <__divmodsi4_exit>:
 658:	08 95       	ret

0000065a <__negsi2>:
 65a:	90 95       	com	r25
 65c:	80 95       	com	r24
 65e:	70 95       	com	r23
 660:	61 95       	neg	r22
 662:	7f 4f       	sbci	r23, 0xFF	; 255
 664:	8f 4f       	sbci	r24, 0xFF	; 255
 666:	9f 4f       	sbci	r25, 0xFF	; 255
 668:	08 95       	ret

0000066a <__udivmodsi4>:
 66a:	a1 e2       	ldi	r26, 0x21	; 33
 66c:	1a 2e       	mov	r1, r26
 66e:	aa 1b       	sub	r26, r26
 670:	bb 1b       	sub	r27, r27
 672:	fd 01       	movw	r30, r26
 674:	0d c0       	rjmp	.+26     	; 0x690 <__udivmodsi4_ep>

00000676 <__udivmodsi4_loop>:
 676:	aa 1f       	adc	r26, r26
 678:	bb 1f       	adc	r27, r27
 67a:	ee 1f       	adc	r30, r30
 67c:	ff 1f       	adc	r31, r31
 67e:	a2 17       	cp	r26, r18
 680:	b3 07       	cpc	r27, r19
 682:	e4 07       	cpc	r30, r20
 684:	f5 07       	cpc	r31, r21
 686:	20 f0       	brcs	.+8      	; 0x690 <__udivmodsi4_ep>
 688:	a2 1b       	sub	r26, r18
 68a:	b3 0b       	sbc	r27, r19
 68c:	e4 0b       	sbc	r30, r20
 68e:	f5 0b       	sbc	r31, r21

00000690 <__udivmodsi4_ep>:
 690:	66 1f       	adc	r22, r22
 692:	77 1f       	adc	r23, r23
 694:	88 1f       	adc	r24, r24
 696:	99 1f       	adc	r25, r25
 698:	1a 94       	dec	r1
 69a:	69 f7       	brne	.-38     	; 0x676 <__udivmodsi4_loop>
 69c:	60 95       	com	r22
 69e:	70 95       	com	r23
 6a0:	80 95       	com	r24
 6a2:	90 95       	com	r25
 6a4:	9b 01       	movw	r18, r22
 6a6:	ac 01       	movw	r20, r24
 6a8:	bd 01       	movw	r22, r26
 6aa:	cf 01       	movw	r24, r30
 6ac:	08 95       	ret

000006ae <setjmp>:
 6ae:	dc 01       	movw	r26, r24
 6b0:	2d 92       	st	X+, r2
 6b2:	3d 92       	st	X+, r3
 6b4:	4d 92       	st	X+, r4
 6b6:	5d 92       	st	X+, r5
 6b8:	6d 92       	st	X+, r6
 6ba:	7d 92       	st	X+, r7
 6bc:	8d 92       	st	X+, r8
 6be:	9d 92       	st	X+, r9
 6c0:	ad 92       	st	X+, r10
 6c2:	bd 92       	st	X+, r11
 6c4:	cd 92       	st	X+, r12
 6c6:	dd 92       	st	X+, r13
 6c8:	ed 92       	st	X+, r14
 6ca:	fd 92       	st	X+, r15
 6cc:	0d 93       	st	X+, r16
 6ce:	1d 93       	st	X+, r17
 6d0:	cd 93       	st	X+, r28
 6d2:	dd 93       	st	X+, r29
 6d4:	ff 91       	pop	r31
 6d6:	ef 91       	pop	r30
 6d8:	8d b7       	in	r24, 0x3d	; 61
 6da:	8d 93       	st	X+, r24
 6dc:	8e b7       	in	r24, 0x3e	; 62
 6de:	8d 93       	st	X+, r24
 6e0:	8f b7       	in	r24, 0x3f	; 63
 6e2:	8d 93       	st	X+, r24
 6e4:	ed 93       	st	X+, r30
 6e6:	fd 93       	st	X+, r31
 6e8:	88 27       	eor	r24, r24
 6ea:	99 27       	eor	r25, r25
 6ec:	09 94       	ijmp

000006ee <longjmp>:
 6ee:	dc 01       	movw	r26, r24
 6f0:	cb 01       	movw	r24, r22
 6f2:	81 30       	cpi	r24, 0x01	; 1
 6f4:	91 05       	cpc	r25, r1
 6f6:	81 1d       	adc	r24, r1
 6f8:	2d 90       	ld	r2, X+
 6fa:	3d 90       	ld	r3, X+
 6fc:	4d 90       	ld	r4, X+
 6fe:	5d 90       	ld	r5, X+
 700:	6d 90       	ld	r6, X+
 702:	7d 90       	ld	r7, X+
 704:	8d 90       	ld	r8, X+
 706:	9d 90       	ld	r9, X+
 708:	ad 90       	ld	r10, X+
 70a:	bd 90       	ld	r11, X+
 70c:	cd 90       	ld	r12, X+
 70e:	dd 90       	ld	r13, X+
 710:	ed 90       	ld	r14, X+
 712:	fd 90       	ld	r15, X+
 714:	0d 91       	ld	r16, X+
 716:	1d 91       	ld	r17, X+
 718:	cd 91       	ld	r28, X+
 71a:	dd 91       	ld	r29, X+
 71c:	ed 91       	ld	r30, X+
 71e:	fd 91       	ld	r31, X+
 720:	0d 90       	ld	r0, X+
 722:	f8 94       	cli
 724:	fe bf       	out	0x3e, r31	; 62
 726:	0f be       	out	0x3f, r0	; 63
 728:	ed bf       	out	0x3d, r30	; 61
 72a:	ed 91       	ld	r30, X+
 72c:	fd 91       	ld	r31, X+
 72e:	09 94       	ijmp

00000730 <_exit>:
 730:	f8 94       	cli

00000732 <__stop_program>:
 732:	ff cf       	rjmp	.-2      	; 0x732 <__stop_program>
