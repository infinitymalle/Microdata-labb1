
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000604  00000698  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000604  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000225  00800118  00800118  000006b0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006b0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  00000720  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001017  00000000  00000000  000007a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b69  00000000  00000000  000017bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005a4  00000000  00000000  00002328  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000214  00000000  00000000  000028cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000056b  00000000  00000000  00002ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008ae  00000000  00000000  0000304b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  000038f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 5a 02 	jmp	0x4b4	; 0x4b4 <__vector_3>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 35 02 	jmp	0x46a	; 0x46a <__vector_7>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	e4 e0       	ldi	r30, 0x04	; 4
  70:	f6 e0       	ldi	r31, 0x06	; 6
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	a8 31       	cpi	r26, 0x18	; 24
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
  7e:	23 e0       	ldi	r18, 0x03	; 3
  80:	a8 e1       	ldi	r26, 0x18	; 24
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	ad 33       	cpi	r26, 0x3D	; 61
  8a:	b2 07       	cpc	r27, r18
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 08 01 	call	0x210	; 0x210 <main>
  92:	0c 94 00 03 	jmp	0x600	; 0x600 <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <writeChar>:
    spawn(computePrimes, 0);
    computePrimes(3);
}

void writeChar(char ch, int pos)
{
  9a:	cf 93       	push	r28
  9c:	df 93       	push	r29
  9e:	cd b7       	in	r28, 0x3d	; 61
  a0:	de b7       	in	r29, 0x3e	; 62
  a2:	64 97       	sbiw	r28, 0x14	; 20
  a4:	0f b6       	in	r0, 0x3f	; 63
  a6:	f8 94       	cli
  a8:	de bf       	out	0x3e, r29	; 62
  aa:	0f be       	out	0x3f, r0	; 63
  ac:	cd bf       	out	0x3d, r28	; 61
	// All the numbers
	// 0 - 0x1551, 1 - 0x0110, 2 - 0x1E11, 3 - 0x1B11, 4 - 0x0B50, 5 - 0x1B41, 6 - 0x1F41, 7 - 0x0111, 8 - 0x1F51, 9 - 0x0B51
	uint16_t scc[] = {0x1551, 0x0110, 0x1E11, 0x1B11, 0x0B50, 0x1B41, 0x1F41, 0x0111, 0x1F51, 0x0B51};
  ae:	94 e1       	ldi	r25, 0x14	; 20
  b0:	e4 e0       	ldi	r30, 0x04	; 4
  b2:	f1 e0       	ldi	r31, 0x01	; 1
  b4:	de 01       	movw	r26, r28
  b6:	11 96       	adiw	r26, 0x01	; 1
  b8:	01 90       	ld	r0, Z+
  ba:	0d 92       	st	X+, r0
  bc:	9a 95       	dec	r25
  be:	e1 f7       	brne	.-8      	; 0xb8 <writeChar+0x1e>
	
	if(pos >= 0 && pos <= 5){
  c0:	66 30       	cpi	r22, 0x06	; 6
  c2:	71 05       	cpc	r23, r1
  c4:	50 f5       	brcc	.+84     	; 0x11a <writeChar+0x80>
		if (ch >= '0' || ch <= '9'){
			int lr;
			int pair = pos / 2;					      // Make sure it's either pair 0,1 - 2,3 or 4,5
			uint8_t *lcddr = (uint8_t *) 0xEC + pair; // Point to register position 0xEC which is LCDDR0 and add pair to get LCDDR0, LCDDR1 or LCDDR2
  c6:	fb 01       	movw	r30, r22
  c8:	f5 95       	asr	r31
  ca:	e7 95       	ror	r30
  cc:	e4 51       	subi	r30, 0x14	; 20
  ce:	ff 4f       	sbci	r31, 0xFF	; 255
			uint16_t num = scc[ch - '0'];			  // Get the hexadecimal number from the list
  d0:	a8 2f       	mov	r26, r24
  d2:	b0 e0       	ldi	r27, 0x00	; 0
  d4:	d0 97       	sbiw	r26, 0x30	; 48
  d6:	aa 0f       	add	r26, r26
  d8:	bb 1f       	adc	r27, r27
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	8c 0f       	add	r24, r28
  e0:	9d 1f       	adc	r25, r29
  e2:	a8 0f       	add	r26, r24
  e4:	b9 1f       	adc	r27, r25
  e6:	4d 91       	ld	r20, X+
  e8:	5c 91       	ld	r21, X
  ea:	61 70       	andi	r22, 0x01	; 1
  ec:	77 27       	eor	r23, r23
  ee:	df 01       	movw	r26, r30
  f0:	54 96       	adiw	r26, 0x14	; 20

			for (int i = 0; i <= 3; i++) {			  // Loop through every number in the hexadecimal number
				int nibble = num & 0xF;				  // Get the least significant number in the hex
  f2:	ca 01       	movw	r24, r20
  f4:	8f 70       	andi	r24, 0x0F	; 15
  f6:	99 27       	eor	r25, r25
				
				if(pos % 2 == 1) {				      // Check if the nibble parts should be in the left or right number in the pair
  f8:	61 30       	cpi	r22, 0x01	; 1
  fa:	71 05       	cpc	r23, r1
  fc:	b9 f0       	breq	.+46     	; 0x12c <writeChar+0x92>
					nibble *= 0x10;					  // If pos % 2 == 1 -> nibble will load in right digit
					*lcddr = *lcddr & 0xF;
				}
				
				else {
					*lcddr = *lcddr & 0xF0;
  fe:	20 81       	ld	r18, Z
 100:	20 7f       	andi	r18, 0xF0	; 240
				}
				
				*lcddr = *lcddr | nibble;			  // Write the nibble to the digit
 102:	82 2b       	or	r24, r18
 104:	80 83       	st	Z, r24
				lcddr += 5;							  // Go to LCDDRx + 5
 106:	35 96       	adiw	r30, 0x05	; 5
				num /= 0x10;						  // Next nibble
 108:	52 95       	swap	r21
 10a:	42 95       	swap	r20
 10c:	4f 70       	andi	r20, 0x0F	; 15
 10e:	45 27       	eor	r20, r21
 110:	5f 70       	andi	r21, 0x0F	; 15
 112:	45 27       	eor	r20, r21
			int lr;
			int pair = pos / 2;					      // Make sure it's either pair 0,1 - 2,3 or 4,5
			uint8_t *lcddr = (uint8_t *) 0xEC + pair; // Point to register position 0xEC which is LCDDR0 and add pair to get LCDDR0, LCDDR1 or LCDDR2
			uint16_t num = scc[ch - '0'];			  // Get the hexadecimal number from the list

			for (int i = 0; i <= 3; i++) {			  // Loop through every number in the hexadecimal number
 114:	ea 17       	cp	r30, r26
 116:	fb 07       	cpc	r31, r27
 118:	61 f7       	brne	.-40     	; 0xf2 <writeChar+0x58>
				lcddr += 5;							  // Go to LCDDRx + 5
				num /= 0x10;						  // Next nibble
			}
		}
	}
}
 11a:	64 96       	adiw	r28, 0x14	; 20
 11c:	0f b6       	in	r0, 0x3f	; 63
 11e:	f8 94       	cli
 120:	de bf       	out	0x3e, r29	; 62
 122:	0f be       	out	0x3f, r0	; 63
 124:	cd bf       	out	0x3d, r28	; 61
 126:	df 91       	pop	r29
 128:	cf 91       	pop	r28
 12a:	08 95       	ret

			for (int i = 0; i <= 3; i++) {			  // Loop through every number in the hexadecimal number
				int nibble = num & 0xF;				  // Get the least significant number in the hex
				
				if(pos % 2 == 1) {				      // Check if the nibble parts should be in the left or right number in the pair
					nibble *= 0x10;					  // If pos % 2 == 1 -> nibble will load in right digit
 12c:	82 95       	swap	r24
 12e:	92 95       	swap	r25
 130:	90 7f       	andi	r25, 0xF0	; 240
 132:	98 27       	eor	r25, r24
 134:	80 7f       	andi	r24, 0xF0	; 240
 136:	98 27       	eor	r25, r24
					*lcddr = *lcddr & 0xF;
 138:	20 81       	ld	r18, Z
 13a:	2f 70       	andi	r18, 0x0F	; 15
 13c:	e2 cf       	rjmp	.-60     	; 0x102 <writeChar+0x68>

0000013e <printAt>:
	//PCMSK1 = 0x80;
	//EIMSK = 0x80;
	//PORTB = 0x80;
}
	
void printAt(long num, int pos) {
 13e:	8f 92       	push	r8
 140:	9f 92       	push	r9
 142:	af 92       	push	r10
 144:	bf 92       	push	r11
 146:	cf 92       	push	r12
 148:	df 92       	push	r13
 14a:	ef 92       	push	r14
 14c:	ff 92       	push	r15
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29
 152:	4b 01       	movw	r8, r22
 154:	5c 01       	movw	r10, r24
 156:	ea 01       	movw	r28, r20
    int pp = pos;
    writeChar( (num % 100) / 10 + '0', pp);
 158:	24 e6       	ldi	r18, 0x64	; 100
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	40 e0       	ldi	r20, 0x00	; 0
 15e:	50 e0       	ldi	r21, 0x00	; 0
 160:	0e 94 7e 02 	call	0x4fc	; 0x4fc <__divmodsi4>
 164:	2a e0       	ldi	r18, 0x0A	; 10
 166:	c2 2e       	mov	r12, r18
 168:	d1 2c       	mov	r13, r1
 16a:	e1 2c       	mov	r14, r1
 16c:	f1 2c       	mov	r15, r1
 16e:	a7 01       	movw	r20, r14
 170:	96 01       	movw	r18, r12
 172:	0e 94 7e 02 	call	0x4fc	; 0x4fc <__divmodsi4>
 176:	be 01       	movw	r22, r28
 178:	80 e3       	ldi	r24, 0x30	; 48
 17a:	82 0f       	add	r24, r18
 17c:	0e 94 4d 00 	call	0x9a	; 0x9a <writeChar>
    pp++;
    writeChar( num % 10 + '0', pp);
 180:	21 96       	adiw	r28, 0x01	; 1
 182:	c5 01       	movw	r24, r10
 184:	b4 01       	movw	r22, r8
 186:	a7 01       	movw	r20, r14
 188:	96 01       	movw	r18, r12
 18a:	0e 94 7e 02 	call	0x4fc	; 0x4fc <__divmodsi4>
 18e:	86 2f       	mov	r24, r22
 190:	be 01       	movw	r22, r28
 192:	80 5d       	subi	r24, 0xD0	; 208
	//yield();
}
 194:	df 91       	pop	r29
 196:	cf 91       	pop	r28
 198:	ff 90       	pop	r15
 19a:	ef 90       	pop	r14
 19c:	df 90       	pop	r13
 19e:	cf 90       	pop	r12
 1a0:	bf 90       	pop	r11
 1a2:	af 90       	pop	r10
 1a4:	9f 90       	pop	r9
 1a6:	8f 90       	pop	r8
	
void printAt(long num, int pos) {
    int pp = pos;
    writeChar( (num % 100) / 10 + '0', pp);
    pp++;
    writeChar( num % 10 + '0', pp);
 1a8:	0c 94 4d 00 	jmp	0x9a	; 0x9a <writeChar>

000001ac <computePrimes>:
	//yield();
}

void computePrimes(int pos) {
 1ac:	ec 01       	movw	r28, r24
    long n;

    for(n = 1; ; n++) {
 1ae:	81 2c       	mov	r8, r1
 1b0:	91 2c       	mov	r9, r1
 1b2:	54 01       	movw	r10, r8
 1b4:	83 94       	inc	r8
			}
		}
	}
}
bool is_prime(long i){
	for(int n = 2; n < i; n++){
 1b6:	83 e0       	ldi	r24, 0x03	; 3
 1b8:	88 16       	cp	r8, r24
 1ba:	91 04       	cpc	r9, r1
 1bc:	a1 04       	cpc	r10, r1
 1be:	b1 04       	cpc	r11, r1
 1c0:	e4 f0       	brlt	.+56     	; 0x1fa <computePrimes+0x4e>
		if(i % n == 0){
 1c2:	80 fe       	sbrs	r8, 0
 1c4:	1f c0       	rjmp	.+62     	; 0x204 <__EEPROM_REGION_LENGTH__+0x4>
 1c6:	83 e0       	ldi	r24, 0x03	; 3
 1c8:	c8 2e       	mov	r12, r24
 1ca:	d1 2c       	mov	r13, r1
 1cc:	e1 2c       	mov	r14, r1
 1ce:	f1 2c       	mov	r15, r1
 1d0:	0d c0       	rjmp	.+26     	; 0x1ec <computePrimes+0x40>
 1d2:	8f ef       	ldi	r24, 0xFF	; 255
 1d4:	c8 1a       	sub	r12, r24
 1d6:	d8 0a       	sbc	r13, r24
 1d8:	e8 0a       	sbc	r14, r24
 1da:	f8 0a       	sbc	r15, r24
 1dc:	c5 01       	movw	r24, r10
 1de:	b4 01       	movw	r22, r8
 1e0:	0e 94 7e 02 	call	0x4fc	; 0x4fc <__divmodsi4>
 1e4:	67 2b       	or	r22, r23
 1e6:	68 2b       	or	r22, r24
 1e8:	69 2b       	or	r22, r25
 1ea:	61 f0       	breq	.+24     	; 0x204 <__EEPROM_REGION_LENGTH__+0x4>
			}
		}
	}
}
bool is_prime(long i){
	for(int n = 2; n < i; n++){
 1ec:	96 01       	movw	r18, r12
 1ee:	a7 01       	movw	r20, r14
 1f0:	c8 14       	cp	r12, r8
 1f2:	d9 04       	cpc	r13, r9
 1f4:	ea 04       	cpc	r14, r10
 1f6:	fb 04       	cpc	r15, r11
 1f8:	61 f7       	brne	.-40     	; 0x1d2 <computePrimes+0x26>
void computePrimes(int pos) {
    long n;

    for(n = 1; ; n++) {
        if (is_prime(n)) {
            printAt(n, pos);
 1fa:	ae 01       	movw	r20, r28
 1fc:	c5 01       	movw	r24, r10
 1fe:	b4 01       	movw	r22, r8
 200:	0e 94 9f 00 	call	0x13e	; 0x13e <printAt>
}

void computePrimes(int pos) {
    long n;

    for(n = 1; ; n++) {
 204:	8f ef       	ldi	r24, 0xFF	; 255
 206:	88 1a       	sub	r8, r24
 208:	98 0a       	sbc	r9, r24
 20a:	a8 0a       	sbc	r10, r24
 20c:	b8 0a       	sbc	r11, r24
        if (is_prime(n)) {
            printAt(n, pos);
        }
    }
 20e:	d3 cf       	rjmp	.-90     	; 0x1b6 <computePrimes+0xa>

00000210 <main>:
		LCDCS    - Asynchronous clock source
		LCDMUX's - Duty = 1/4, Bias = 1/3
		LCDPM's  - Number of Segments = 25
	*/
	
	LCDCRB = (1 << LCDCS) | (1 << LCDMUX1) | (1 << LCDMUX0) | (1 << LCDPM2) | (1 << LCDPM1) | (1 << LCDPM0);
 210:	87 eb       	ldi	r24, 0xB7	; 183
 212:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
	/*
		LCD Frame Rate Register:
		LCDCD's - Prescaler setting N = 16
	*/
	
	LCDFRR = (1 << LCDCD2) | (1 << LCDCD1) | (1 << LCDCD0);
 216:	87 e0       	ldi	r24, 0x07	; 7
 218:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>
		LCD Contrast Control Register
		None of the LCDDC's used = 300 microseconds
		LCDCC's = 3,35V
	*/
	
	LCDCCR = (1 << LCDCC3) | (1 << LCDCC2) | (1 << LCDCC1) | (1 << LCDCC0);
 21c:	8f e0       	ldi	r24, 0x0F	; 15
 21e:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
	
	/*
		LCDEN = LCD Enabled
		LCDAB = Low Power Waveform
	*/
	LCDCRA = (1 << LCDEN) | (1 << LCDAB);
 222:	80 ec       	ldi	r24, 0xC0	; 192
 224:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
    }
}

int main() {
	LCD_Init();
    spawn(computePrimes, 0);
 228:	60 e0       	ldi	r22, 0x00	; 0
 22a:	70 e0       	ldi	r23, 0x00	; 0
 22c:	86 ed       	ldi	r24, 0xD6	; 214
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	0e 94 3e 01 	call	0x27c	; 0x27c <spawn>
    computePrimes(3);
 234:	83 e0       	ldi	r24, 0x03	; 3
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	0e 94 d6 00 	call	0x1ac	; 0x1ac <computePrimes>

0000023c <dispatch>:
        while (1) ;  // not much else to do...
    }
    return p;
}

static void dispatch(thread next) {
 23c:	cf 93       	push	r28
 23e:	df 93       	push	r29
 240:	00 d0       	rcall	.+0      	; 0x242 <dispatch+0x6>
 242:	cd b7       	in	r28, 0x3d	; 61
 244:	de b7       	in	r29, 0x3e	; 62
 246:	9a 83       	std	Y+2, r25	; 0x02
 248:	89 83       	std	Y+1, r24	; 0x01
    if (setjmp(current->context) == 0) {
 24a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 24e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 252:	06 96       	adiw	r24, 0x06	; 6
 254:	0e 94 bf 02 	call	0x57e	; 0x57e <setjmp>
 258:	89 2b       	or	r24, r25
 25a:	29 f0       	breq	.+10     	; 0x266 <dispatch+0x2a>
        current = next;
        longjmp(next->context,1);
    }
}
 25c:	0f 90       	pop	r0
 25e:	0f 90       	pop	r0
 260:	df 91       	pop	r29
 262:	cf 91       	pop	r28
 264:	08 95       	ret
    return p;
}

static void dispatch(thread next) {
    if (setjmp(current->context) == 0) {
        current = next;
 266:	89 81       	ldd	r24, Y+1	; 0x01
 268:	9a 81       	ldd	r25, Y+2	; 0x02
 26a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 26e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
        longjmp(next->context,1);
 272:	61 e0       	ldi	r22, 0x01	; 1
 274:	70 e0       	ldi	r23, 0x00	; 0
 276:	06 96       	adiw	r24, 0x06	; 6
 278:	0e 94 df 02 	call	0x5be	; 0x5be <longjmp>

0000027c <spawn>:
    }
}

void spawn(void (* function)(int), int arg) {
 27c:	cf 93       	push	r28
 27e:	df 93       	push	r29
 280:	00 d0       	rcall	.+0      	; 0x282 <spawn+0x6>
 282:	cd b7       	in	r28, 0x3d	; 61
 284:	de b7       	in	r29, 0x3e	; 62
 286:	ac 01       	movw	r20, r24
    thread newp;

    DISABLE();
 288:	f8 94       	cli
    if (!initialized) initialize();
 28a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 28e:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <__data_end+0x1>
 292:	89 2b       	or	r24, r25
 294:	89 f5       	brne	.+98     	; 0x2f8 <spawn+0x7c>
int initialized = 0;

static void initialize(void) {
    int i;
    for (i=0; i<NTHREADS-1; i++)
        threads[i].next = &threads[i+1];
 296:	86 ef       	ldi	r24, 0xF6	; 246
 298:	91 e0       	ldi	r25, 0x01	; 1
 29a:	90 93 8e 01 	sts	0x018E, r25	; 0x80018e <threads+0x5>
 29e:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <threads+0x4>
 2a2:	83 e6       	ldi	r24, 0x63	; 99
 2a4:	92 e0       	ldi	r25, 0x02	; 2
 2a6:	90 93 fb 01 	sts	0x01FB, r25	; 0x8001fb <threads+0x72>
 2aa:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <threads+0x71>
 2ae:	80 ed       	ldi	r24, 0xD0	; 208
 2b0:	92 e0       	ldi	r25, 0x02	; 2
 2b2:	90 93 68 02 	sts	0x0268, r25	; 0x800268 <threads+0xdf>
 2b6:	80 93 67 02 	sts	0x0267, r24	; 0x800267 <threads+0xde>
    threads[NTHREADS-1].next = NULL;
 2ba:	10 92 d5 02 	sts	0x02D5, r1	; 0x8002d5 <threads+0x14c>
 2be:	10 92 d4 02 	sts	0x02D4, r1	; 0x8002d4 <threads+0x14b>


    initialized = 1;
 2c2:	81 e0       	ldi	r24, 0x01	; 1
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <__data_end+0x1>
 2ca:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
	PCMSK1 = (PCINT15 >> 1);
 2ce:	93 e0       	ldi	r25, 0x03	; 3
 2d0:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <__TEXT_REGION_LENGTH__+0x7fc06c>
	EIMSK = (PCIE1 >> 1);
 2d4:	9d bb       	out	0x1d, r25	; 29
	PORTB = (PB7 >> 1) | (PB4 >> 1) ;
 2d6:	95 b9       	out	0x05, r25	; 5
	TCCR1A = (COM1A1 >> 1) | (COM1A0 >> 1);
 2d8:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x7fc080>
	TCCR1B = (WGM12 >> 1) | (CS12 >> 1) | (CS10 >> 1);
 2dc:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
	TIMSK1 = (OCIE1A >> 1);
 2e0:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
	
	OCR1A = 8000000/(1024);
 2e4:	84 e8       	ldi	r24, 0x84	; 132
 2e6:	9e e1       	ldi	r25, 0x1E	; 30
 2e8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
 2ec:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
	TCNT1 = 0x0;
 2f0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
 2f4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 2f8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <freeQ>
 2fc:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <freeQ+0x1>
 300:	9a 83       	std	Y+2, r25	; 0x02
 302:	89 83       	std	Y+1, r24	; 0x01
    if (*queue) {
 304:	00 97       	sbiw	r24, 0x00	; 0
 306:	c1 f1       	breq	.+112    	; 0x378 <spawn+0xfc>
        *queue = (*queue)->next;
 308:	fc 01       	movw	r30, r24
 30a:	84 81       	ldd	r24, Z+4	; 0x04
 30c:	95 81       	ldd	r25, Z+5	; 0x05
 30e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <freeQ+0x1>
 312:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <freeQ>

    DISABLE();
    if (!initialized) initialize();

    newp = dequeue(&freeQ);
    newp->function = function;
 316:	51 83       	std	Z+1, r21	; 0x01
 318:	40 83       	st	Z, r20
    newp->arg = arg;
 31a:	73 83       	std	Z+3, r23	; 0x03
 31c:	62 83       	std	Z+2, r22	; 0x02
    newp->next = NULL;
 31e:	15 82       	std	Z+5, r1	; 0x05
 320:	14 82       	std	Z+4, r1	; 0x04
    if (setjmp(newp->context) == 1) {
 322:	cf 01       	movw	r24, r30
 324:	06 96       	adiw	r24, 0x06	; 6
 326:	0e 94 bf 02 	call	0x57e	; 0x57e <setjmp>
 32a:	01 97       	sbiw	r24, 0x01	; 1
 32c:	91 f1       	breq	.+100    	; 0x392 <spawn+0x116>
        current->function(current->arg);
        DISABLE();
        enqueue(current, &freeQ);
        dispatch(dequeue(&readyQ));
    }
    SETSTACK(&newp->context, &newp->stack);
 32e:	e9 81       	ldd	r30, Y+1	; 0x01
 330:	fa 81       	ldd	r31, Y+2	; 0x02
 332:	36 96       	adiw	r30, 0x06	; 6
 334:	89 81       	ldd	r24, Y+1	; 0x01
 336:	9a 81       	ldd	r25, Y+2	; 0x02
 338:	87 59       	subi	r24, 0x97	; 151
 33a:	9f 4f       	sbci	r25, 0xFF	; 255
 33c:	91 8b       	std	Z+17, r25	; 0x11
 33e:	80 8b       	std	Z+16, r24	; 0x10
 340:	93 8b       	std	Z+19, r25	; 0x13
 342:	82 8b       	std	Z+18, r24	; 0x12
	TCNT1 = 0x0;
	
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 344:	e9 81       	ldd	r30, Y+1	; 0x01
 346:	fa 81       	ldd	r31, Y+2	; 0x02
 348:	15 82       	std	Z+5, r1	; 0x05
 34a:	14 82       	std	Z+4, r1	; 0x04
    if (*queue == NULL) {
 34c:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <readyQ>
 350:	f0 91 1b 01 	lds	r31, 0x011B	; 0x80011b <readyQ+0x1>
 354:	30 97       	sbiw	r30, 0x00	; 0
 356:	11 f4       	brne	.+4      	; 0x35c <spawn+0xe0>
 358:	10 c0       	rjmp	.+32     	; 0x37a <spawn+0xfe>
        *queue = p;
    } else {
        thread q = *queue;
        while (q->next)
 35a:	fc 01       	movw	r30, r24
 35c:	84 81       	ldd	r24, Z+4	; 0x04
 35e:	95 81       	ldd	r25, Z+5	; 0x05
 360:	00 97       	sbiw	r24, 0x00	; 0
 362:	d9 f7       	brne	.-10     	; 0x35a <spawn+0xde>
            q = q->next;
        q->next = p;
 364:	89 81       	ldd	r24, Y+1	; 0x01
 366:	9a 81       	ldd	r25, Y+2	; 0x02
 368:	95 83       	std	Z+5, r25	; 0x05
 36a:	84 83       	std	Z+4, r24	; 0x04
        dispatch(dequeue(&readyQ));
    }
    SETSTACK(&newp->context, &newp->stack);

    enqueue(newp, &readyQ);
    ENABLE();
 36c:	78 94       	sei
}
 36e:	0f 90       	pop	r0
 370:	0f 90       	pop	r0
 372:	df 91       	pop	r29
 374:	cf 91       	pop	r28
 376:	08 95       	ret
 378:	ff cf       	rjmp	.-2      	; 0x378 <spawn+0xfc>
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
    if (*queue == NULL) {
        *queue = p;
 37a:	89 81       	ldd	r24, Y+1	; 0x01
 37c:	9a 81       	ldd	r25, Y+2	; 0x02
 37e:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <readyQ+0x1>
 382:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <readyQ>
        dispatch(dequeue(&readyQ));
    }
    SETSTACK(&newp->context, &newp->stack);

    enqueue(newp, &readyQ);
    ENABLE();
 386:	78 94       	sei
}
 388:	0f 90       	pop	r0
 38a:	0f 90       	pop	r0
 38c:	df 91       	pop	r29
 38e:	cf 91       	pop	r28
 390:	08 95       	ret
    newp = dequeue(&freeQ);
    newp->function = function;
    newp->arg = arg;
    newp->next = NULL;
    if (setjmp(newp->context) == 1) {
        ENABLE();
 392:	78 94       	sei
        current->function(current->arg);
 394:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 398:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 39c:	ed 91       	ld	r30, X+
 39e:	fc 91       	ld	r31, X
 3a0:	11 97       	sbiw	r26, 0x01	; 1
 3a2:	12 96       	adiw	r26, 0x02	; 2
 3a4:	8d 91       	ld	r24, X+
 3a6:	9c 91       	ld	r25, X
 3a8:	13 97       	sbiw	r26, 0x03	; 3
 3aa:	09 95       	icall
        DISABLE();
 3ac:	f8 94       	cli
        enqueue(current, &freeQ);
 3ae:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3b2:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
	TCNT1 = 0x0;
	
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 3b6:	15 96       	adiw	r26, 0x05	; 5
 3b8:	1c 92       	st	X, r1
 3ba:	1e 92       	st	-X, r1
 3bc:	14 97       	sbiw	r26, 0x04	; 4
    if (*queue == NULL) {
 3be:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <freeQ>
 3c2:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <freeQ+0x1>
 3c6:	30 97       	sbiw	r30, 0x00	; 0
 3c8:	11 f4       	brne	.+4      	; 0x3ce <spawn+0x152>
 3ca:	17 c0       	rjmp	.+46     	; 0x3fa <spawn+0x17e>
        *queue = p;
    } else {
        thread q = *queue;
        while (q->next)
 3cc:	fc 01       	movw	r30, r24
 3ce:	84 81       	ldd	r24, Z+4	; 0x04
 3d0:	95 81       	ldd	r25, Z+5	; 0x05
 3d2:	00 97       	sbiw	r24, 0x00	; 0
 3d4:	d9 f7       	brne	.-10     	; 0x3cc <spawn+0x150>
            q = q->next;
        q->next = p;
 3d6:	b5 83       	std	Z+5, r27	; 0x05
 3d8:	a4 83       	std	Z+4, r26	; 0x04
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 3da:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <readyQ>
 3de:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <readyQ+0x1>
    if (*queue) {
 3e2:	00 97       	sbiw	r24, 0x00	; 0
 3e4:	a1 f0       	breq	.+40     	; 0x40e <__DATA_REGION_LENGTH__+0xe>
        *queue = (*queue)->next;
 3e6:	fc 01       	movw	r30, r24
 3e8:	24 81       	ldd	r18, Z+4	; 0x04
 3ea:	35 81       	ldd	r19, Z+5	; 0x05
 3ec:	30 93 1b 01 	sts	0x011B, r19	; 0x80011b <readyQ+0x1>
 3f0:	20 93 1a 01 	sts	0x011A, r18	; 0x80011a <readyQ>
    if (setjmp(newp->context) == 1) {
        ENABLE();
        current->function(current->arg);
        DISABLE();
        enqueue(current, &freeQ);
        dispatch(dequeue(&readyQ));
 3f4:	0e 94 1e 01 	call	0x23c	; 0x23c <dispatch>
 3f8:	9a cf       	rjmp	.-204    	; 0x32e <spawn+0xb2>
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
    if (*queue == NULL) {
        *queue = p;
 3fa:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <freeQ+0x1>
 3fe:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <freeQ>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 402:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <readyQ>
 406:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <readyQ+0x1>
    if (*queue) {
 40a:	00 97       	sbiw	r24, 0x00	; 0
 40c:	61 f7       	brne	.-40     	; 0x3e6 <spawn+0x16a>
 40e:	ff cf       	rjmp	.-2      	; 0x40e <__DATA_REGION_LENGTH__+0xe>

00000410 <yield>:
	}
}

void yield(void) {
	
	enqueue(current, &readyQ);
 410:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 414:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
	TCNT1 = 0x0;
	
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 418:	fc 01       	movw	r30, r24
 41a:	15 82       	std	Z+5, r1	; 0x05
 41c:	14 82       	std	Z+4, r1	; 0x04
    if (*queue == NULL) {
 41e:	a0 91 1a 01 	lds	r26, 0x011A	; 0x80011a <readyQ>
 422:	b0 91 1b 01 	lds	r27, 0x011B	; 0x80011b <readyQ+0x1>
 426:	10 97       	sbiw	r26, 0x00	; 0
 428:	a9 f0       	breq	.+42     	; 0x454 <yield+0x44>
 42a:	fd 01       	movw	r30, r26
 42c:	01 c0       	rjmp	.+2      	; 0x430 <yield+0x20>
        *queue = p;
    } else {
        thread q = *queue;
        while (q->next)
 42e:	f9 01       	movw	r30, r18
 430:	24 81       	ldd	r18, Z+4	; 0x04
 432:	35 81       	ldd	r19, Z+5	; 0x05
 434:	21 15       	cp	r18, r1
 436:	31 05       	cpc	r19, r1
 438:	d1 f7       	brne	.-12     	; 0x42e <yield+0x1e>
            q = q->next;
        q->next = p;
 43a:	95 83       	std	Z+5, r25	; 0x05
 43c:	84 83       	std	Z+4, r24	; 0x04
 43e:	14 96       	adiw	r26, 0x04	; 4
 440:	2d 91       	ld	r18, X+
 442:	3c 91       	ld	r19, X
 444:	15 97       	sbiw	r26, 0x05	; 5
 446:	cd 01       	movw	r24, r26
}

static thread dequeue(thread *queue) {
    thread p = *queue;
    if (*queue) {
        *queue = (*queue)->next;
 448:	30 93 1b 01 	sts	0x011B, r19	; 0x80011b <readyQ+0x1>
 44c:	20 93 1a 01 	sts	0x011A, r18	; 0x80011a <readyQ>
}

void yield(void) {
	
	enqueue(current, &readyQ);
	dispatch(dequeue(&readyQ));
 450:	0c 94 1e 01 	jmp	0x23c	; 0x23c <dispatch>
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
    if (*queue) {
 454:	00 97       	sbiw	r24, 0x00	; 0
 456:	09 f4       	brne	.+2      	; 0x45a <yield+0x4a>
 458:	ff cf       	rjmp	.-2      	; 0x458 <yield+0x48>
 45a:	20 e0       	ldi	r18, 0x00	; 0
 45c:	30 e0       	ldi	r19, 0x00	; 0
        *queue = (*queue)->next;
 45e:	30 93 1b 01 	sts	0x011B, r19	; 0x80011b <readyQ+0x1>
 462:	20 93 1a 01 	sts	0x011A, r18	; 0x80011a <readyQ>
}

void yield(void) {
	
	enqueue(current, &readyQ);
	dispatch(dequeue(&readyQ));
 466:	0c 94 1e 01 	jmp	0x23c	; 0x23c <dispatch>

0000046a <__vector_7>:
	if(!(PINB >> 7)){
		yield();
	}
}

ISR(TIMER1_COMPA_vect){
 46a:	1f 92       	push	r1
 46c:	0f 92       	push	r0
 46e:	0f b6       	in	r0, 0x3f	; 63
 470:	0f 92       	push	r0
 472:	11 24       	eor	r1, r1
 474:	2f 93       	push	r18
 476:	3f 93       	push	r19
 478:	4f 93       	push	r20
 47a:	5f 93       	push	r21
 47c:	6f 93       	push	r22
 47e:	7f 93       	push	r23
 480:	8f 93       	push	r24
 482:	9f 93       	push	r25
 484:	af 93       	push	r26
 486:	bf 93       	push	r27
 488:	ef 93       	push	r30
 48a:	ff 93       	push	r31
	if(!(PINB >> 7)){
 48c:	1f 9b       	sbis	0x03, 7	; 3
		yield();
 48e:	0e 94 08 02 	call	0x410	; 0x410 <yield>
	}
}
 492:	ff 91       	pop	r31
 494:	ef 91       	pop	r30
 496:	bf 91       	pop	r27
 498:	af 91       	pop	r26
 49a:	9f 91       	pop	r25
 49c:	8f 91       	pop	r24
 49e:	7f 91       	pop	r23
 4a0:	6f 91       	pop	r22
 4a2:	5f 91       	pop	r21
 4a4:	4f 91       	pop	r20
 4a6:	3f 91       	pop	r19
 4a8:	2f 91       	pop	r18
 4aa:	0f 90       	pop	r0
 4ac:	0f be       	out	0x3f, r0	; 63
 4ae:	0f 90       	pop	r0
 4b0:	1f 90       	pop	r1
 4b2:	18 95       	reti

000004b4 <__vector_3>:
 4b4:	1f 92       	push	r1
 4b6:	0f 92       	push	r0
 4b8:	0f b6       	in	r0, 0x3f	; 63
 4ba:	0f 92       	push	r0
 4bc:	11 24       	eor	r1, r1
 4be:	2f 93       	push	r18
 4c0:	3f 93       	push	r19
 4c2:	4f 93       	push	r20
 4c4:	5f 93       	push	r21
 4c6:	6f 93       	push	r22
 4c8:	7f 93       	push	r23
 4ca:	8f 93       	push	r24
 4cc:	9f 93       	push	r25
 4ce:	af 93       	push	r26
 4d0:	bf 93       	push	r27
 4d2:	ef 93       	push	r30
 4d4:	ff 93       	push	r31
 4d6:	0e 94 35 02 	call	0x46a	; 0x46a <__vector_7>
 4da:	ff 91       	pop	r31
 4dc:	ef 91       	pop	r30
 4de:	bf 91       	pop	r27
 4e0:	af 91       	pop	r26
 4e2:	9f 91       	pop	r25
 4e4:	8f 91       	pop	r24
 4e6:	7f 91       	pop	r23
 4e8:	6f 91       	pop	r22
 4ea:	5f 91       	pop	r21
 4ec:	4f 91       	pop	r20
 4ee:	3f 91       	pop	r19
 4f0:	2f 91       	pop	r18
 4f2:	0f 90       	pop	r0
 4f4:	0f be       	out	0x3f, r0	; 63
 4f6:	0f 90       	pop	r0
 4f8:	1f 90       	pop	r1
 4fa:	18 95       	reti

000004fc <__divmodsi4>:
 4fc:	05 2e       	mov	r0, r21
 4fe:	97 fb       	bst	r25, 7
 500:	1e f4       	brtc	.+6      	; 0x508 <__stack+0x9>
 502:	00 94       	com	r0
 504:	0e 94 95 02 	call	0x52a	; 0x52a <__negsi2>
 508:	57 fd       	sbrc	r21, 7
 50a:	07 d0       	rcall	.+14     	; 0x51a <__divmodsi4_neg2>
 50c:	0e 94 9d 02 	call	0x53a	; 0x53a <__udivmodsi4>
 510:	07 fc       	sbrc	r0, 7
 512:	03 d0       	rcall	.+6      	; 0x51a <__divmodsi4_neg2>
 514:	4e f4       	brtc	.+18     	; 0x528 <__divmodsi4_exit>
 516:	0c 94 95 02 	jmp	0x52a	; 0x52a <__negsi2>

0000051a <__divmodsi4_neg2>:
 51a:	50 95       	com	r21
 51c:	40 95       	com	r20
 51e:	30 95       	com	r19
 520:	21 95       	neg	r18
 522:	3f 4f       	sbci	r19, 0xFF	; 255
 524:	4f 4f       	sbci	r20, 0xFF	; 255
 526:	5f 4f       	sbci	r21, 0xFF	; 255

00000528 <__divmodsi4_exit>:
 528:	08 95       	ret

0000052a <__negsi2>:
 52a:	90 95       	com	r25
 52c:	80 95       	com	r24
 52e:	70 95       	com	r23
 530:	61 95       	neg	r22
 532:	7f 4f       	sbci	r23, 0xFF	; 255
 534:	8f 4f       	sbci	r24, 0xFF	; 255
 536:	9f 4f       	sbci	r25, 0xFF	; 255
 538:	08 95       	ret

0000053a <__udivmodsi4>:
 53a:	a1 e2       	ldi	r26, 0x21	; 33
 53c:	1a 2e       	mov	r1, r26
 53e:	aa 1b       	sub	r26, r26
 540:	bb 1b       	sub	r27, r27
 542:	fd 01       	movw	r30, r26
 544:	0d c0       	rjmp	.+26     	; 0x560 <__udivmodsi4_ep>

00000546 <__udivmodsi4_loop>:
 546:	aa 1f       	adc	r26, r26
 548:	bb 1f       	adc	r27, r27
 54a:	ee 1f       	adc	r30, r30
 54c:	ff 1f       	adc	r31, r31
 54e:	a2 17       	cp	r26, r18
 550:	b3 07       	cpc	r27, r19
 552:	e4 07       	cpc	r30, r20
 554:	f5 07       	cpc	r31, r21
 556:	20 f0       	brcs	.+8      	; 0x560 <__udivmodsi4_ep>
 558:	a2 1b       	sub	r26, r18
 55a:	b3 0b       	sbc	r27, r19
 55c:	e4 0b       	sbc	r30, r20
 55e:	f5 0b       	sbc	r31, r21

00000560 <__udivmodsi4_ep>:
 560:	66 1f       	adc	r22, r22
 562:	77 1f       	adc	r23, r23
 564:	88 1f       	adc	r24, r24
 566:	99 1f       	adc	r25, r25
 568:	1a 94       	dec	r1
 56a:	69 f7       	brne	.-38     	; 0x546 <__udivmodsi4_loop>
 56c:	60 95       	com	r22
 56e:	70 95       	com	r23
 570:	80 95       	com	r24
 572:	90 95       	com	r25
 574:	9b 01       	movw	r18, r22
 576:	ac 01       	movw	r20, r24
 578:	bd 01       	movw	r22, r26
 57a:	cf 01       	movw	r24, r30
 57c:	08 95       	ret

0000057e <setjmp>:
 57e:	dc 01       	movw	r26, r24
 580:	2d 92       	st	X+, r2
 582:	3d 92       	st	X+, r3
 584:	4d 92       	st	X+, r4
 586:	5d 92       	st	X+, r5
 588:	6d 92       	st	X+, r6
 58a:	7d 92       	st	X+, r7
 58c:	8d 92       	st	X+, r8
 58e:	9d 92       	st	X+, r9
 590:	ad 92       	st	X+, r10
 592:	bd 92       	st	X+, r11
 594:	cd 92       	st	X+, r12
 596:	dd 92       	st	X+, r13
 598:	ed 92       	st	X+, r14
 59a:	fd 92       	st	X+, r15
 59c:	0d 93       	st	X+, r16
 59e:	1d 93       	st	X+, r17
 5a0:	cd 93       	st	X+, r28
 5a2:	dd 93       	st	X+, r29
 5a4:	ff 91       	pop	r31
 5a6:	ef 91       	pop	r30
 5a8:	8d b7       	in	r24, 0x3d	; 61
 5aa:	8d 93       	st	X+, r24
 5ac:	8e b7       	in	r24, 0x3e	; 62
 5ae:	8d 93       	st	X+, r24
 5b0:	8f b7       	in	r24, 0x3f	; 63
 5b2:	8d 93       	st	X+, r24
 5b4:	ed 93       	st	X+, r30
 5b6:	fd 93       	st	X+, r31
 5b8:	88 27       	eor	r24, r24
 5ba:	99 27       	eor	r25, r25
 5bc:	09 94       	ijmp

000005be <longjmp>:
 5be:	dc 01       	movw	r26, r24
 5c0:	cb 01       	movw	r24, r22
 5c2:	81 30       	cpi	r24, 0x01	; 1
 5c4:	91 05       	cpc	r25, r1
 5c6:	81 1d       	adc	r24, r1
 5c8:	2d 90       	ld	r2, X+
 5ca:	3d 90       	ld	r3, X+
 5cc:	4d 90       	ld	r4, X+
 5ce:	5d 90       	ld	r5, X+
 5d0:	6d 90       	ld	r6, X+
 5d2:	7d 90       	ld	r7, X+
 5d4:	8d 90       	ld	r8, X+
 5d6:	9d 90       	ld	r9, X+
 5d8:	ad 90       	ld	r10, X+
 5da:	bd 90       	ld	r11, X+
 5dc:	cd 90       	ld	r12, X+
 5de:	dd 90       	ld	r13, X+
 5e0:	ed 90       	ld	r14, X+
 5e2:	fd 90       	ld	r15, X+
 5e4:	0d 91       	ld	r16, X+
 5e6:	1d 91       	ld	r17, X+
 5e8:	cd 91       	ld	r28, X+
 5ea:	dd 91       	ld	r29, X+
 5ec:	ed 91       	ld	r30, X+
 5ee:	fd 91       	ld	r31, X+
 5f0:	0d 90       	ld	r0, X+
 5f2:	f8 94       	cli
 5f4:	fe bf       	out	0x3e, r31	; 62
 5f6:	0f be       	out	0x3f, r0	; 63
 5f8:	ed bf       	out	0x3d, r30	; 61
 5fa:	ed 91       	ld	r30, X+
 5fc:	fd 91       	ld	r31, X+
 5fe:	09 94       	ijmp

00000600 <_exit>:
 600:	f8 94       	cli

00000602 <__stop_program>:
 602:	ff cf       	rjmp	.-2      	; 0x602 <__stop_program>
