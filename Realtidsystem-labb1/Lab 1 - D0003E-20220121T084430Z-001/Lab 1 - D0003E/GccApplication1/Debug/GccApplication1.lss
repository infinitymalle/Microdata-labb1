
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000025c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000208  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000028c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009c3  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008ab  00000000  00000000  00000cdf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003c5  00000000  00000000  0000158a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  00001950  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000046a  00000000  00000000  000019b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000299  00000000  00000000  00001e22  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000020bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
   8:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
   c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  10:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  14:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  18:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  1c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  20:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  24:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  28:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  2c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  30:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  34:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  38:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  3c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  40:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  44:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  48:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  4c:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  50:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  54:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  58:	0c 94 42 00 	jmp	0x84	; 0x84 <__bad_interrupt>
  5c:	e8 00       	.word	0x00e8	; ????
  5e:	e3 00       	.word	0x00e3	; ????
  60:	d1 00       	.word	0x00d1	; ????
  62:	ca 00       	.word	0x00ca	; ????
  64:	73 00       	.word	0x0073	; ????
  66:	b5 00       	.word	0x00b5	; ????
  68:	ac 00       	.word	0x00ac	; ????
  6a:	a1 00       	.word	0x00a1	; ????
  6c:	8b 00       	.word	0x008b	; ????
  6e:	f7 00       	.word	0x00f7	; ????

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61
  7c:	0e 94 44 00 	call	0x88	; 0x88 <main>
  80:	0c 94 02 01 	jmp	0x204	; 0x204 <_exit>

00000084 <__bad_interrupt>:
  84:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000088 <main>:
#include <avr/io.h>
#include "myFunctionsInclude.h"

int main(void)
{
    CLKPR = 0x80;
  88:	e1 e6       	ldi	r30, 0x61	; 97
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	80 e8       	ldi	r24, 0x80	; 128
  8e:	80 83       	st	Z, r24
	CLKPR = 0x00;
  90:	10 82       	st	Z, r1
	LCD_Init();
  92:	0e 94 53 00 	call	0xa6	; 0xa6 <LCD_Init>
	char ch = '9';
	int i = 3;
	writeChar(ch, i);
  96:	63 e0       	ldi	r22, 0x03	; 3
  98:	70 e0       	ldi	r23, 0x00	; 0
  9a:	89 e3       	ldi	r24, 0x39	; 57
  9c:	0e 94 60 00 	call	0xc0	; 0xc0 <writeChar>
	
}
  a0:	80 e0       	ldi	r24, 0x00	; 0
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	08 95       	ret

000000a6 <LCD_Init>:
		LCDCS    - Asynchronous clock source
		LCDMUX's - Duty = 1/4, Bias = 1/3
		LCDPM's  - Number of Segments = 25
	*/
	
	LCDCRB = (1 << LCDCS) | (1 << LCDMUX1) | (1 << LCDMUX0) | (1 << LCDPM2) | (1 << LCDPM1) | (1 << LCDPM0);
  a6:	87 eb       	ldi	r24, 0xB7	; 183
  a8:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
	/*
		LCD Frame Rate Register:
		LCDCD's - Prescaler setting N = 16
	*/
	
	LCDFRR = (1 << LCDCD2) | (1 << LCDCD1) | (1 << LCDCD0);
  ac:	87 e0       	ldi	r24, 0x07	; 7
  ae:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>
		LCD Contrast Control Register
		None of the LCDDC's used = 300 microseconds
		LCDCC's = 3,35V
	*/
	
	LCDCCR = (1 << LCDCC3) | (1 << LCDCC2) | (1 << LCDCC1) | (1 << LCDCC0);
  b2:	8f e0       	ldi	r24, 0x0F	; 15
  b4:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
	
	/*
		LCDEN = LCD Enabled
		LCDAB = Low Power Waveform
	*/
	LCDCRA = (1 << LCDEN) | (1 << LCDAB);
  b8:	80 ec       	ldi	r24, 0xC0	; 192
  ba:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
  be:	08 95       	ret

000000c0 <writeChar>:
}

void writeChar(char ch, int pos)
{ 
	if(pos >= 0 && pos <= 5){
  c0:	66 30       	cpi	r22, 0x06	; 6
  c2:	71 05       	cpc	r23, r1
  c4:	28 f5       	brcc	.+74     	; 0x110 <writeChar+0x50>
		int pair = pos / 2;							// Make sure it's either pair 0,1 - 2,3 or 4,5
  c6:	9b 01       	movw	r18, r22
  c8:	35 95       	asr	r19
  ca:	27 95       	ror	r18
		int lr = 1;
		
		if (pos % 2 == 0) {
  cc:	60 ff       	sbrs	r22, 0
  ce:	21 c0       	rjmp	.+66     	; 0x112 <writeChar+0x52>
			lr = 1;	
		}
		else{
			lr = 16;
  d0:	40 e1       	ldi	r20, 0x10	; 16
		// All the numbers
		// 0 - 0x1551 - 0x15510000, 1 - 0x0110 - 0x01100000, 2 - 0x1E11 - 0x1E110000, 3 - 0x1B11 - 0x1B110000, 4 - 0x0B50 - 0x0B500000, 5 - 0x1B41 - 0x1B410000, 6 - 0x1F41 - 0x1F410000, 7 - 0x0111 - 0x01110000, 8 - 0x1F51 - 0x1F510000, 9 - 0x0B51 - 0x0B510000
		
		if (ch >= 0 || ch <= 9){
			
			switch (ch)
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	fc 01       	movw	r30, r24
  d6:	f0 97       	sbiw	r30, 0x30	; 48
  d8:	ea 30       	cpi	r30, 0x0A	; 10
  da:	f1 05       	cpc	r31, r1
  dc:	c8 f4       	brcc	.+50     	; 0x110 <writeChar+0x50>
  de:	e2 5d       	subi	r30, 0xD2	; 210
  e0:	ff 4f       	sbci	r31, 0xFF	; 255
  e2:	0c 94 fc 00 	jmp	0x1f8	; 0x1f8 <__tablejump2__>
					lcddr += 5;
					lcdReg = 0x1 * lr;
				break;
				
				case '4':
					lcdReg = 0x0 * lr;
  e6:	f9 01       	movw	r30, r18
  e8:	e4 51       	subi	r30, 0x14	; 20
  ea:	ff 4f       	sbci	r31, 0xFF	; 255
  ec:	10 82       	st	Z, r1
				break;
				
				case '9':
					lcdReg = 0x1 * lr;
					lcddr += 5;
					lcdReg = 0x5 * lr;
  ee:	35 96       	adiw	r30, 0x05	; 5
  f0:	84 2f       	mov	r24, r20
  f2:	88 0f       	add	r24, r24
  f4:	88 0f       	add	r24, r24
  f6:	84 0f       	add	r24, r20
  f8:	80 83       	st	Z, r24
					lcddr += 5;
					lcdReg = 0xB * lr;
  fa:	35 96       	adiw	r30, 0x05	; 5
  fc:	94 2f       	mov	r25, r20
  fe:	99 0f       	add	r25, r25
 100:	89 2f       	mov	r24, r25
 102:	88 0f       	add	r24, r24
 104:	88 0f       	add	r24, r24
 106:	89 0f       	add	r24, r25
 108:	48 0f       	add	r20, r24
 10a:	40 83       	st	Z, r20
					lcddr += 5;
					lcdReg = 0x0 * lr;
 10c:	35 96       	adiw	r30, 0x05	; 5
 10e:	10 82       	st	Z, r1
 110:	08 95       	ret
	if(pos >= 0 && pos <= 5){
		int pair = pos / 2;							// Make sure it's either pair 0,1 - 2,3 or 4,5
		int lr = 1;
		
		if (pos % 2 == 0) {
			lr = 1;	
 112:	41 e0       	ldi	r20, 0x01	; 1
 114:	de cf       	rjmp	.-68     	; 0xd2 <writeChar+0x12>
					lcddr += 5;
					lcdReg = 0x0 * lr;
				break;
				
				case '8':
					lcdReg = 0x1 * lr;
 116:	f9 01       	movw	r30, r18
 118:	e4 51       	subi	r30, 0x14	; 20
 11a:	ff 4f       	sbci	r31, 0xFF	; 255
 11c:	40 83       	st	Z, r20
					lcddr += 5;
					lcdReg = 0x5 * lr;
 11e:	35 96       	adiw	r30, 0x05	; 5
 120:	84 2f       	mov	r24, r20
 122:	88 0f       	add	r24, r24
 124:	88 0f       	add	r24, r24
 126:	84 0f       	add	r24, r20
 128:	80 83       	st	Z, r24
					lcddr += 5;
					lcdReg = 0xF * lr;
 12a:	35 96       	adiw	r30, 0x05	; 5
 12c:	84 2f       	mov	r24, r20
 12e:	88 0f       	add	r24, r24
 130:	84 0f       	add	r24, r20
 132:	98 2f       	mov	r25, r24
 134:	99 0f       	add	r25, r25
 136:	99 0f       	add	r25, r25
 138:	89 0f       	add	r24, r25
 13a:	80 83       	st	Z, r24
					lcddr += 5;
					lcdReg = 0x1 * lr;
 13c:	35 96       	adiw	r30, 0x05	; 5
 13e:	40 83       	st	Z, r20
				break;
 140:	08 95       	ret
					lcddr += 5;
					lcdReg = 0x1 * lr;
				break;
				
				case '7':
					lcdReg = 0x1 * lr;
 142:	f9 01       	movw	r30, r18
 144:	e4 51       	subi	r30, 0x14	; 20
 146:	ff 4f       	sbci	r31, 0xFF	; 255
 148:	40 83       	st	Z, r20
					lcddr += 5;
					lcdReg = 0x1 * lr;
 14a:	35 96       	adiw	r30, 0x05	; 5
 14c:	40 83       	st	Z, r20
					lcddr += 5;
					lcdReg = 0x1 * lr;
 14e:	35 96       	adiw	r30, 0x05	; 5
 150:	40 83       	st	Z, r20
					lcddr += 5;
					lcdReg = 0x0 * lr;
 152:	35 96       	adiw	r30, 0x05	; 5
 154:	10 82       	st	Z, r1
				break;
 156:	08 95       	ret
					lcddr += 5;
					lcdReg = 0x1 * lr;
				break;
				
				case '6':
					lcdReg = 0x1 * lr;
 158:	f9 01       	movw	r30, r18
 15a:	e4 51       	subi	r30, 0x14	; 20
 15c:	ff 4f       	sbci	r31, 0xFF	; 255
 15e:	40 83       	st	Z, r20
					lcddr += 5;
					lcdReg = 0x4 * lr;
 160:	35 96       	adiw	r30, 0x05	; 5
 162:	84 2f       	mov	r24, r20
 164:	88 0f       	add	r24, r24
 166:	88 0f       	add	r24, r24
 168:	df cf       	rjmp	.-66     	; 0x128 <writeChar+0x68>
					lcddr += 5;
					lcdReg = 0x0 * lr;
				break;
				
				case '5':
					lcdReg = 0x1 * lr;
 16a:	f9 01       	movw	r30, r18
 16c:	e4 51       	subi	r30, 0x14	; 20
 16e:	ff 4f       	sbci	r31, 0xFF	; 255
 170:	40 83       	st	Z, r20
					lcddr += 5;
					lcdReg = 0x4 * lr;
 172:	35 96       	adiw	r30, 0x05	; 5
 174:	84 2f       	mov	r24, r20
 176:	88 0f       	add	r24, r24
 178:	88 0f       	add	r24, r24
 17a:	80 83       	st	Z, r24
					lcddr += 5;
					lcdReg = 0xB * lr;
 17c:	35 96       	adiw	r30, 0x05	; 5
 17e:	94 2f       	mov	r25, r20
 180:	99 0f       	add	r25, r25
 182:	89 2f       	mov	r24, r25
 184:	88 0f       	add	r24, r24
 186:	88 0f       	add	r24, r24
 188:	89 0f       	add	r24, r25
 18a:	84 0f       	add	r24, r20
 18c:	80 83       	st	Z, r24
					lcddr += 5;
					lcdReg = 0x1 * lr;
 18e:	35 96       	adiw	r30, 0x05	; 5
 190:	40 83       	st	Z, r20
				break;
 192:	08 95       	ret
					lcddr += 5;
					lcdReg = 0x1 * lr;
				break;
				
				case '3':
					lcdReg = 0x1 * lr;
 194:	f9 01       	movw	r30, r18
 196:	e4 51       	subi	r30, 0x14	; 20
 198:	ff 4f       	sbci	r31, 0xFF	; 255
 19a:	40 83       	st	Z, r20
					lcddr += 5;
					lcdReg = 0x1 * lr;
 19c:	35 96       	adiw	r30, 0x05	; 5
 19e:	40 83       	st	Z, r20
 1a0:	ed cf       	rjmp	.-38     	; 0x17c <writeChar+0xbc>
					lcddr += 5;
					lcdReg = 0x0 * lr;
				break;
				
				case '2':
					lcdReg = 0x1 * lr;
 1a2:	f9 01       	movw	r30, r18
 1a4:	e4 51       	subi	r30, 0x14	; 20
 1a6:	ff 4f       	sbci	r31, 0xFF	; 255
 1a8:	40 83       	st	Z, r20
					lcddr += 5;
					lcdReg = 0x1 * lr;
 1aa:	35 96       	adiw	r30, 0x05	; 5
 1ac:	40 83       	st	Z, r20
					lcddr += 5;
					lcdReg = 0xE * lr;
 1ae:	35 96       	adiw	r30, 0x05	; 5
 1b0:	94 2f       	mov	r25, r20
 1b2:	99 0f       	add	r25, r25
 1b4:	89 2f       	mov	r24, r25
 1b6:	88 0f       	add	r24, r24
 1b8:	88 0f       	add	r24, r24
 1ba:	88 0f       	add	r24, r24
 1bc:	89 1b       	sub	r24, r25
 1be:	80 83       	st	Z, r24
					lcddr += 5;
					lcdReg = 0x1 * lr;
 1c0:	35 96       	adiw	r30, 0x05	; 5
 1c2:	40 83       	st	Z, r20
				break;
 1c4:	08 95       	ret
					lcddr += 5;
					lcdReg = 0x1 * lr;
				break;
				
				case '1':
					lcdReg = 0x0 * lr;
 1c6:	f9 01       	movw	r30, r18
 1c8:	e4 51       	subi	r30, 0x14	; 20
 1ca:	ff 4f       	sbci	r31, 0xFF	; 255
 1cc:	10 82       	st	Z, r1
 1ce:	bd cf       	rjmp	.-134    	; 0x14a <writeChar+0x8a>
		if (ch >= 0 || ch <= 9){
			
			switch (ch)
			{
				case '0':
					lcdReg = 0x1 * lr;
 1d0:	f9 01       	movw	r30, r18
 1d2:	e4 51       	subi	r30, 0x14	; 20
 1d4:	ff 4f       	sbci	r31, 0xFF	; 255
 1d6:	40 83       	st	Z, r20
					lcddr += 5;
					lcdReg = 0x5 * lr;
 1d8:	35 96       	adiw	r30, 0x05	; 5
 1da:	84 2f       	mov	r24, r20
 1dc:	88 0f       	add	r24, r24
 1de:	88 0f       	add	r24, r24
 1e0:	84 0f       	add	r24, r20
 1e2:	80 83       	st	Z, r24
					lcddr += 5;
					lcdReg = 0x5 * lr;
 1e4:	35 96       	adiw	r30, 0x05	; 5
 1e6:	80 83       	st	Z, r24
					lcddr += 5;
					lcdReg = 0x1 * lr;
 1e8:	35 96       	adiw	r30, 0x05	; 5
 1ea:	40 83       	st	Z, r20
				break;
 1ec:	08 95       	ret
					lcddr += 5;
					lcdReg = 0x1 * lr;
				break;
				
				case '9':
					lcdReg = 0x1 * lr;
 1ee:	f9 01       	movw	r30, r18
 1f0:	e4 51       	subi	r30, 0x14	; 20
 1f2:	ff 4f       	sbci	r31, 0xFF	; 255
 1f4:	40 83       	st	Z, r20
 1f6:	7b cf       	rjmp	.-266    	; 0xee <writeChar+0x2e>

000001f8 <__tablejump2__>:
 1f8:	ee 0f       	add	r30, r30
 1fa:	ff 1f       	adc	r31, r31
 1fc:	05 90       	lpm	r0, Z+
 1fe:	f4 91       	lpm	r31, Z
 200:	e0 2d       	mov	r30, r0
 202:	09 94       	ijmp

00000204 <_exit>:
 204:	f8 94       	cli

00000206 <__stop_program>:
 206:	ff cf       	rjmp	.-2      	; 0x206 <__stop_program>
