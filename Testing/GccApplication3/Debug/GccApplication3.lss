
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000740  000007d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000740  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000229  00800118  00800118  000007ec  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007ec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000081c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  0000085c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000129e  00000000  00000000  0000090c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bd6  00000000  00000000  00001baa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000750  00000000  00000000  00002780  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000220  00000000  00000000  00002ed0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005a1  00000000  00000000  000030f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ad2  00000000  00000000  00003691  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000180  00000000  00000000  00004163  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 69 02 	jmp	0x4d2	; 0x4d2 <__vector_3>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 34 02 	jmp	0x468	; 0x468 <__vector_7>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	e0 e4       	ldi	r30, 0x40	; 64
  70:	f7 e0       	ldi	r31, 0x07	; 7
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	a8 31       	cpi	r26, 0x18	; 24
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
  7e:	23 e0       	ldi	r18, 0x03	; 3
  80:	a8 e1       	ldi	r26, 0x18	; 24
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	a1 34       	cpi	r26, 0x41	; 65
  8a:	b2 07       	cpc	r27, r18
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 23 01 	call	0x246	; 0x246 <main>
  92:	0c 94 9e 03 	jmp	0x73c	; 0x73c <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <writeChar>:
        }
    }
}

void writeChar(char ch, int pos)
{
  9a:	cf 93       	push	r28
  9c:	df 93       	push	r29
  9e:	cd b7       	in	r28, 0x3d	; 61
  a0:	de b7       	in	r29, 0x3e	; 62
  a2:	64 97       	sbiw	r28, 0x14	; 20
  a4:	0f b6       	in	r0, 0x3f	; 63
  a6:	f8 94       	cli
  a8:	de bf       	out	0x3e, r29	; 62
  aa:	0f be       	out	0x3f, r0	; 63
  ac:	cd bf       	out	0x3d, r28	; 61
	// All the numbers
	// 0 - 0x1551, 1 - 0x0110, 2 - 0x1E11, 3 - 0x1B11, 4 - 0x0B50, 5 - 0x1B41, 6 - 0x1F41, 7 - 0x0111, 8 - 0x1F51, 9 - 0x0B51
	uint16_t scc[] = {0x1551, 0x0110, 0x1E11, 0x1B11, 0x0B50, 0x1B41, 0x1F41, 0x0111, 0x1F51, 0x0B51};
  ae:	94 e1       	ldi	r25, 0x14	; 20
  b0:	e4 e0       	ldi	r30, 0x04	; 4
  b2:	f1 e0       	ldi	r31, 0x01	; 1
  b4:	de 01       	movw	r26, r28
  b6:	11 96       	adiw	r26, 0x01	; 1
  b8:	01 90       	ld	r0, Z+
  ba:	0d 92       	st	X+, r0
  bc:	9a 95       	dec	r25
  be:	e1 f7       	brne	.-8      	; 0xb8 <writeChar+0x1e>
	
	if(pos >= 0 && pos <= 5){
  c0:	66 30       	cpi	r22, 0x06	; 6
  c2:	71 05       	cpc	r23, r1
  c4:	50 f5       	brcc	.+84     	; 0x11a <writeChar+0x80>
		if (ch >= '0' || ch <= '9'){
			int pair = pos / 2;					      // Make sure it's either pair 0,1 - 2,3 or 4,5
			uint8_t *lcddr = (uint8_t *) 0xEC + pair; // Point to register position 0xEC which is LCDDR0 and add pair to get LCDDR0, LCDDR1 or LCDDR2
  c6:	fb 01       	movw	r30, r22
  c8:	f5 95       	asr	r31
  ca:	e7 95       	ror	r30
  cc:	e4 51       	subi	r30, 0x14	; 20
  ce:	ff 4f       	sbci	r31, 0xFF	; 255
			uint16_t num = scc[ch - '0'];			  // Get the hexadecimal number from the list
  d0:	a8 2f       	mov	r26, r24
  d2:	b0 e0       	ldi	r27, 0x00	; 0
  d4:	d0 97       	sbiw	r26, 0x30	; 48
  d6:	aa 0f       	add	r26, r26
  d8:	bb 1f       	adc	r27, r27
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	8c 0f       	add	r24, r28
  e0:	9d 1f       	adc	r25, r29
  e2:	a8 0f       	add	r26, r24
  e4:	b9 1f       	adc	r27, r25
  e6:	4d 91       	ld	r20, X+
  e8:	5c 91       	ld	r21, X
  ea:	61 70       	andi	r22, 0x01	; 1
  ec:	77 27       	eor	r23, r23
  ee:	df 01       	movw	r26, r30
  f0:	54 96       	adiw	r26, 0x14	; 20

			for (int i = 0; i <= 3; i++) {			  // Loop through every number in the hexadecimal number
				int nibble = num & 0xF;				  // Get the least significant number in the hex
  f2:	ca 01       	movw	r24, r20
  f4:	8f 70       	andi	r24, 0x0F	; 15
  f6:	99 27       	eor	r25, r25
				
				if(pos % 2 == 1) {				      // Check if the nibble parts should be in the left or right number in the pair
  f8:	61 30       	cpi	r22, 0x01	; 1
  fa:	71 05       	cpc	r23, r1
  fc:	b9 f0       	breq	.+46     	; 0x12c <writeChar+0x92>
					nibble *= 0x10;					  // If pos % 2 == 1 -> nibble will load in right digit
					*lcddr = *lcddr & 0xF;
				}
				
				else {
					*lcddr = *lcddr & 0xF0;
  fe:	20 81       	ld	r18, Z
 100:	20 7f       	andi	r18, 0xF0	; 240
				}
				
				*lcddr = *lcddr | nibble;			  // Write the nibble to the digit
 102:	82 2b       	or	r24, r18
 104:	80 83       	st	Z, r24
				lcddr += 5;							  // Go to LCDDRx + 5
 106:	35 96       	adiw	r30, 0x05	; 5
				num /= 0x10;						  // Next nibble
 108:	52 95       	swap	r21
 10a:	42 95       	swap	r20
 10c:	4f 70       	andi	r20, 0x0F	; 15
 10e:	45 27       	eor	r20, r21
 110:	5f 70       	andi	r21, 0x0F	; 15
 112:	45 27       	eor	r20, r21
		if (ch >= '0' || ch <= '9'){
			int pair = pos / 2;					      // Make sure it's either pair 0,1 - 2,3 or 4,5
			uint8_t *lcddr = (uint8_t *) 0xEC + pair; // Point to register position 0xEC which is LCDDR0 and add pair to get LCDDR0, LCDDR1 or LCDDR2
			uint16_t num = scc[ch - '0'];			  // Get the hexadecimal number from the list

			for (int i = 0; i <= 3; i++) {			  // Loop through every number in the hexadecimal number
 114:	ea 17       	cp	r30, r26
 116:	fb 07       	cpc	r31, r27
 118:	61 f7       	brne	.-40     	; 0xf2 <writeChar+0x58>
				lcddr += 5;							  // Go to LCDDRx + 5
				num /= 0x10;						  // Next nibble
			}
		}
	}
}
 11a:	64 96       	adiw	r28, 0x14	; 20
 11c:	0f b6       	in	r0, 0x3f	; 63
 11e:	f8 94       	cli
 120:	de bf       	out	0x3e, r29	; 62
 122:	0f be       	out	0x3f, r0	; 63
 124:	cd bf       	out	0x3d, r28	; 61
 126:	df 91       	pop	r29
 128:	cf 91       	pop	r28
 12a:	08 95       	ret

			for (int i = 0; i <= 3; i++) {			  // Loop through every number in the hexadecimal number
				int nibble = num & 0xF;				  // Get the least significant number in the hex
				
				if(pos % 2 == 1) {				      // Check if the nibble parts should be in the left or right number in the pair
					nibble *= 0x10;					  // If pos % 2 == 1 -> nibble will load in right digit
 12c:	82 95       	swap	r24
 12e:	92 95       	swap	r25
 130:	90 7f       	andi	r25, 0xF0	; 240
 132:	98 27       	eor	r25, r24
 134:	80 7f       	andi	r24, 0xF0	; 240
 136:	98 27       	eor	r25, r24
					*lcddr = *lcddr & 0xF;
 138:	20 81       	ld	r18, Z
 13a:	2f 70       	andi	r18, 0x0F	; 15
 13c:	e2 cf       	rjmp	.-60     	; 0x102 <writeChar+0x68>

0000013e <printAt>:
		LCDAB = Low Power Waveform
	*/
	LCDCRA = (1 << LCDEN) | (1 << LCDAB);
}

void printAt(long num, int pos) {
 13e:	8f 92       	push	r8
 140:	9f 92       	push	r9
 142:	af 92       	push	r10
 144:	bf 92       	push	r11
 146:	cf 92       	push	r12
 148:	df 92       	push	r13
 14a:	ef 92       	push	r14
 14c:	ff 92       	push	r15
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29
 152:	4b 01       	movw	r8, r22
 154:	5c 01       	movw	r10, r24
 156:	ea 01       	movw	r28, r20
	lock(&m);
 158:	88 e1       	ldi	r24, 0x18	; 24
 15a:	91 e0       	ldi	r25, 0x01	; 1
 15c:	0e 94 a1 02 	call	0x542	; 0x542 <lock>
    int pp = pos;
    writeChar( (num % 100) / 10 + '0', pp);
 160:	c5 01       	movw	r24, r10
 162:	b4 01       	movw	r22, r8
 164:	24 e6       	ldi	r18, 0x64	; 100
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	40 e0       	ldi	r20, 0x00	; 0
 16a:	50 e0       	ldi	r21, 0x00	; 0
 16c:	0e 94 1c 03 	call	0x638	; 0x638 <__divmodsi4>
 170:	2a e0       	ldi	r18, 0x0A	; 10
 172:	c2 2e       	mov	r12, r18
 174:	d1 2c       	mov	r13, r1
 176:	e1 2c       	mov	r14, r1
 178:	f1 2c       	mov	r15, r1
 17a:	a7 01       	movw	r20, r14
 17c:	96 01       	movw	r18, r12
 17e:	0e 94 1c 03 	call	0x638	; 0x638 <__divmodsi4>
 182:	be 01       	movw	r22, r28
 184:	80 e3       	ldi	r24, 0x30	; 48
 186:	82 0f       	add	r24, r18
 188:	0e 94 4d 00 	call	0x9a	; 0x9a <writeChar>
    pp++;
    writeChar( num % 10 + '0', pp);
 18c:	21 96       	adiw	r28, 0x01	; 1
 18e:	c5 01       	movw	r24, r10
 190:	b4 01       	movw	r22, r8
 192:	a7 01       	movw	r20, r14
 194:	96 01       	movw	r18, r12
 196:	0e 94 1c 03 	call	0x638	; 0x638 <__divmodsi4>
 19a:	86 2f       	mov	r24, r22
 19c:	be 01       	movw	r22, r28
 19e:	80 5d       	subi	r24, 0xD0	; 208
 1a0:	0e 94 4d 00 	call	0x9a	; 0x9a <writeChar>
	unlock(&m);
 1a4:	88 e1       	ldi	r24, 0x18	; 24
 1a6:	91 e0       	ldi	r25, 0x01	; 1
}
 1a8:	df 91       	pop	r29
 1aa:	cf 91       	pop	r28
 1ac:	ff 90       	pop	r15
 1ae:	ef 90       	pop	r14
 1b0:	df 90       	pop	r13
 1b2:	cf 90       	pop	r12
 1b4:	bf 90       	pop	r11
 1b6:	af 90       	pop	r10
 1b8:	9f 90       	pop	r9
 1ba:	8f 90       	pop	r8
	lock(&m);
    int pp = pos;
    writeChar( (num % 100) / 10 + '0', pp);
    pp++;
    writeChar( num % 10 + '0', pp);
	unlock(&m);
 1bc:	0c 94 df 02 	jmp	0x5be	; 0x5be <unlock>

000001c0 <button>:
		}
	}
	return(true);
}

void button(int poss){
 1c0:	ec 01       	movw	r28, r24
	int press = 0;
	int counter = 0;
	bool buttonPushed = false;
	
	while(1){
		printAt(press, poss);
 1c2:	ae 01       	movw	r20, r28
 1c4:	60 e0       	ldi	r22, 0x00	; 0
 1c6:	70 e0       	ldi	r23, 0x00	; 0
 1c8:	cb 01       	movw	r24, r22
 1ca:	0e 94 9f 00 	call	0x13e	; 0x13e <printAt>
		
		if (PINB >> 7 == 0){		//Down
 1ce:	1f 9b       	sbis	0x03, 7	; 3
 1d0:	f8 cf       	rjmp	.-16     	; 0x1c2 <button+0x2>
			counter--;
		}else if (PINB >> 6 == 0){	//Up
 1d2:	83 b1       	in	r24, 0x03	; 3
 1d4:	82 95       	swap	r24
 1d6:	86 95       	lsr	r24
 1d8:	86 95       	lsr	r24
 1da:	83 70       	andi	r24, 0x03	; 3
 1dc:	91 f3       	breq	.-28     	; 0x1c2 <button+0x2>
			counter++;
		}else if (PINB >> 4 == 0){	//Press in
 1de:	83 b1       	in	r24, 0x03	; 3
 1e0:	f0 cf       	rjmp	.-32     	; 0x1c2 <button+0x2>

000001e2 <computePrimes>:
    pp++;
    writeChar( num % 10 + '0', pp);
	unlock(&m);
}

void computePrimes(int pos) {
 1e2:	ec 01       	movw	r28, r24
    long n;

    for(n = 1; ; n++) {
 1e4:	81 2c       	mov	r8, r1
 1e6:	91 2c       	mov	r9, r1
 1e8:	54 01       	movw	r10, r8
 1ea:	83 94       	inc	r8
			}
		}
	}
}
bool is_prime(long i){
	for(int n = 2; n < i; n++){
 1ec:	83 e0       	ldi	r24, 0x03	; 3
 1ee:	88 16       	cp	r8, r24
 1f0:	91 04       	cpc	r9, r1
 1f2:	a1 04       	cpc	r10, r1
 1f4:	b1 04       	cpc	r11, r1
 1f6:	e4 f0       	brlt	.+56     	; 0x230 <__EEPROM_REGION_LENGTH__+0x30>
		if(i % n == 0){
 1f8:	80 fe       	sbrs	r8, 0
 1fa:	1f c0       	rjmp	.+62     	; 0x23a <__EEPROM_REGION_LENGTH__+0x3a>
 1fc:	83 e0       	ldi	r24, 0x03	; 3
 1fe:	c8 2e       	mov	r12, r24
 200:	d1 2c       	mov	r13, r1
 202:	e1 2c       	mov	r14, r1
 204:	f1 2c       	mov	r15, r1
 206:	0d c0       	rjmp	.+26     	; 0x222 <__EEPROM_REGION_LENGTH__+0x22>
 208:	8f ef       	ldi	r24, 0xFF	; 255
 20a:	c8 1a       	sub	r12, r24
 20c:	d8 0a       	sbc	r13, r24
 20e:	e8 0a       	sbc	r14, r24
 210:	f8 0a       	sbc	r15, r24
 212:	c5 01       	movw	r24, r10
 214:	b4 01       	movw	r22, r8
 216:	0e 94 1c 03 	call	0x638	; 0x638 <__divmodsi4>
 21a:	67 2b       	or	r22, r23
 21c:	68 2b       	or	r22, r24
 21e:	69 2b       	or	r22, r25
 220:	61 f0       	breq	.+24     	; 0x23a <__EEPROM_REGION_LENGTH__+0x3a>
			}
		}
	}
}
bool is_prime(long i){
	for(int n = 2; n < i; n++){
 222:	96 01       	movw	r18, r12
 224:	a7 01       	movw	r20, r14
 226:	c8 14       	cp	r12, r8
 228:	d9 04       	cpc	r13, r9
 22a:	ea 04       	cpc	r14, r10
 22c:	fb 04       	cpc	r15, r11
 22e:	61 f7       	brne	.-40     	; 0x208 <__EEPROM_REGION_LENGTH__+0x8>
void computePrimes(int pos) {
    long n;

    for(n = 1; ; n++) {
        if (is_prime(n)) {
            printAt(n, pos);
 230:	ae 01       	movw	r20, r28
 232:	c5 01       	movw	r24, r10
 234:	b4 01       	movw	r22, r8
 236:	0e 94 9f 00 	call	0x13e	; 0x13e <printAt>
}

void computePrimes(int pos) {
    long n;

    for(n = 1; ; n++) {
 23a:	8f ef       	ldi	r24, 0xFF	; 255
 23c:	88 1a       	sub	r8, r24
 23e:	98 0a       	sbc	r9, r24
 240:	a8 0a       	sbc	r10, r24
 242:	b8 0a       	sbc	r11, r24
        if (is_prime(n)) {
            printAt(n, pos);
        }
    }
 244:	d3 cf       	rjmp	.-90     	; 0x1ec <computePrimes+0xa>

00000246 <main>:
void resetclock();

mutex m = MUTEX_INIT;

int main() {
	CLKPR = 0x80;
 246:	e1 e6       	ldi	r30, 0x61	; 97
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	80 e8       	ldi	r24, 0x80	; 128
 24c:	80 83       	st	Z, r24
	CLKPR = 0x00;
 24e:	10 82       	st	Z, r1
		LCDCS    - Asynchronous clock source
		LCDMUX's - Duty = 1/4, Bias = 1/3
		LCDPM's  - Number of Segments = 25
	*/
	
	LCDCRB = (1 << LCDCS) | (1 << LCDMUX1) | (1 << LCDMUX0) | (1 << LCDPM2) | (1 << LCDPM1) | (1 << LCDPM0);
 250:	87 eb       	ldi	r24, 0xB7	; 183
 252:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
	/*
		LCD Frame Rate Register:
		LCDCD's - Prescaler setting N = 16
	*/
	
	LCDFRR = (1 << LCDCD2) | (1 << LCDCD1) | (1 << LCDCD0);
 256:	87 e0       	ldi	r24, 0x07	; 7
 258:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>
		LCD Contrast Control Register
		None of the LCDDC's used = 300 microseconds
		LCDCC's = 3,35V
	*/
	
	LCDCCR = (1 << LCDCC3) | (1 << LCDCC2) | (1 << LCDCC1) | (1 << LCDCC0);
 25c:	8f e0       	ldi	r24, 0x0F	; 15
 25e:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
	
	/*
		LCDEN = LCD Enabled
		LCDAB = Low Power Waveform
	*/
	LCDCRA = (1 << LCDEN) | (1 << LCDAB);
 262:	80 ec       	ldi	r24, 0xC0	; 192
 264:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>

int main() {
	CLKPR = 0x80;
	CLKPR = 0x00;
	LCD_Init();
	spawn(button, 0);
 268:	60 e0       	ldi	r22, 0x00	; 0
 26a:	70 e0       	ldi	r23, 0x00	; 0
 26c:	80 ee       	ldi	r24, 0xE0	; 224
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	0e 94 64 01 	call	0x2c8	; 0x2c8 <spawn>
	spawn(computePrimes, 4);
 274:	64 e0       	ldi	r22, 0x04	; 4
 276:	70 e0       	ldi	r23, 0x00	; 0
 278:	81 ef       	ldi	r24, 0xF1	; 241
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	0e 94 64 01 	call	0x2c8	; 0x2c8 <spawn>
	computePrimes(2);
 280:	82 e0       	ldi	r24, 0x02	; 2
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <computePrimes>

00000288 <dispatch>:
        while (1) ;  // not much else to do...
    }
    return p;
}

static void dispatch(thread next) {
 288:	cf 93       	push	r28
 28a:	df 93       	push	r29
 28c:	00 d0       	rcall	.+0      	; 0x28e <dispatch+0x6>
 28e:	cd b7       	in	r28, 0x3d	; 61
 290:	de b7       	in	r29, 0x3e	; 62
 292:	9a 83       	std	Y+2, r25	; 0x02
 294:	89 83       	std	Y+1, r24	; 0x01
    if (setjmp(current->context) == 0) {
 296:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 29a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 29e:	06 96       	adiw	r24, 0x06	; 6
 2a0:	0e 94 5d 03 	call	0x6ba	; 0x6ba <setjmp>
 2a4:	89 2b       	or	r24, r25
 2a6:	29 f0       	breq	.+10     	; 0x2b2 <dispatch+0x2a>
        current = next;
        longjmp(next->context,1);
    }
}
 2a8:	0f 90       	pop	r0
 2aa:	0f 90       	pop	r0
 2ac:	df 91       	pop	r29
 2ae:	cf 91       	pop	r28
 2b0:	08 95       	ret
    return p;
}

static void dispatch(thread next) {
    if (setjmp(current->context) == 0) {
        current = next;
 2b2:	89 81       	ldd	r24, Y+1	; 0x01
 2b4:	9a 81       	ldd	r25, Y+2	; 0x02
 2b6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 2ba:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
        longjmp(next->context,1);
 2be:	61 e0       	ldi	r22, 0x01	; 1
 2c0:	70 e0       	ldi	r23, 0x00	; 0
 2c2:	06 96       	adiw	r24, 0x06	; 6
 2c4:	0e 94 7d 03 	call	0x6fa	; 0x6fa <longjmp>

000002c8 <spawn>:
    }
}

void spawn(void (* function)(int), int arg) {
 2c8:	cf 93       	push	r28
 2ca:	df 93       	push	r29
 2cc:	00 d0       	rcall	.+0      	; 0x2ce <spawn+0x6>
 2ce:	cd b7       	in	r28, 0x3d	; 61
 2d0:	de b7       	in	r29, 0x3e	; 62
    thread newp;

    DISABLE();
 2d2:	f8 94       	cli
    if (!initialized) initialize();
 2d4:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <initialized>
 2d8:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <initialized+0x1>
 2dc:	23 2b       	or	r18, r19
 2de:	b9 f5       	brne	.+110    	; 0x34e <spawn+0x86>
int initialized = 0;

static void initialize(void) {
    int i;
    for (i=0; i<NTHREADS-1; i++)
        threads[i].next = &threads[i+1];
 2e0:	2a ef       	ldi	r18, 0xFA	; 250
 2e2:	31 e0       	ldi	r19, 0x01	; 1
 2e4:	30 93 92 01 	sts	0x0192, r19	; 0x800192 <threads+0x5>
 2e8:	20 93 91 01 	sts	0x0191, r18	; 0x800191 <threads+0x4>
 2ec:	27 e6       	ldi	r18, 0x67	; 103
 2ee:	32 e0       	ldi	r19, 0x02	; 2
 2f0:	30 93 ff 01 	sts	0x01FF, r19	; 0x8001ff <threads+0x72>
 2f4:	20 93 fe 01 	sts	0x01FE, r18	; 0x8001fe <threads+0x71>
 2f8:	24 ed       	ldi	r18, 0xD4	; 212
 2fa:	32 e0       	ldi	r19, 0x02	; 2
 2fc:	30 93 6c 02 	sts	0x026C, r19	; 0x80026c <threads+0xdf>
 300:	20 93 6b 02 	sts	0x026B, r18	; 0x80026b <threads+0xde>
    threads[NTHREADS-1].next = NULL;
 304:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <threads+0x14c>
 308:	10 92 d8 02 	sts	0x02D8, r1	; 0x8002d8 <threads+0x14b>

    initialized = 1;
 30c:	21 e0       	ldi	r18, 0x01	; 1
 30e:	30 e0       	ldi	r19, 0x00	; 0
 310:	30 93 1d 01 	sts	0x011D, r19	; 0x80011d <initialized+0x1>
 314:	20 93 1c 01 	sts	0x011C, r18	; 0x80011c <initialized>
	
	/*
		Interrupts are enabled on the 7th pin of PORTB
	*/
	PCMSK1 = (1 << PCINT15);
 318:	20 e8       	ldi	r18, 0x80	; 128
 31a:	20 93 6c 00 	sts	0x006C, r18	; 0x80006c <__TEXT_REGION_LENGTH__+0x7fc06c>
	EIMSK = (1 << PCIE1);
 31e:	2d bb       	out	0x1d, r18	; 29
	
	/*
		Enables Joystick
	*/
	PORTB = (1 << PB7) | (1 << PB4) | (1 << PB6);
 320:	20 ed       	ldi	r18, 0xD0	; 208
 322:	25 b9       	out	0x05, r18	; 5
	PORTE = (1 << PE2) | (1 << PB3);
 324:	2c e0       	ldi	r18, 0x0C	; 12
 326:	2e b9       	out	0x0e, r18	; 14
	/*
		Sets OC1A to compare match
		Sets timer to CTC mode
	*/
	TCCR1A = (1 << COM1A1) | (1 << COM1A0);
 328:	20 ec       	ldi	r18, 0xC0	; 192
 32a:	20 93 80 00 	sts	0x0080, r18	; 0x800080 <__TEXT_REGION_LENGTH__+0x7fc080>
	TCCR1B = (1 << WGM12) | (1 << CS12) | (1 << CS10);
 32e:	2d e0       	ldi	r18, 0x0D	; 13
 330:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
	
	/*
		Timer compare A match interrupt: Enabled
	*/
	TIMSK1 = (1 << OCIE1A);
 334:	22 e0       	ldi	r18, 0x02	; 2
 336:	20 93 6f 00 	sts	0x006F, r18	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
	
	/*
		8MHz/(1024*20) = 50ms
		Set TCNT1 = 0
	*/
	OCR1A = 8000000/(1024 * 20);
 33a:	26 e8       	ldi	r18, 0x86	; 134
 33c:	31 e0       	ldi	r19, 0x01	; 1
 33e:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
 342:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
	TCNT1 = 0x0;
 346:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
 34a:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 34e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <freeQ>
 352:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <freeQ+0x1>
 356:	3a 83       	std	Y+2, r19	; 0x02
 358:	29 83       	std	Y+1, r18	; 0x01
    if (*queue) {
 35a:	23 2b       	or	r18, r19
 35c:	c9 f1       	breq	.+114    	; 0x3d0 <spawn+0x108>
        *queue = (*queue)->next;
 35e:	e9 81       	ldd	r30, Y+1	; 0x01
 360:	fa 81       	ldd	r31, Y+2	; 0x02
 362:	44 81       	ldd	r20, Z+4	; 0x04
 364:	55 81       	ldd	r21, Z+5	; 0x05
 366:	50 93 03 01 	sts	0x0103, r21	; 0x800103 <freeQ+0x1>
 36a:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <freeQ>

    DISABLE();
    if (!initialized) initialize();

    newp = dequeue(&freeQ);
    newp->function = function;
 36e:	91 83       	std	Z+1, r25	; 0x01
 370:	80 83       	st	Z, r24
    newp->arg = arg;
 372:	73 83       	std	Z+3, r23	; 0x03
 374:	62 83       	std	Z+2, r22	; 0x02
    newp->next = NULL;
 376:	15 82       	std	Z+5, r1	; 0x05
 378:	14 82       	std	Z+4, r1	; 0x04
    if (setjmp(newp->context) == 1) {
 37a:	cf 01       	movw	r24, r30
 37c:	06 96       	adiw	r24, 0x06	; 6
 37e:	0e 94 5d 03 	call	0x6ba	; 0x6ba <setjmp>
 382:	01 97       	sbiw	r24, 0x01	; 1
 384:	91 f1       	breq	.+100    	; 0x3ea <spawn+0x122>
        current->function(current->arg);
        DISABLE();
        enqueue(current, &freeQ);
        dispatch(dequeue(&readyQ));
    }
    SETSTACK(&newp->context, &newp->stack);
 386:	e9 81       	ldd	r30, Y+1	; 0x01
 388:	fa 81       	ldd	r31, Y+2	; 0x02
 38a:	36 96       	adiw	r30, 0x06	; 6
 38c:	89 81       	ldd	r24, Y+1	; 0x01
 38e:	9a 81       	ldd	r25, Y+2	; 0x02
 390:	87 59       	subi	r24, 0x97	; 151
 392:	9f 4f       	sbci	r25, 0xFF	; 255
 394:	91 8b       	std	Z+17, r25	; 0x11
 396:	80 8b       	std	Z+16, r24	; 0x10
 398:	93 8b       	std	Z+19, r25	; 0x13
 39a:	82 8b       	std	Z+18, r24	; 0x12
	OCR1A = 8000000/(1024 * 20);
	TCNT1 = 0x0;
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 39c:	e9 81       	ldd	r30, Y+1	; 0x01
 39e:	fa 81       	ldd	r31, Y+2	; 0x02
 3a0:	15 82       	std	Z+5, r1	; 0x05
 3a2:	14 82       	std	Z+4, r1	; 0x04
    if (*queue == NULL) {
 3a4:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <readyQ>
 3a8:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <readyQ+0x1>
 3ac:	30 97       	sbiw	r30, 0x00	; 0
 3ae:	11 f4       	brne	.+4      	; 0x3b4 <spawn+0xec>
 3b0:	10 c0       	rjmp	.+32     	; 0x3d2 <spawn+0x10a>
        *queue = p;
    } else {
        thread q = *queue;
        while (q->next)
 3b2:	fc 01       	movw	r30, r24
 3b4:	84 81       	ldd	r24, Z+4	; 0x04
 3b6:	95 81       	ldd	r25, Z+5	; 0x05
 3b8:	00 97       	sbiw	r24, 0x00	; 0
 3ba:	d9 f7       	brne	.-10     	; 0x3b2 <spawn+0xea>
            q = q->next;
        q->next = p;
 3bc:	89 81       	ldd	r24, Y+1	; 0x01
 3be:	9a 81       	ldd	r25, Y+2	; 0x02
 3c0:	95 83       	std	Z+5, r25	; 0x05
 3c2:	84 83       	std	Z+4, r24	; 0x04
        dispatch(dequeue(&readyQ));
    }
    SETSTACK(&newp->context, &newp->stack);

    enqueue(newp, &readyQ);
    ENABLE();
 3c4:	78 94       	sei
}
 3c6:	0f 90       	pop	r0
 3c8:	0f 90       	pop	r0
 3ca:	df 91       	pop	r29
 3cc:	cf 91       	pop	r28
 3ce:	08 95       	ret
 3d0:	ff cf       	rjmp	.-2      	; 0x3d0 <spawn+0x108>
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
    if (*queue == NULL) {
        *queue = p;
 3d2:	29 81       	ldd	r18, Y+1	; 0x01
 3d4:	3a 81       	ldd	r19, Y+2	; 0x02
 3d6:	30 93 1f 01 	sts	0x011F, r19	; 0x80011f <readyQ+0x1>
 3da:	20 93 1e 01 	sts	0x011E, r18	; 0x80011e <readyQ>
        dispatch(dequeue(&readyQ));
    }
    SETSTACK(&newp->context, &newp->stack);

    enqueue(newp, &readyQ);
    ENABLE();
 3de:	78 94       	sei
}
 3e0:	0f 90       	pop	r0
 3e2:	0f 90       	pop	r0
 3e4:	df 91       	pop	r29
 3e6:	cf 91       	pop	r28
 3e8:	08 95       	ret
    newp = dequeue(&freeQ);
    newp->function = function;
    newp->arg = arg;
    newp->next = NULL;
    if (setjmp(newp->context) == 1) {
        ENABLE();
 3ea:	78 94       	sei
        current->function(current->arg);
 3ec:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3f0:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3f4:	ed 91       	ld	r30, X+
 3f6:	fc 91       	ld	r31, X
 3f8:	11 97       	sbiw	r26, 0x01	; 1
 3fa:	12 96       	adiw	r26, 0x02	; 2
 3fc:	8d 91       	ld	r24, X+
 3fe:	9c 91       	ld	r25, X
 400:	13 97       	sbiw	r26, 0x03	; 3
 402:	09 95       	icall
        DISABLE();
 404:	f8 94       	cli
        enqueue(current, &freeQ);
 406:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 40a:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
	OCR1A = 8000000/(1024 * 20);
	TCNT1 = 0x0;
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 40e:	15 96       	adiw	r26, 0x05	; 5
 410:	1c 92       	st	X, r1
 412:	1e 92       	st	-X, r1
 414:	14 97       	sbiw	r26, 0x04	; 4
    if (*queue == NULL) {
 416:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <freeQ>
 41a:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <freeQ+0x1>
 41e:	30 97       	sbiw	r30, 0x00	; 0
 420:	11 f4       	brne	.+4      	; 0x426 <__DATA_REGION_LENGTH__+0x26>
 422:	17 c0       	rjmp	.+46     	; 0x452 <__DATA_REGION_LENGTH__+0x52>
        *queue = p;
    } else {
        thread q = *queue;
        while (q->next)
 424:	fc 01       	movw	r30, r24
 426:	84 81       	ldd	r24, Z+4	; 0x04
 428:	95 81       	ldd	r25, Z+5	; 0x05
 42a:	00 97       	sbiw	r24, 0x00	; 0
 42c:	d9 f7       	brne	.-10     	; 0x424 <__DATA_REGION_LENGTH__+0x24>
            q = q->next;
        q->next = p;
 42e:	b5 83       	std	Z+5, r27	; 0x05
 430:	a4 83       	std	Z+4, r26	; 0x04
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 432:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <readyQ>
 436:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <readyQ+0x1>
    if (*queue) {
 43a:	00 97       	sbiw	r24, 0x00	; 0
 43c:	a1 f0       	breq	.+40     	; 0x466 <__DATA_REGION_LENGTH__+0x66>
        *queue = (*queue)->next;
 43e:	fc 01       	movw	r30, r24
 440:	24 81       	ldd	r18, Z+4	; 0x04
 442:	35 81       	ldd	r19, Z+5	; 0x05
 444:	30 93 1f 01 	sts	0x011F, r19	; 0x80011f <readyQ+0x1>
 448:	20 93 1e 01 	sts	0x011E, r18	; 0x80011e <readyQ>
    if (setjmp(newp->context) == 1) {
        ENABLE();
        current->function(current->arg);
        DISABLE();
        enqueue(current, &freeQ);
        dispatch(dequeue(&readyQ));
 44c:	0e 94 44 01 	call	0x288	; 0x288 <dispatch>
 450:	9a cf       	rjmp	.-204    	; 0x386 <spawn+0xbe>
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
    if (*queue == NULL) {
        *queue = p;
 452:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <freeQ+0x1>
 456:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <freeQ>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 45a:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <readyQ>
 45e:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <readyQ+0x1>
    if (*queue) {
 462:	00 97       	sbiw	r24, 0x00	; 0
 464:	61 f7       	brne	.-40     	; 0x43e <__DATA_REGION_LENGTH__+0x3e>
 466:	ff cf       	rjmp	.-2      	; 0x466 <__DATA_REGION_LENGTH__+0x66>

00000468 <__vector_7>:
		
	}
}

// Should be interrupt handler for sequential interrupts
ISR(TIMER1_COMPA_vect) {
 468:	1f 92       	push	r1
 46a:	0f 92       	push	r0
 46c:	0f b6       	in	r0, 0x3f	; 63
 46e:	0f 92       	push	r0
 470:	11 24       	eor	r1, r1
	//yield();
}
 472:	0f 90       	pop	r0
 474:	0f be       	out	0x3f, r0	; 63
 476:	0f 90       	pop	r0
 478:	1f 90       	pop	r1
 47a:	18 95       	reti

0000047c <yield>:

// Change thread
void yield(void) {
	DISABLE();
 47c:	f8 94       	cli
	enqueue(current, &readyQ);
 47e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 482:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
	OCR1A = 8000000/(1024 * 20);
	TCNT1 = 0x0;
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 486:	fc 01       	movw	r30, r24
 488:	15 82       	std	Z+5, r1	; 0x05
 48a:	14 82       	std	Z+4, r1	; 0x04
    if (*queue == NULL) {
 48c:	a0 91 1e 01 	lds	r26, 0x011E	; 0x80011e <readyQ>
 490:	b0 91 1f 01 	lds	r27, 0x011F	; 0x80011f <readyQ+0x1>
 494:	10 97       	sbiw	r26, 0x00	; 0
 496:	b9 f0       	breq	.+46     	; 0x4c6 <yield+0x4a>
 498:	fd 01       	movw	r30, r26
 49a:	01 c0       	rjmp	.+2      	; 0x49e <yield+0x22>
        *queue = p;
    } else {
        thread q = *queue;
        while (q->next)
 49c:	f9 01       	movw	r30, r18
 49e:	24 81       	ldd	r18, Z+4	; 0x04
 4a0:	35 81       	ldd	r19, Z+5	; 0x05
 4a2:	21 15       	cp	r18, r1
 4a4:	31 05       	cpc	r19, r1
 4a6:	d1 f7       	brne	.-12     	; 0x49c <yield+0x20>
            q = q->next;
        q->next = p;
 4a8:	95 83       	std	Z+5, r25	; 0x05
 4aa:	84 83       	std	Z+4, r24	; 0x04
 4ac:	14 96       	adiw	r26, 0x04	; 4
 4ae:	2d 91       	ld	r18, X+
 4b0:	3c 91       	ld	r19, X
 4b2:	15 97       	sbiw	r26, 0x05	; 5
 4b4:	cd 01       	movw	r24, r26
}

static thread dequeue(thread *queue) {
    thread p = *queue;
    if (*queue) {
        *queue = (*queue)->next;
 4b6:	30 93 1f 01 	sts	0x011F, r19	; 0x80011f <readyQ+0x1>
 4ba:	20 93 1e 01 	sts	0x011E, r18	; 0x80011e <readyQ>

// Change thread
void yield(void) {
	DISABLE();
	enqueue(current, &readyQ);
	dispatch(dequeue(&readyQ));
 4be:	0e 94 44 01 	call	0x288	; 0x288 <dispatch>
	ENABLE();
 4c2:	78 94       	sei
}
 4c4:	08 95       	ret
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
    if (*queue) {
 4c6:	00 97       	sbiw	r24, 0x00	; 0
 4c8:	09 f4       	brne	.+2      	; 0x4cc <yield+0x50>
 4ca:	ff cf       	rjmp	.-2      	; 0x4ca <yield+0x4e>
 4cc:	20 e0       	ldi	r18, 0x00	; 0
 4ce:	30 e0       	ldi	r19, 0x00	; 0
 4d0:	f2 cf       	rjmp	.-28     	; 0x4b6 <yield+0x3a>

000004d2 <__vector_3>:
    enqueue(newp, &readyQ);
    ENABLE();
}

// Interrupt handler for button
ISR(PCINT1_vect) {
 4d2:	1f 92       	push	r1
 4d4:	0f 92       	push	r0
 4d6:	0f b6       	in	r0, 0x3f	; 63
 4d8:	0f 92       	push	r0
 4da:	11 24       	eor	r1, r1
 4dc:	2f 93       	push	r18
 4de:	3f 93       	push	r19
 4e0:	4f 93       	push	r20
 4e2:	5f 93       	push	r21
 4e4:	6f 93       	push	r22
 4e6:	7f 93       	push	r23
 4e8:	8f 93       	push	r24
 4ea:	9f 93       	push	r25
 4ec:	af 93       	push	r26
 4ee:	bf 93       	push	r27
 4f0:	ef 93       	push	r30
 4f2:	ff 93       	push	r31
	yield();
 4f4:	0e 94 3e 02 	call	0x47c	; 0x47c <yield>
	if (PINE >> 2 == 0){	//Left
 4f8:	8c b1       	in	r24, 0x0c	; 12
 4fa:	86 95       	lsr	r24
 4fc:	86 95       	lsr	r24
 4fe:	d9 f0       	breq	.+54     	; 0x536 <__stack+0x37>
		LCDDR8 = 1;
		yield();
		
	}else if (PINE >> 3 == 0){	//Right
 500:	8c b1       	in	r24, 0x0c	; 12
 502:	86 95       	lsr	r24
 504:	86 95       	lsr	r24
 506:	86 95       	lsr	r24
 508:	89 f0       	breq	.+34     	; 0x52c <__stack+0x2d>
		LCDDR13 = 0;
		yield();
		
	}
}
 50a:	ff 91       	pop	r31
 50c:	ef 91       	pop	r30
 50e:	bf 91       	pop	r27
 510:	af 91       	pop	r26
 512:	9f 91       	pop	r25
 514:	8f 91       	pop	r24
 516:	7f 91       	pop	r23
 518:	6f 91       	pop	r22
 51a:	5f 91       	pop	r21
 51c:	4f 91       	pop	r20
 51e:	3f 91       	pop	r19
 520:	2f 91       	pop	r18
 522:	0f 90       	pop	r0
 524:	0f be       	out	0x3f, r0	; 63
 526:	0f 90       	pop	r0
 528:	1f 90       	pop	r1
 52a:	18 95       	reti
	if (PINE >> 2 == 0){	//Left
		LCDDR8 = 1;
		yield();
		
	}else if (PINE >> 3 == 0){	//Right
		LCDDR13 = 0;
 52c:	10 92 f9 00 	sts	0x00F9, r1	; 0x8000f9 <__TEXT_REGION_LENGTH__+0x7fc0f9>
		yield();
 530:	0e 94 3e 02 	call	0x47c	; 0x47c <yield>
		
	}
}
 534:	ea cf       	rjmp	.-44     	; 0x50a <__stack+0xb>

// Interrupt handler for button
ISR(PCINT1_vect) {
	yield();
	if (PINE >> 2 == 0){	//Left
		LCDDR8 = 1;
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7fc0f4>
		yield();
 53c:	0e 94 3e 02 	call	0x47c	; 0x47c <yield>
 540:	e4 cf       	rjmp	.-56     	; 0x50a <__stack+0xb>

00000542 <lock>:
	enqueue(current, &readyQ);
	dispatch(dequeue(&readyQ));
	ENABLE();
}

void lock(mutex *m) {
 542:	cf 93       	push	r28
 544:	df 93       	push	r29
 546:	dc 01       	movw	r26, r24
	DISABLE();
 548:	f8 94       	cli
	
	// If it's unlocked, lock it
	if(m->locked == 0){
 54a:	8d 91       	ld	r24, X+
 54c:	9c 91       	ld	r25, X
 54e:	11 97       	sbiw	r26, 0x01	; 1
 550:	89 2b       	or	r24, r25
 552:	41 f1       	breq	.+80     	; 0x5a4 <lock+0x62>
	}
	
	// Else - put the current thread in the back of the line of the waitQ
	// and run the first thread in the readyQ
	else{
		enqueue(current, &(m->waitQ));
 554:	c0 91 00 01 	lds	r28, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 558:	d0 91 01 01 	lds	r29, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
	OCR1A = 8000000/(1024 * 20);
	TCNT1 = 0x0;
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 55c:	1d 82       	std	Y+5, r1	; 0x05
 55e:	1c 82       	std	Y+4, r1	; 0x04
    if (*queue == NULL) {
 560:	12 96       	adiw	r26, 0x02	; 2
 562:	ed 91       	ld	r30, X+
 564:	fc 91       	ld	r31, X
 566:	13 97       	sbiw	r26, 0x03	; 3
 568:	30 97       	sbiw	r30, 0x00	; 0
 56a:	11 f4       	brne	.+4      	; 0x570 <lock+0x2e>
 56c:	23 c0       	rjmp	.+70     	; 0x5b4 <lock+0x72>
        *queue = p;
    } else {
        thread q = *queue;
        while (q->next)
 56e:	fc 01       	movw	r30, r24
 570:	84 81       	ldd	r24, Z+4	; 0x04
 572:	95 81       	ldd	r25, Z+5	; 0x05
 574:	00 97       	sbiw	r24, 0x00	; 0
 576:	d9 f7       	brne	.-10     	; 0x56e <lock+0x2c>
            q = q->next;
        q->next = p;
 578:	d5 83       	std	Z+5, r29	; 0x05
 57a:	c4 83       	std	Z+4, r28	; 0x04
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 57c:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <readyQ>
 580:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <readyQ+0x1>
    if (*queue) {
 584:	00 97       	sbiw	r24, 0x00	; 0
 586:	69 f0       	breq	.+26     	; 0x5a2 <lock+0x60>
        *queue = (*queue)->next;
 588:	fc 01       	movw	r30, r24
 58a:	24 81       	ldd	r18, Z+4	; 0x04
 58c:	35 81       	ldd	r19, Z+5	; 0x05
 58e:	30 93 1f 01 	sts	0x011F, r19	; 0x80011f <readyQ+0x1>
 592:	20 93 1e 01 	sts	0x011E, r18	; 0x80011e <readyQ>
	
	// Else - put the current thread in the back of the line of the waitQ
	// and run the first thread in the readyQ
	else{
		enqueue(current, &(m->waitQ));
		dispatch(dequeue(&readyQ));
 596:	0e 94 44 01 	call	0x288	; 0x288 <dispatch>
	}
	ENABLE();
 59a:	78 94       	sei
}
 59c:	df 91       	pop	r29
 59e:	cf 91       	pop	r28
 5a0:	08 95       	ret
 5a2:	ff cf       	rjmp	.-2      	; 0x5a2 <lock+0x60>
void lock(mutex *m) {
	DISABLE();
	
	// If it's unlocked, lock it
	if(m->locked == 0){
		m->locked = 1;
 5a4:	81 e0       	ldi	r24, 0x01	; 1
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	8d 93       	st	X+, r24
 5aa:	9c 93       	st	X, r25
	// and run the first thread in the readyQ
	else{
		enqueue(current, &(m->waitQ));
		dispatch(dequeue(&readyQ));
	}
	ENABLE();
 5ac:	78 94       	sei
}
 5ae:	df 91       	pop	r29
 5b0:	cf 91       	pop	r28
 5b2:	08 95       	ret
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
    if (*queue == NULL) {
        *queue = p;
 5b4:	13 96       	adiw	r26, 0x03	; 3
 5b6:	dc 93       	st	X, r29
 5b8:	ce 93       	st	-X, r28
 5ba:	12 97       	sbiw	r26, 0x02	; 2
 5bc:	df cf       	rjmp	.-66     	; 0x57c <lock+0x3a>

000005be <unlock>:
		dispatch(dequeue(&readyQ));
	}
	ENABLE();
}

void unlock(mutex *m) {
 5be:	cf 93       	push	r28
 5c0:	df 93       	push	r29
 5c2:	fc 01       	movw	r30, r24
	
	DISABLE();
 5c4:	f8 94       	cli
	
	// If threads are available in the waitQ, put the current thread in the last position of the readyQ
	// and run the first thread in the waitQ
	if(m->waitQ != NULL){
 5c6:	82 81       	ldd	r24, Z+2	; 0x02
 5c8:	93 81       	ldd	r25, Z+3	; 0x03
 5ca:	89 2b       	or	r24, r25
 5cc:	51 f1       	breq	.+84     	; 0x622 <unlock+0x64>
		enqueue(current, &readyQ);
 5ce:	c0 91 00 01 	lds	r28, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 5d2:	d0 91 01 01 	lds	r29, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
	OCR1A = 8000000/(1024 * 20);
	TCNT1 = 0x0;
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 5d6:	1d 82       	std	Y+5, r1	; 0x05
 5d8:	1c 82       	std	Y+4, r1	; 0x04
    if (*queue == NULL) {
 5da:	a0 91 1e 01 	lds	r26, 0x011E	; 0x80011e <readyQ>
 5de:	b0 91 1f 01 	lds	r27, 0x011F	; 0x80011f <readyQ+0x1>
 5e2:	10 97       	sbiw	r26, 0x00	; 0
 5e4:	11 f4       	brne	.+4      	; 0x5ea <unlock+0x2c>
 5e6:	23 c0       	rjmp	.+70     	; 0x62e <unlock+0x70>
        *queue = p;
    } else {
        thread q = *queue;
        while (q->next)
 5e8:	dc 01       	movw	r26, r24
 5ea:	14 96       	adiw	r26, 0x04	; 4
 5ec:	8d 91       	ld	r24, X+
 5ee:	9c 91       	ld	r25, X
 5f0:	15 97       	sbiw	r26, 0x05	; 5
 5f2:	00 97       	sbiw	r24, 0x00	; 0
 5f4:	c9 f7       	brne	.-14     	; 0x5e8 <unlock+0x2a>
            q = q->next;
        q->next = p;
 5f6:	15 96       	adiw	r26, 0x05	; 5
 5f8:	dc 93       	st	X, r29
 5fa:	ce 93       	st	-X, r28
 5fc:	14 97       	sbiw	r26, 0x04	; 4
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 5fe:	82 81       	ldd	r24, Z+2	; 0x02
 600:	93 81       	ldd	r25, Z+3	; 0x03
    if (*queue) {
 602:	00 97       	sbiw	r24, 0x00	; 0
 604:	69 f0       	breq	.+26     	; 0x620 <unlock+0x62>
        *queue = (*queue)->next;
 606:	dc 01       	movw	r26, r24
 608:	14 96       	adiw	r26, 0x04	; 4
 60a:	2d 91       	ld	r18, X+
 60c:	3c 91       	ld	r19, X
 60e:	15 97       	sbiw	r26, 0x05	; 5
 610:	33 83       	std	Z+3, r19	; 0x03
 612:	22 83       	std	Z+2, r18	; 0x02
	
	// If threads are available in the waitQ, put the current thread in the last position of the readyQ
	// and run the first thread in the waitQ
	if(m->waitQ != NULL){
		enqueue(current, &readyQ);
		dispatch(dequeue(&(m->waitQ)));
 614:	0e 94 44 01 	call	0x288	; 0x288 <dispatch>
	// Else - unlock (put the locked flag to 0)
	else{
		m->locked = 0;
	}
	
	ENABLE();
 618:	78 94       	sei
}
 61a:	df 91       	pop	r29
 61c:	cf 91       	pop	r28
 61e:	08 95       	ret
 620:	ff cf       	rjmp	.-2      	; 0x620 <unlock+0x62>
		dispatch(dequeue(&(m->waitQ)));
	}
	
	// Else - unlock (put the locked flag to 0)
	else{
		m->locked = 0;
 622:	11 82       	std	Z+1, r1	; 0x01
 624:	10 82       	st	Z, r1
	}
	
	ENABLE();
 626:	78 94       	sei
}
 628:	df 91       	pop	r29
 62a:	cf 91       	pop	r28
 62c:	08 95       	ret
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
    if (*queue == NULL) {
        *queue = p;
 62e:	d0 93 1f 01 	sts	0x011F, r29	; 0x80011f <readyQ+0x1>
 632:	c0 93 1e 01 	sts	0x011E, r28	; 0x80011e <readyQ>
 636:	e3 cf       	rjmp	.-58     	; 0x5fe <unlock+0x40>

00000638 <__divmodsi4>:
 638:	05 2e       	mov	r0, r21
 63a:	97 fb       	bst	r25, 7
 63c:	1e f4       	brtc	.+6      	; 0x644 <__divmodsi4+0xc>
 63e:	00 94       	com	r0
 640:	0e 94 33 03 	call	0x666	; 0x666 <__negsi2>
 644:	57 fd       	sbrc	r21, 7
 646:	07 d0       	rcall	.+14     	; 0x656 <__divmodsi4_neg2>
 648:	0e 94 3b 03 	call	0x676	; 0x676 <__udivmodsi4>
 64c:	07 fc       	sbrc	r0, 7
 64e:	03 d0       	rcall	.+6      	; 0x656 <__divmodsi4_neg2>
 650:	4e f4       	brtc	.+18     	; 0x664 <__divmodsi4_exit>
 652:	0c 94 33 03 	jmp	0x666	; 0x666 <__negsi2>

00000656 <__divmodsi4_neg2>:
 656:	50 95       	com	r21
 658:	40 95       	com	r20
 65a:	30 95       	com	r19
 65c:	21 95       	neg	r18
 65e:	3f 4f       	sbci	r19, 0xFF	; 255
 660:	4f 4f       	sbci	r20, 0xFF	; 255
 662:	5f 4f       	sbci	r21, 0xFF	; 255

00000664 <__divmodsi4_exit>:
 664:	08 95       	ret

00000666 <__negsi2>:
 666:	90 95       	com	r25
 668:	80 95       	com	r24
 66a:	70 95       	com	r23
 66c:	61 95       	neg	r22
 66e:	7f 4f       	sbci	r23, 0xFF	; 255
 670:	8f 4f       	sbci	r24, 0xFF	; 255
 672:	9f 4f       	sbci	r25, 0xFF	; 255
 674:	08 95       	ret

00000676 <__udivmodsi4>:
 676:	a1 e2       	ldi	r26, 0x21	; 33
 678:	1a 2e       	mov	r1, r26
 67a:	aa 1b       	sub	r26, r26
 67c:	bb 1b       	sub	r27, r27
 67e:	fd 01       	movw	r30, r26
 680:	0d c0       	rjmp	.+26     	; 0x69c <__udivmodsi4_ep>

00000682 <__udivmodsi4_loop>:
 682:	aa 1f       	adc	r26, r26
 684:	bb 1f       	adc	r27, r27
 686:	ee 1f       	adc	r30, r30
 688:	ff 1f       	adc	r31, r31
 68a:	a2 17       	cp	r26, r18
 68c:	b3 07       	cpc	r27, r19
 68e:	e4 07       	cpc	r30, r20
 690:	f5 07       	cpc	r31, r21
 692:	20 f0       	brcs	.+8      	; 0x69c <__udivmodsi4_ep>
 694:	a2 1b       	sub	r26, r18
 696:	b3 0b       	sbc	r27, r19
 698:	e4 0b       	sbc	r30, r20
 69a:	f5 0b       	sbc	r31, r21

0000069c <__udivmodsi4_ep>:
 69c:	66 1f       	adc	r22, r22
 69e:	77 1f       	adc	r23, r23
 6a0:	88 1f       	adc	r24, r24
 6a2:	99 1f       	adc	r25, r25
 6a4:	1a 94       	dec	r1
 6a6:	69 f7       	brne	.-38     	; 0x682 <__udivmodsi4_loop>
 6a8:	60 95       	com	r22
 6aa:	70 95       	com	r23
 6ac:	80 95       	com	r24
 6ae:	90 95       	com	r25
 6b0:	9b 01       	movw	r18, r22
 6b2:	ac 01       	movw	r20, r24
 6b4:	bd 01       	movw	r22, r26
 6b6:	cf 01       	movw	r24, r30
 6b8:	08 95       	ret

000006ba <setjmp>:
 6ba:	dc 01       	movw	r26, r24
 6bc:	2d 92       	st	X+, r2
 6be:	3d 92       	st	X+, r3
 6c0:	4d 92       	st	X+, r4
 6c2:	5d 92       	st	X+, r5
 6c4:	6d 92       	st	X+, r6
 6c6:	7d 92       	st	X+, r7
 6c8:	8d 92       	st	X+, r8
 6ca:	9d 92       	st	X+, r9
 6cc:	ad 92       	st	X+, r10
 6ce:	bd 92       	st	X+, r11
 6d0:	cd 92       	st	X+, r12
 6d2:	dd 92       	st	X+, r13
 6d4:	ed 92       	st	X+, r14
 6d6:	fd 92       	st	X+, r15
 6d8:	0d 93       	st	X+, r16
 6da:	1d 93       	st	X+, r17
 6dc:	cd 93       	st	X+, r28
 6de:	dd 93       	st	X+, r29
 6e0:	ff 91       	pop	r31
 6e2:	ef 91       	pop	r30
 6e4:	8d b7       	in	r24, 0x3d	; 61
 6e6:	8d 93       	st	X+, r24
 6e8:	8e b7       	in	r24, 0x3e	; 62
 6ea:	8d 93       	st	X+, r24
 6ec:	8f b7       	in	r24, 0x3f	; 63
 6ee:	8d 93       	st	X+, r24
 6f0:	ed 93       	st	X+, r30
 6f2:	fd 93       	st	X+, r31
 6f4:	88 27       	eor	r24, r24
 6f6:	99 27       	eor	r25, r25
 6f8:	09 94       	ijmp

000006fa <longjmp>:
 6fa:	dc 01       	movw	r26, r24
 6fc:	cb 01       	movw	r24, r22
 6fe:	81 30       	cpi	r24, 0x01	; 1
 700:	91 05       	cpc	r25, r1
 702:	81 1d       	adc	r24, r1
 704:	2d 90       	ld	r2, X+
 706:	3d 90       	ld	r3, X+
 708:	4d 90       	ld	r4, X+
 70a:	5d 90       	ld	r5, X+
 70c:	6d 90       	ld	r6, X+
 70e:	7d 90       	ld	r7, X+
 710:	8d 90       	ld	r8, X+
 712:	9d 90       	ld	r9, X+
 714:	ad 90       	ld	r10, X+
 716:	bd 90       	ld	r11, X+
 718:	cd 90       	ld	r12, X+
 71a:	dd 90       	ld	r13, X+
 71c:	ed 90       	ld	r14, X+
 71e:	fd 90       	ld	r15, X+
 720:	0d 91       	ld	r16, X+
 722:	1d 91       	ld	r17, X+
 724:	cd 91       	ld	r28, X+
 726:	dd 91       	ld	r29, X+
 728:	ed 91       	ld	r30, X+
 72a:	fd 91       	ld	r31, X+
 72c:	0d 90       	ld	r0, X+
 72e:	f8 94       	cli
 730:	fe bf       	out	0x3e, r31	; 62
 732:	0f be       	out	0x3f, r0	; 63
 734:	ed bf       	out	0x3d, r30	; 61
 736:	ed 91       	ld	r30, X+
 738:	fd 91       	ld	r31, X+
 73a:	09 94       	ijmp

0000073c <_exit>:
 73c:	f8 94       	cli

0000073e <__stop_program>:
 73e:	ff cf       	rjmp	.-2      	; 0x73e <__stop_program>
