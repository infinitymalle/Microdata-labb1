
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  000007f4  00000888  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000229  00800118  00800118  000008a0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008a0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000008d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000910  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001290  00000000  00000000  000009b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b74  00000000  00000000  00001c40  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007c7  00000000  00000000  000027b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000023c  00000000  00000000  00002f7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000593  00000000  00000000  000031b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000bd2  00000000  00000000  0000374b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000170  00000000  00000000  0000431d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 9d 02 	jmp	0x53a	; 0x53a <__vector_3>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 d7 02 	jmp	0x5ae	; 0x5ae <__vector_7>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	e4 ef       	ldi	r30, 0xF4	; 244
  70:	f7 e0       	ldi	r31, 0x07	; 7
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	a8 31       	cpi	r26, 0x18	; 24
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
  7e:	23 e0       	ldi	r18, 0x03	; 3
  80:	a8 e1       	ldi	r26, 0x18	; 24
  82:	b1 e0       	ldi	r27, 0x01	; 1
  84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
  86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
  88:	a1 34       	cpi	r26, 0x41	; 65
  8a:	b2 07       	cpc	r27, r18
  8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
  8e:	0e 94 60 01 	call	0x2c0	; 0x2c0 <main>
  92:	0c 94 f8 03 	jmp	0x7f0	; 0x7f0 <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <writeChar>:
        }
    }
}

void writeChar(char ch, int pos)
{
  9a:	cf 93       	push	r28
  9c:	df 93       	push	r29
  9e:	cd b7       	in	r28, 0x3d	; 61
  a0:	de b7       	in	r29, 0x3e	; 62
  a2:	64 97       	sbiw	r28, 0x14	; 20
  a4:	0f b6       	in	r0, 0x3f	; 63
  a6:	f8 94       	cli
  a8:	de bf       	out	0x3e, r29	; 62
  aa:	0f be       	out	0x3f, r0	; 63
  ac:	cd bf       	out	0x3d, r28	; 61
	// All the numbers
	// 0 - 0x1551, 1 - 0x0110, 2 - 0x1E11, 3 - 0x1B11, 4 - 0x0B50, 5 - 0x1B41, 6 - 0x1F41, 7 - 0x0111, 8 - 0x1F51, 9 - 0x0B51
	uint16_t scc[] = {0x1551, 0x0110, 0x1E11, 0x1B11, 0x0B50, 0x1B41, 0x1F41, 0x0111, 0x1F51, 0x0B51};
  ae:	94 e1       	ldi	r25, 0x14	; 20
  b0:	e4 e0       	ldi	r30, 0x04	; 4
  b2:	f1 e0       	ldi	r31, 0x01	; 1
  b4:	de 01       	movw	r26, r28
  b6:	11 96       	adiw	r26, 0x01	; 1
  b8:	01 90       	ld	r0, Z+
  ba:	0d 92       	st	X+, r0
  bc:	9a 95       	dec	r25
  be:	e1 f7       	brne	.-8      	; 0xb8 <writeChar+0x1e>
	
	if(pos >= 0 && pos <= 5){
  c0:	66 30       	cpi	r22, 0x06	; 6
  c2:	71 05       	cpc	r23, r1
  c4:	50 f5       	brcc	.+84     	; 0x11a <writeChar+0x80>
		if (ch >= '0' || ch <= '9'){
			int pair = pos / 2;					      // Make sure it's either pair 0,1 - 2,3 or 4,5
			uint8_t *lcddr = (uint8_t *) 0xEC + pair; // Point to register position 0xEC which is LCDDR0 and add pair to get LCDDR0, LCDDR1 or LCDDR2
  c6:	fb 01       	movw	r30, r22
  c8:	f5 95       	asr	r31
  ca:	e7 95       	ror	r30
  cc:	e4 51       	subi	r30, 0x14	; 20
  ce:	ff 4f       	sbci	r31, 0xFF	; 255
			uint16_t num = scc[ch - '0'];			  // Get the hexadecimal number from the list
  d0:	a8 2f       	mov	r26, r24
  d2:	b0 e0       	ldi	r27, 0x00	; 0
  d4:	d0 97       	sbiw	r26, 0x30	; 48
  d6:	aa 0f       	add	r26, r26
  d8:	bb 1f       	adc	r27, r27
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	8c 0f       	add	r24, r28
  e0:	9d 1f       	adc	r25, r29
  e2:	a8 0f       	add	r26, r24
  e4:	b9 1f       	adc	r27, r25
  e6:	4d 91       	ld	r20, X+
  e8:	5c 91       	ld	r21, X
  ea:	61 70       	andi	r22, 0x01	; 1
  ec:	77 27       	eor	r23, r23
  ee:	df 01       	movw	r26, r30
  f0:	54 96       	adiw	r26, 0x14	; 20

			for (int i = 0; i <= 3; i++) {			  // Loop through every number in the hexadecimal number
				int nibble = num & 0xF;				  // Get the least significant number in the hex
  f2:	ca 01       	movw	r24, r20
  f4:	8f 70       	andi	r24, 0x0F	; 15
  f6:	99 27       	eor	r25, r25
				
				if(pos % 2 == 1) {				      // Check if the nibble parts should be in the left or right number in the pair
  f8:	61 30       	cpi	r22, 0x01	; 1
  fa:	71 05       	cpc	r23, r1
  fc:	b9 f0       	breq	.+46     	; 0x12c <writeChar+0x92>
					nibble *= 0x10;					  // If pos % 2 == 1 -> nibble will load in right digit
					*lcddr = *lcddr & 0xF;
				}
				
				else {
					*lcddr = *lcddr & 0xF0;
  fe:	20 81       	ld	r18, Z
 100:	20 7f       	andi	r18, 0xF0	; 240
				}
				
				*lcddr = *lcddr | nibble;			  // Write the nibble to the digit
 102:	82 2b       	or	r24, r18
 104:	80 83       	st	Z, r24
				lcddr += 5;							  // Go to LCDDRx + 5
 106:	35 96       	adiw	r30, 0x05	; 5
				num /= 0x10;						  // Next nibble
 108:	52 95       	swap	r21
 10a:	42 95       	swap	r20
 10c:	4f 70       	andi	r20, 0x0F	; 15
 10e:	45 27       	eor	r20, r21
 110:	5f 70       	andi	r21, 0x0F	; 15
 112:	45 27       	eor	r20, r21
		if (ch >= '0' || ch <= '9'){
			int pair = pos / 2;					      // Make sure it's either pair 0,1 - 2,3 or 4,5
			uint8_t *lcddr = (uint8_t *) 0xEC + pair; // Point to register position 0xEC which is LCDDR0 and add pair to get LCDDR0, LCDDR1 or LCDDR2
			uint16_t num = scc[ch - '0'];			  // Get the hexadecimal number from the list

			for (int i = 0; i <= 3; i++) {			  // Loop through every number in the hexadecimal number
 114:	ea 17       	cp	r30, r26
 116:	fb 07       	cpc	r31, r27
 118:	61 f7       	brne	.-40     	; 0xf2 <writeChar+0x58>
				lcddr += 5;							  // Go to LCDDRx + 5
				num /= 0x10;						  // Next nibble
			}
		}
	}
}
 11a:	64 96       	adiw	r28, 0x14	; 20
 11c:	0f b6       	in	r0, 0x3f	; 63
 11e:	f8 94       	cli
 120:	de bf       	out	0x3e, r29	; 62
 122:	0f be       	out	0x3f, r0	; 63
 124:	cd bf       	out	0x3d, r28	; 61
 126:	df 91       	pop	r29
 128:	cf 91       	pop	r28
 12a:	08 95       	ret

			for (int i = 0; i <= 3; i++) {			  // Loop through every number in the hexadecimal number
				int nibble = num & 0xF;				  // Get the least significant number in the hex
				
				if(pos % 2 == 1) {				      // Check if the nibble parts should be in the left or right number in the pair
					nibble *= 0x10;					  // If pos % 2 == 1 -> nibble will load in right digit
 12c:	82 95       	swap	r24
 12e:	92 95       	swap	r25
 130:	90 7f       	andi	r25, 0xF0	; 240
 132:	98 27       	eor	r25, r24
 134:	80 7f       	andi	r24, 0xF0	; 240
 136:	98 27       	eor	r25, r24
					*lcddr = *lcddr & 0xF;
 138:	20 81       	ld	r18, Z
 13a:	2f 70       	andi	r18, 0x0F	; 15
 13c:	e2 cf       	rjmp	.-60     	; 0x102 <writeChar+0x68>

0000013e <printAt>:
		LCDAB = Low Power Waveform
	*/
	LCDCRA = (1 << LCDEN) | (1 << LCDAB);
}

void printAt(long num, int pos) {
 13e:	8f 92       	push	r8
 140:	9f 92       	push	r9
 142:	af 92       	push	r10
 144:	bf 92       	push	r11
 146:	cf 92       	push	r12
 148:	df 92       	push	r13
 14a:	ef 92       	push	r14
 14c:	ff 92       	push	r15
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29
 152:	4b 01       	movw	r8, r22
 154:	5c 01       	movw	r10, r24
 156:	ea 01       	movw	r28, r20
	lock(&m);
 158:	88 e1       	ldi	r24, 0x18	; 24
 15a:	91 e0       	ldi	r25, 0x01	; 1
 15c:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <lock>
    int pp = pos;
    writeChar( (num % 100) / 10 + '0', pp);
 160:	c5 01       	movw	r24, r10
 162:	b4 01       	movw	r22, r8
 164:	24 e6       	ldi	r18, 0x64	; 100
 166:	30 e0       	ldi	r19, 0x00	; 0
 168:	40 e0       	ldi	r20, 0x00	; 0
 16a:	50 e0       	ldi	r21, 0x00	; 0
 16c:	0e 94 76 03 	call	0x6ec	; 0x6ec <__divmodsi4>
 170:	2a e0       	ldi	r18, 0x0A	; 10
 172:	c2 2e       	mov	r12, r18
 174:	d1 2c       	mov	r13, r1
 176:	e1 2c       	mov	r14, r1
 178:	f1 2c       	mov	r15, r1
 17a:	a7 01       	movw	r20, r14
 17c:	96 01       	movw	r18, r12
 17e:	0e 94 76 03 	call	0x6ec	; 0x6ec <__divmodsi4>
 182:	be 01       	movw	r22, r28
 184:	80 e3       	ldi	r24, 0x30	; 48
 186:	82 0f       	add	r24, r18
 188:	0e 94 4d 00 	call	0x9a	; 0x9a <writeChar>
    pp++;
    writeChar( num % 10 + '0', pp);
 18c:	21 96       	adiw	r28, 0x01	; 1
 18e:	c5 01       	movw	r24, r10
 190:	b4 01       	movw	r22, r8
 192:	a7 01       	movw	r20, r14
 194:	96 01       	movw	r18, r12
 196:	0e 94 76 03 	call	0x6ec	; 0x6ec <__divmodsi4>
 19a:	86 2f       	mov	r24, r22
 19c:	be 01       	movw	r22, r28
 19e:	80 5d       	subi	r24, 0xD0	; 208
 1a0:	0e 94 4d 00 	call	0x9a	; 0x9a <writeChar>
	unlock(&m);
 1a4:	88 e1       	ldi	r24, 0x18	; 24
 1a6:	91 e0       	ldi	r25, 0x01	; 1
}
 1a8:	df 91       	pop	r29
 1aa:	cf 91       	pop	r28
 1ac:	ff 90       	pop	r15
 1ae:	ef 90       	pop	r14
 1b0:	df 90       	pop	r13
 1b2:	cf 90       	pop	r12
 1b4:	bf 90       	pop	r11
 1b6:	af 90       	pop	r10
 1b8:	9f 90       	pop	r9
 1ba:	8f 90       	pop	r8
	lock(&m);
    int pp = pos;
    writeChar( (num % 100) / 10 + '0', pp);
    pp++;
    writeChar( num % 10 + '0', pp);
	unlock(&m);
 1bc:	0c 94 39 03 	jmp	0x672	; 0x672 <unlock>

000001c0 <button>:
	}
	return(true);
}

void button(int uselessSpawn){
	LCDDR8 = 1;
 1c0:	81 e0       	ldi	r24, 0x01	; 1
 1c2:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7fc0f4>
	LCDDR13 = 0;
 1c6:	10 92 f9 00 	sts	0x00F9, r1	; 0x8000f9 <__TEXT_REGION_LENGTH__+0x7fc0f9>
	int press = 0;
	bool buttonPushed = false;
 1ca:	c0 e0       	ldi	r28, 0x00	; 0
}

void button(int uselessSpawn){
	LCDDR8 = 1;
	LCDDR13 = 0;
	int press = 0;
 1cc:	00 e0       	ldi	r16, 0x00	; 0
 1ce:	10 e0       	ldi	r17, 0x00	; 0
 1d0:	c1 2c       	mov	r12, r1
 1d2:	d1 2c       	mov	r13, r1
 1d4:	76 01       	movw	r14, r12
	bool buttonPushed = false;
	
	while(1){
		printAt(press, 4);
 1d6:	44 e0       	ldi	r20, 0x04	; 4
 1d8:	50 e0       	ldi	r21, 0x00	; 0
 1da:	c7 01       	movw	r24, r14
 1dc:	b6 01       	movw	r22, r12
 1de:	0e 94 9f 00 	call	0x13e	; 0x13e <printAt>
		if (PINB >> 7 == 0 && !buttonPushed && LCDDR13 == 0x1){
 1e2:	1f 99       	sbic	0x03, 7	; 3
 1e4:	17 c0       	rjmp	.+46     	; 0x214 <__EEPROM_REGION_LENGTH__+0x14>
 1e6:	c1 11       	cpse	r28, r1
 1e8:	2a c0       	rjmp	.+84     	; 0x23e <__EEPROM_REGION_LENGTH__+0x3e>
 1ea:	80 91 f9 00 	lds	r24, 0x00F9	; 0x8000f9 <__TEXT_REGION_LENGTH__+0x7fc0f9>
 1ee:	81 30       	cpi	r24, 0x01	; 1
 1f0:	41 f1       	breq	.+80     	; 0x242 <__EEPROM_REGION_LENGTH__+0x42>
			buttonPushed = true;
			LCDDR13 = 0;
			LCDDR8 = 1;
		}
		
		else if (PINB >> 7 == 0 && !buttonPushed && LCDDR8 == 0x1) {
 1f2:	1f 99       	sbic	0x03, 7	; 3
 1f4:	04 c0       	rjmp	.+8      	; 0x1fe <button+0x3e>
 1f6:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7fc0f4>
 1fa:	81 30       	cpi	r24, 0x01	; 1
 1fc:	99 f0       	breq	.+38     	; 0x224 <__EEPROM_REGION_LENGTH__+0x24>
			buttonPushed = true;
			LCDDR13 = 1;
			LCDDR8 = 0;
		}
		
		else if (PINB >> 7 == 1){
 1fe:	1f 9b       	sbis	0x03, 7	; 3
 200:	ea cf       	rjmp	.-44     	; 0x1d6 <button+0x16>
			buttonPushed = false;
 202:	c0 e0       	ldi	r28, 0x00	; 0
	LCDDR13 = 0;
	int press = 0;
	bool buttonPushed = false;
	
	while(1){
		printAt(press, 4);
 204:	44 e0       	ldi	r20, 0x04	; 4
 206:	50 e0       	ldi	r21, 0x00	; 0
 208:	c7 01       	movw	r24, r14
 20a:	b6 01       	movw	r22, r12
 20c:	0e 94 9f 00 	call	0x13e	; 0x13e <printAt>
		if (PINB >> 7 == 0 && !buttonPushed && LCDDR13 == 0x1){
 210:	1f 9b       	sbis	0x03, 7	; 3
 212:	e9 cf       	rjmp	.-46     	; 0x1e6 <button+0x26>
			buttonPushed = true;
			LCDDR13 = 0;
			LCDDR8 = 1;
		}
		
		else if (PINB >> 7 == 0 && !buttonPushed && LCDDR8 == 0x1) {
 214:	1f 99       	sbic	0x03, 7	; 3
 216:	f3 cf       	rjmp	.-26     	; 0x1fe <button+0x3e>
 218:	c1 11       	cpse	r28, r1
 21a:	f1 cf       	rjmp	.-30     	; 0x1fe <button+0x3e>
 21c:	80 91 f4 00 	lds	r24, 0x00F4	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7fc0f4>
 220:	81 30       	cpi	r24, 0x01	; 1
 222:	69 f7       	brne	.-38     	; 0x1fe <button+0x3e>
			press++;
 224:	0f 5f       	subi	r16, 0xFF	; 255
 226:	1f 4f       	sbci	r17, 0xFF	; 255
			buttonPushed = true;
			LCDDR13 = 1;
 228:	80 93 f9 00 	sts	0x00F9, r24	; 0x8000f9 <__TEXT_REGION_LENGTH__+0x7fc0f9>
			LCDDR8 = 0;
 22c:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7fc0f4>
			LCDDR8 = 1;
		}
		
		else if (PINB >> 7 == 0 && !buttonPushed && LCDDR8 == 0x1) {
			press++;
			buttonPushed = true;
 230:	c1 e0       	ldi	r28, 0x01	; 1
 232:	68 01       	movw	r12, r16
 234:	01 2e       	mov	r0, r17
 236:	00 0c       	add	r0, r0
 238:	ee 08       	sbc	r14, r14
 23a:	ff 08       	sbc	r15, r15
			LCDDR13 = 1;
			LCDDR8 = 0;
 23c:	cc cf       	rjmp	.-104    	; 0x1d6 <button+0x16>
			buttonPushed = true;
			LCDDR13 = 0;
			LCDDR8 = 1;
		}
		
		else if (PINB >> 7 == 0 && !buttonPushed && LCDDR8 == 0x1) {
 23e:	83 b1       	in	r24, 0x03	; 3
 240:	de cf       	rjmp	.-68     	; 0x1fe <button+0x3e>
	bool buttonPushed = false;
	
	while(1){
		printAt(press, 4);
		if (PINB >> 7 == 0 && !buttonPushed && LCDDR13 == 0x1){
			press++;
 242:	0f 5f       	subi	r16, 0xFF	; 255
 244:	1f 4f       	sbci	r17, 0xFF	; 255
			buttonPushed = true;
			LCDDR13 = 0;
 246:	10 92 f9 00 	sts	0x00F9, r1	; 0x8000f9 <__TEXT_REGION_LENGTH__+0x7fc0f9>
			LCDDR8 = 1;
 24a:	80 93 f4 00 	sts	0x00F4, r24	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7fc0f4>
	
	while(1){
		printAt(press, 4);
		if (PINB >> 7 == 0 && !buttonPushed && LCDDR13 == 0x1){
			press++;
			buttonPushed = true;
 24e:	c1 e0       	ldi	r28, 0x01	; 1
 250:	68 01       	movw	r12, r16
 252:	01 2e       	mov	r0, r17
 254:	00 0c       	add	r0, r0
 256:	ee 08       	sbc	r14, r14
 258:	ff 08       	sbc	r15, r15
			LCDDR13 = 0;
			LCDDR8 = 1;
 25a:	bd cf       	rjmp	.-134    	; 0x1d6 <button+0x16>

0000025c <computePrimes>:
    pp++;
    writeChar( num % 10 + '0', pp);
	unlock(&m);
}

void computePrimes(int pos) {
 25c:	ec 01       	movw	r28, r24
    long n;

    for(n = 1; ; n++) {
 25e:	81 2c       	mov	r8, r1
 260:	91 2c       	mov	r9, r1
 262:	54 01       	movw	r10, r8
 264:	83 94       	inc	r8
			}
		}
	}
}
bool is_prime(long i){
	for(int n = 2; n < i; n++){
 266:	83 e0       	ldi	r24, 0x03	; 3
 268:	88 16       	cp	r8, r24
 26a:	91 04       	cpc	r9, r1
 26c:	a1 04       	cpc	r10, r1
 26e:	b1 04       	cpc	r11, r1
 270:	e4 f0       	brlt	.+56     	; 0x2aa <computePrimes+0x4e>
		if(i % n == 0){
 272:	80 fe       	sbrs	r8, 0
 274:	1f c0       	rjmp	.+62     	; 0x2b4 <computePrimes+0x58>
 276:	83 e0       	ldi	r24, 0x03	; 3
 278:	c8 2e       	mov	r12, r24
 27a:	d1 2c       	mov	r13, r1
 27c:	e1 2c       	mov	r14, r1
 27e:	f1 2c       	mov	r15, r1
 280:	0d c0       	rjmp	.+26     	; 0x29c <computePrimes+0x40>
 282:	8f ef       	ldi	r24, 0xFF	; 255
 284:	c8 1a       	sub	r12, r24
 286:	d8 0a       	sbc	r13, r24
 288:	e8 0a       	sbc	r14, r24
 28a:	f8 0a       	sbc	r15, r24
 28c:	c5 01       	movw	r24, r10
 28e:	b4 01       	movw	r22, r8
 290:	0e 94 76 03 	call	0x6ec	; 0x6ec <__divmodsi4>
 294:	67 2b       	or	r22, r23
 296:	68 2b       	or	r22, r24
 298:	69 2b       	or	r22, r25
 29a:	61 f0       	breq	.+24     	; 0x2b4 <computePrimes+0x58>
			}
		}
	}
}
bool is_prime(long i){
	for(int n = 2; n < i; n++){
 29c:	96 01       	movw	r18, r12
 29e:	a7 01       	movw	r20, r14
 2a0:	c8 14       	cp	r12, r8
 2a2:	d9 04       	cpc	r13, r9
 2a4:	ea 04       	cpc	r14, r10
 2a6:	fb 04       	cpc	r15, r11
 2a8:	61 f7       	brne	.-40     	; 0x282 <computePrimes+0x26>
void computePrimes(int pos) {
    long n;

    for(n = 1; ; n++) {
        if (is_prime(n)) {
            printAt(n, pos);
 2aa:	ae 01       	movw	r20, r28
 2ac:	c5 01       	movw	r24, r10
 2ae:	b4 01       	movw	r22, r8
 2b0:	0e 94 9f 00 	call	0x13e	; 0x13e <printAt>
}

void computePrimes(int pos) {
    long n;

    for(n = 1; ; n++) {
 2b4:	8f ef       	ldi	r24, 0xFF	; 255
 2b6:	88 1a       	sub	r8, r24
 2b8:	98 0a       	sbc	r9, r24
 2ba:	a8 0a       	sbc	r10, r24
 2bc:	b8 0a       	sbc	r11, r24
        if (is_prime(n)) {
            printAt(n, pos);
        }
    }
 2be:	d3 cf       	rjmp	.-90     	; 0x266 <computePrimes+0xa>

000002c0 <main>:
void resetclock();

mutex m = MUTEX_INIT;

int main() {
	CLKPR = 0x80;
 2c0:	e1 e6       	ldi	r30, 0x61	; 97
 2c2:	f0 e0       	ldi	r31, 0x00	; 0
 2c4:	80 e8       	ldi	r24, 0x80	; 128
 2c6:	80 83       	st	Z, r24
	CLKPR = 0x00;
 2c8:	10 82       	st	Z, r1
		LCDCS    - Asynchronous clock source
		LCDMUX's - Duty = 1/4, Bias = 1/3
		LCDPM's  - Number of Segments = 25
	*/
	
	LCDCRB = (1 << LCDCS) | (1 << LCDMUX1) | (1 << LCDMUX0) | (1 << LCDPM2) | (1 << LCDPM1) | (1 << LCDPM0);
 2ca:	87 eb       	ldi	r24, 0xB7	; 183
 2cc:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
	/*
		LCD Frame Rate Register:
		LCDCD's - Prescaler setting N = 16
	*/
	
	LCDFRR = (1 << LCDCD2) | (1 << LCDCD1) | (1 << LCDCD0);
 2d0:	87 e0       	ldi	r24, 0x07	; 7
 2d2:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>
		LCD Contrast Control Register
		None of the LCDDC's used = 300 microseconds
		LCDCC's = 3,35V
	*/
	
	LCDCCR = (1 << LCDCC3) | (1 << LCDCC2) | (1 << LCDCC1) | (1 << LCDCC0);
 2d6:	8f e0       	ldi	r24, 0x0F	; 15
 2d8:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
	
	/*
		LCDEN = LCD Enabled
		LCDAB = Low Power Waveform
	*/
	LCDCRA = (1 << LCDEN) | (1 << LCDAB);
 2dc:	80 ec       	ldi	r24, 0xC0	; 192
 2de:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
int main() {
	CLKPR = 0x80;
	CLKPR = 0x00;
	LCD_Init();
	
	spawn(computePrimes, 0);
 2e2:	60 e0       	ldi	r22, 0x00	; 0
 2e4:	70 e0       	ldi	r23, 0x00	; 0
 2e6:	8e e2       	ldi	r24, 0x2E	; 46
 2e8:	91 e0       	ldi	r25, 0x01	; 1
 2ea:	0e 94 a1 01 	call	0x342	; 0x342 <spawn>
	spawn(button, 0);
 2ee:	60 e0       	ldi	r22, 0x00	; 0
 2f0:	70 e0       	ldi	r23, 0x00	; 0
 2f2:	80 ee       	ldi	r24, 0xE0	; 224
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	0e 94 a1 01 	call	0x342	; 0x342 <spawn>
	computePrimes(4);
 2fa:	84 e0       	ldi	r24, 0x04	; 4
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	0e 94 2e 01 	call	0x25c	; 0x25c <computePrimes>

00000302 <dispatch>:
        while (1) ;  // not much else to do...
    }
    return p;
}

static void dispatch(thread next) {
 302:	cf 93       	push	r28
 304:	df 93       	push	r29
 306:	00 d0       	rcall	.+0      	; 0x308 <dispatch+0x6>
 308:	cd b7       	in	r28, 0x3d	; 61
 30a:	de b7       	in	r29, 0x3e	; 62
 30c:	9a 83       	std	Y+2, r25	; 0x02
 30e:	89 83       	std	Y+1, r24	; 0x01
    if (setjmp(current->context) == 0) {
 310:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 314:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 318:	06 96       	adiw	r24, 0x06	; 6
 31a:	0e 94 b7 03 	call	0x76e	; 0x76e <setjmp>
 31e:	89 2b       	or	r24, r25
 320:	29 f0       	breq	.+10     	; 0x32c <dispatch+0x2a>
        current = next;
        longjmp(next->context,1);
    }
}
 322:	0f 90       	pop	r0
 324:	0f 90       	pop	r0
 326:	df 91       	pop	r29
 328:	cf 91       	pop	r28
 32a:	08 95       	ret
    return p;
}

static void dispatch(thread next) {
    if (setjmp(current->context) == 0) {
        current = next;
 32c:	89 81       	ldd	r24, Y+1	; 0x01
 32e:	9a 81       	ldd	r25, Y+2	; 0x02
 330:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 334:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
        longjmp(next->context,1);
 338:	61 e0       	ldi	r22, 0x01	; 1
 33a:	70 e0       	ldi	r23, 0x00	; 0
 33c:	06 96       	adiw	r24, 0x06	; 6
 33e:	0e 94 d7 03 	call	0x7ae	; 0x7ae <longjmp>

00000342 <spawn>:
    }
}

void spawn(void (* function)(int), int arg) {
 342:	cf 93       	push	r28
 344:	df 93       	push	r29
 346:	00 d0       	rcall	.+0      	; 0x348 <spawn+0x6>
 348:	cd b7       	in	r28, 0x3d	; 61
 34a:	de b7       	in	r29, 0x3e	; 62
    thread newp;

    DISABLE();
 34c:	f8 94       	cli
    if (!initialized) initialize();
 34e:	20 91 1c 01 	lds	r18, 0x011C	; 0x80011c <initialized>
 352:	30 91 1d 01 	lds	r19, 0x011D	; 0x80011d <initialized+0x1>
 356:	23 2b       	or	r18, r19
 358:	c1 f5       	brne	.+112    	; 0x3ca <spawn+0x88>
int initialized = 0;

static void initialize(void) {
    int i;
    for (i=0; i<NTHREADS-1; i++)
        threads[i].next = &threads[i+1];
 35a:	2a ef       	ldi	r18, 0xFA	; 250
 35c:	31 e0       	ldi	r19, 0x01	; 1
 35e:	30 93 92 01 	sts	0x0192, r19	; 0x800192 <threads+0x5>
 362:	20 93 91 01 	sts	0x0191, r18	; 0x800191 <threads+0x4>
 366:	27 e6       	ldi	r18, 0x67	; 103
 368:	32 e0       	ldi	r19, 0x02	; 2
 36a:	30 93 ff 01 	sts	0x01FF, r19	; 0x8001ff <threads+0x72>
 36e:	20 93 fe 01 	sts	0x01FE, r18	; 0x8001fe <threads+0x71>
 372:	24 ed       	ldi	r18, 0xD4	; 212
 374:	32 e0       	ldi	r19, 0x02	; 2
 376:	30 93 6c 02 	sts	0x026C, r19	; 0x80026c <threads+0xdf>
 37a:	20 93 6b 02 	sts	0x026B, r18	; 0x80026b <threads+0xde>
    threads[NTHREADS-1].next = NULL;
 37e:	10 92 d9 02 	sts	0x02D9, r1	; 0x8002d9 <threads+0x14c>
 382:	10 92 d8 02 	sts	0x02D8, r1	; 0x8002d8 <threads+0x14b>

    initialized = 1;
 386:	21 e0       	ldi	r18, 0x01	; 1
 388:	30 e0       	ldi	r19, 0x00	; 0
 38a:	30 93 1d 01 	sts	0x011D, r19	; 0x80011d <initialized+0x1>
 38e:	20 93 1c 01 	sts	0x011C, r18	; 0x80011c <initialized>
	
	/*
		Interrupts are enabled on the 7th pin of PORTB
	*/
	PCMSK1 = (1 << PCINT15) | (1 << PCINT14) | (1 << PCINT12);
 392:	20 ed       	ldi	r18, 0xD0	; 208
 394:	20 93 6c 00 	sts	0x006C, r18	; 0x80006c <__TEXT_REGION_LENGTH__+0x7fc06c>
	PCMSK0 = (1 << PCINT3) | (1 << PCINT2);
 398:	2c e0       	ldi	r18, 0x0C	; 12
 39a:	20 93 6b 00 	sts	0x006B, r18	; 0x80006b <__TEXT_REGION_LENGTH__+0x7fc06b>
	EIMSK = (1 << PCIE1) | (1 << PCIE0);
 39e:	20 ec       	ldi	r18, 0xC0	; 192
 3a0:	2d bb       	out	0x1d, r18	; 29
	
	/*
		Enables Joystick
	*/
	PORTB = (1 << PB7) | (1 << PB4);
 3a2:	30 e9       	ldi	r19, 0x90	; 144
 3a4:	35 b9       	out	0x05, r19	; 5
	
	/*
		Sets OC1A to compare match
		Sets timer to CTC mode
	*/
	TCCR1A = (1 << COM1A1) | (1 << COM1A0);
 3a6:	20 93 80 00 	sts	0x0080, r18	; 0x800080 <__TEXT_REGION_LENGTH__+0x7fc080>
	TCCR1B = (1 << WGM12) | (1 << CS12) | (1 << CS10);
 3aa:	2d e0       	ldi	r18, 0x0D	; 13
 3ac:	20 93 81 00 	sts	0x0081, r18	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
	
	/*
		Timer compare A match interrupt: Enabled
	*/
	TIMSK1 = (1 << OCIE1A);
 3b0:	22 e0       	ldi	r18, 0x02	; 2
 3b2:	20 93 6f 00 	sts	0x006F, r18	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
	
	/*
		8MHz/(1024*20) = 50ms
		Set TCNT1 = 0
	*/
	OCR1A = 8000000/(1024 * 20);
 3b6:	26 e8       	ldi	r18, 0x86	; 134
 3b8:	31 e0       	ldi	r19, 0x01	; 1
 3ba:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
 3be:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
	TCNT1 = 0x0;
 3c2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
 3c6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 3ca:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <freeQ>
 3ce:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <freeQ+0x1>
 3d2:	3a 83       	std	Y+2, r19	; 0x02
 3d4:	29 83       	std	Y+1, r18	; 0x01
    if (*queue) {
 3d6:	23 2b       	or	r18, r19
 3d8:	c9 f1       	breq	.+114    	; 0x44c <__DATA_REGION_LENGTH__+0x4c>
        *queue = (*queue)->next;
 3da:	e9 81       	ldd	r30, Y+1	; 0x01
 3dc:	fa 81       	ldd	r31, Y+2	; 0x02
 3de:	44 81       	ldd	r20, Z+4	; 0x04
 3e0:	55 81       	ldd	r21, Z+5	; 0x05
 3e2:	50 93 03 01 	sts	0x0103, r21	; 0x800103 <freeQ+0x1>
 3e6:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <freeQ>

    DISABLE();
    if (!initialized) initialize();

    newp = dequeue(&freeQ);
    newp->function = function;
 3ea:	91 83       	std	Z+1, r25	; 0x01
 3ec:	80 83       	st	Z, r24
    newp->arg = arg;
 3ee:	73 83       	std	Z+3, r23	; 0x03
 3f0:	62 83       	std	Z+2, r22	; 0x02
    newp->next = NULL;
 3f2:	15 82       	std	Z+5, r1	; 0x05
 3f4:	14 82       	std	Z+4, r1	; 0x04
    if (setjmp(newp->context) == 1) {
 3f6:	cf 01       	movw	r24, r30
 3f8:	06 96       	adiw	r24, 0x06	; 6
 3fa:	0e 94 b7 03 	call	0x76e	; 0x76e <setjmp>
 3fe:	01 97       	sbiw	r24, 0x01	; 1
 400:	91 f1       	breq	.+100    	; 0x466 <__DATA_REGION_LENGTH__+0x66>
        current->function(current->arg);
        DISABLE();
        enqueue(current, &freeQ);
        dispatch(dequeue(&readyQ));
    }
    SETSTACK(&newp->context, &newp->stack);
 402:	e9 81       	ldd	r30, Y+1	; 0x01
 404:	fa 81       	ldd	r31, Y+2	; 0x02
 406:	36 96       	adiw	r30, 0x06	; 6
 408:	89 81       	ldd	r24, Y+1	; 0x01
 40a:	9a 81       	ldd	r25, Y+2	; 0x02
 40c:	87 59       	subi	r24, 0x97	; 151
 40e:	9f 4f       	sbci	r25, 0xFF	; 255
 410:	91 8b       	std	Z+17, r25	; 0x11
 412:	80 8b       	std	Z+16, r24	; 0x10
 414:	93 8b       	std	Z+19, r25	; 0x13
 416:	82 8b       	std	Z+18, r24	; 0x12
	OCR1A = 8000000/(1024 * 20);
	TCNT1 = 0x0;
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 418:	e9 81       	ldd	r30, Y+1	; 0x01
 41a:	fa 81       	ldd	r31, Y+2	; 0x02
 41c:	15 82       	std	Z+5, r1	; 0x05
 41e:	14 82       	std	Z+4, r1	; 0x04
    if (*queue == NULL) {
 420:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <readyQ>
 424:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <readyQ+0x1>
 428:	30 97       	sbiw	r30, 0x00	; 0
 42a:	11 f4       	brne	.+4      	; 0x430 <__DATA_REGION_LENGTH__+0x30>
 42c:	10 c0       	rjmp	.+32     	; 0x44e <__DATA_REGION_LENGTH__+0x4e>
        *queue = p;
    } else {
        thread q = *queue;
        while (q->next)
 42e:	fc 01       	movw	r30, r24
 430:	84 81       	ldd	r24, Z+4	; 0x04
 432:	95 81       	ldd	r25, Z+5	; 0x05
 434:	00 97       	sbiw	r24, 0x00	; 0
 436:	d9 f7       	brne	.-10     	; 0x42e <__DATA_REGION_LENGTH__+0x2e>
            q = q->next;
        q->next = p;
 438:	89 81       	ldd	r24, Y+1	; 0x01
 43a:	9a 81       	ldd	r25, Y+2	; 0x02
 43c:	95 83       	std	Z+5, r25	; 0x05
 43e:	84 83       	std	Z+4, r24	; 0x04
        dispatch(dequeue(&readyQ));
    }
    SETSTACK(&newp->context, &newp->stack);

    enqueue(newp, &readyQ);
    ENABLE();
 440:	78 94       	sei
}
 442:	0f 90       	pop	r0
 444:	0f 90       	pop	r0
 446:	df 91       	pop	r29
 448:	cf 91       	pop	r28
 44a:	08 95       	ret
 44c:	ff cf       	rjmp	.-2      	; 0x44c <__DATA_REGION_LENGTH__+0x4c>
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
    if (*queue == NULL) {
        *queue = p;
 44e:	29 81       	ldd	r18, Y+1	; 0x01
 450:	3a 81       	ldd	r19, Y+2	; 0x02
 452:	30 93 1f 01 	sts	0x011F, r19	; 0x80011f <readyQ+0x1>
 456:	20 93 1e 01 	sts	0x011E, r18	; 0x80011e <readyQ>
        dispatch(dequeue(&readyQ));
    }
    SETSTACK(&newp->context, &newp->stack);

    enqueue(newp, &readyQ);
    ENABLE();
 45a:	78 94       	sei
}
 45c:	0f 90       	pop	r0
 45e:	0f 90       	pop	r0
 460:	df 91       	pop	r29
 462:	cf 91       	pop	r28
 464:	08 95       	ret
    newp = dequeue(&freeQ);
    newp->function = function;
    newp->arg = arg;
    newp->next = NULL;
    if (setjmp(newp->context) == 1) {
        ENABLE();
 466:	78 94       	sei
        current->function(current->arg);
 468:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 46c:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 470:	ed 91       	ld	r30, X+
 472:	fc 91       	ld	r31, X
 474:	11 97       	sbiw	r26, 0x01	; 1
 476:	12 96       	adiw	r26, 0x02	; 2
 478:	8d 91       	ld	r24, X+
 47a:	9c 91       	ld	r25, X
 47c:	13 97       	sbiw	r26, 0x03	; 3
 47e:	09 95       	icall
        DISABLE();
 480:	f8 94       	cli
        enqueue(current, &freeQ);
 482:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 486:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
	OCR1A = 8000000/(1024 * 20);
	TCNT1 = 0x0;
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 48a:	15 96       	adiw	r26, 0x05	; 5
 48c:	1c 92       	st	X, r1
 48e:	1e 92       	st	-X, r1
 490:	14 97       	sbiw	r26, 0x04	; 4
    if (*queue == NULL) {
 492:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <freeQ>
 496:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <freeQ+0x1>
 49a:	30 97       	sbiw	r30, 0x00	; 0
 49c:	11 f4       	brne	.+4      	; 0x4a2 <__DATA_REGION_LENGTH__+0xa2>
 49e:	17 c0       	rjmp	.+46     	; 0x4ce <__DATA_REGION_LENGTH__+0xce>
        *queue = p;
    } else {
        thread q = *queue;
        while (q->next)
 4a0:	fc 01       	movw	r30, r24
 4a2:	84 81       	ldd	r24, Z+4	; 0x04
 4a4:	95 81       	ldd	r25, Z+5	; 0x05
 4a6:	00 97       	sbiw	r24, 0x00	; 0
 4a8:	d9 f7       	brne	.-10     	; 0x4a0 <__DATA_REGION_LENGTH__+0xa0>
            q = q->next;
        q->next = p;
 4aa:	b5 83       	std	Z+5, r27	; 0x05
 4ac:	a4 83       	std	Z+4, r26	; 0x04
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 4ae:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <readyQ>
 4b2:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <readyQ+0x1>
    if (*queue) {
 4b6:	00 97       	sbiw	r24, 0x00	; 0
 4b8:	a1 f0       	breq	.+40     	; 0x4e2 <__DATA_REGION_LENGTH__+0xe2>
        *queue = (*queue)->next;
 4ba:	fc 01       	movw	r30, r24
 4bc:	24 81       	ldd	r18, Z+4	; 0x04
 4be:	35 81       	ldd	r19, Z+5	; 0x05
 4c0:	30 93 1f 01 	sts	0x011F, r19	; 0x80011f <readyQ+0x1>
 4c4:	20 93 1e 01 	sts	0x011E, r18	; 0x80011e <readyQ>
    if (setjmp(newp->context) == 1) {
        ENABLE();
        current->function(current->arg);
        DISABLE();
        enqueue(current, &freeQ);
        dispatch(dequeue(&readyQ));
 4c8:	0e 94 81 01 	call	0x302	; 0x302 <dispatch>
 4cc:	9a cf       	rjmp	.-204    	; 0x402 <__DATA_REGION_LENGTH__+0x2>
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
    if (*queue == NULL) {
        *queue = p;
 4ce:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <freeQ+0x1>
 4d2:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <freeQ>
        q->next = p;
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 4d6:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <readyQ>
 4da:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <readyQ+0x1>
    if (*queue) {
 4de:	00 97       	sbiw	r24, 0x00	; 0
 4e0:	61 f7       	brne	.-40     	; 0x4ba <__DATA_REGION_LENGTH__+0xba>
 4e2:	ff cf       	rjmp	.-2      	; 0x4e2 <__DATA_REGION_LENGTH__+0xe2>

000004e4 <yield>:
	yield();
}

// Change thread
void yield(void) {
	DISABLE();
 4e4:	f8 94       	cli
	enqueue(current, &readyQ);
 4e6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 4ea:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
	OCR1A = 8000000/(1024 * 20);
	TCNT1 = 0x0;
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 4ee:	fc 01       	movw	r30, r24
 4f0:	15 82       	std	Z+5, r1	; 0x05
 4f2:	14 82       	std	Z+4, r1	; 0x04
    if (*queue == NULL) {
 4f4:	a0 91 1e 01 	lds	r26, 0x011E	; 0x80011e <readyQ>
 4f8:	b0 91 1f 01 	lds	r27, 0x011F	; 0x80011f <readyQ+0x1>
 4fc:	10 97       	sbiw	r26, 0x00	; 0
 4fe:	b9 f0       	breq	.+46     	; 0x52e <__stack+0x2f>
 500:	fd 01       	movw	r30, r26
 502:	01 c0       	rjmp	.+2      	; 0x506 <__stack+0x7>
        *queue = p;
    } else {
        thread q = *queue;
        while (q->next)
 504:	f9 01       	movw	r30, r18
 506:	24 81       	ldd	r18, Z+4	; 0x04
 508:	35 81       	ldd	r19, Z+5	; 0x05
 50a:	21 15       	cp	r18, r1
 50c:	31 05       	cpc	r19, r1
 50e:	d1 f7       	brne	.-12     	; 0x504 <__stack+0x5>
            q = q->next;
        q->next = p;
 510:	95 83       	std	Z+5, r25	; 0x05
 512:	84 83       	std	Z+4, r24	; 0x04
 514:	14 96       	adiw	r26, 0x04	; 4
 516:	2d 91       	ld	r18, X+
 518:	3c 91       	ld	r19, X
 51a:	15 97       	sbiw	r26, 0x05	; 5
 51c:	cd 01       	movw	r24, r26
}

static thread dequeue(thread *queue) {
    thread p = *queue;
    if (*queue) {
        *queue = (*queue)->next;
 51e:	30 93 1f 01 	sts	0x011F, r19	; 0x80011f <readyQ+0x1>
 522:	20 93 1e 01 	sts	0x011E, r18	; 0x80011e <readyQ>

// Change thread
void yield(void) {
	DISABLE();
	enqueue(current, &readyQ);
	dispatch(dequeue(&readyQ));
 526:	0e 94 81 01 	call	0x302	; 0x302 <dispatch>
	ENABLE();
 52a:	78 94       	sei
}
 52c:	08 95       	ret
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
    if (*queue) {
 52e:	00 97       	sbiw	r24, 0x00	; 0
 530:	09 f4       	brne	.+2      	; 0x534 <__stack+0x35>
 532:	ff cf       	rjmp	.-2      	; 0x532 <__stack+0x33>
 534:	20 e0       	ldi	r18, 0x00	; 0
 536:	30 e0       	ldi	r19, 0x00	; 0
 538:	f2 cf       	rjmp	.-28     	; 0x51e <__stack+0x1f>

0000053a <__vector_3>:
    enqueue(newp, &readyQ);
    ENABLE();
}

// Interrupt handler for button
ISR(PCINT1_vect) {
 53a:	1f 92       	push	r1
 53c:	0f 92       	push	r0
 53e:	0f b6       	in	r0, 0x3f	; 63
 540:	0f 92       	push	r0
 542:	11 24       	eor	r1, r1
 544:	2f 93       	push	r18
 546:	3f 93       	push	r19
 548:	4f 93       	push	r20
 54a:	5f 93       	push	r21
 54c:	6f 93       	push	r22
 54e:	7f 93       	push	r23
 550:	8f 93       	push	r24
 552:	9f 93       	push	r25
 554:	af 93       	push	r26
 556:	bf 93       	push	r27
 558:	ef 93       	push	r30
 55a:	ff 93       	push	r31
	if ((PINB >> 7 == 0) || (PINB >> 6 == 0) || (PINB >> 4 == 0) || (PINE >> 2 == 0) || (PINE >> 3 == 0)){
 55c:	1f 99       	sbic	0x03, 7	; 3
 55e:	13 c0       	rjmp	.+38     	; 0x586 <__vector_3+0x4c>
		yield();
 560:	0e 94 72 02 	call	0x4e4	; 0x4e4 <yield>
	}
}
 564:	ff 91       	pop	r31
 566:	ef 91       	pop	r30
 568:	bf 91       	pop	r27
 56a:	af 91       	pop	r26
 56c:	9f 91       	pop	r25
 56e:	8f 91       	pop	r24
 570:	7f 91       	pop	r23
 572:	6f 91       	pop	r22
 574:	5f 91       	pop	r21
 576:	4f 91       	pop	r20
 578:	3f 91       	pop	r19
 57a:	2f 91       	pop	r18
 57c:	0f 90       	pop	r0
 57e:	0f be       	out	0x3f, r0	; 63
 580:	0f 90       	pop	r0
 582:	1f 90       	pop	r1
 584:	18 95       	reti
    ENABLE();
}

// Interrupt handler for button
ISR(PCINT1_vect) {
	if ((PINB >> 7 == 0) || (PINB >> 6 == 0) || (PINB >> 4 == 0) || (PINE >> 2 == 0) || (PINE >> 3 == 0)){
 586:	83 b1       	in	r24, 0x03	; 3
 588:	82 95       	swap	r24
 58a:	86 95       	lsr	r24
 58c:	86 95       	lsr	r24
 58e:	83 70       	andi	r24, 0x03	; 3
 590:	39 f3       	breq	.-50     	; 0x560 <__vector_3+0x26>
 592:	83 b1       	in	r24, 0x03	; 3
 594:	82 95       	swap	r24
 596:	8f 70       	andi	r24, 0x0F	; 15
 598:	19 f3       	breq	.-58     	; 0x560 <__vector_3+0x26>
 59a:	8c b1       	in	r24, 0x0c	; 12
 59c:	86 95       	lsr	r24
 59e:	86 95       	lsr	r24
 5a0:	f9 f2       	breq	.-66     	; 0x560 <__vector_3+0x26>
 5a2:	8c b1       	in	r24, 0x0c	; 12
 5a4:	86 95       	lsr	r24
 5a6:	86 95       	lsr	r24
 5a8:	86 95       	lsr	r24
 5aa:	d1 f2       	breq	.-76     	; 0x560 <__vector_3+0x26>
 5ac:	db cf       	rjmp	.-74     	; 0x564 <__vector_3+0x2a>

000005ae <__vector_7>:
		yield();
	}
}

// Should be interrupt handler for sequential interrupts
ISR(TIMER1_COMPA_vect) {
 5ae:	1f 92       	push	r1
 5b0:	0f 92       	push	r0
 5b2:	0f b6       	in	r0, 0x3f	; 63
 5b4:	0f 92       	push	r0
 5b6:	11 24       	eor	r1, r1
 5b8:	2f 93       	push	r18
 5ba:	3f 93       	push	r19
 5bc:	4f 93       	push	r20
 5be:	5f 93       	push	r21
 5c0:	6f 93       	push	r22
 5c2:	7f 93       	push	r23
 5c4:	8f 93       	push	r24
 5c6:	9f 93       	push	r25
 5c8:	af 93       	push	r26
 5ca:	bf 93       	push	r27
 5cc:	ef 93       	push	r30
 5ce:	ff 93       	push	r31
	yield();
 5d0:	0e 94 72 02 	call	0x4e4	; 0x4e4 <yield>
}
 5d4:	ff 91       	pop	r31
 5d6:	ef 91       	pop	r30
 5d8:	bf 91       	pop	r27
 5da:	af 91       	pop	r26
 5dc:	9f 91       	pop	r25
 5de:	8f 91       	pop	r24
 5e0:	7f 91       	pop	r23
 5e2:	6f 91       	pop	r22
 5e4:	5f 91       	pop	r21
 5e6:	4f 91       	pop	r20
 5e8:	3f 91       	pop	r19
 5ea:	2f 91       	pop	r18
 5ec:	0f 90       	pop	r0
 5ee:	0f be       	out	0x3f, r0	; 63
 5f0:	0f 90       	pop	r0
 5f2:	1f 90       	pop	r1
 5f4:	18 95       	reti

000005f6 <lock>:
	enqueue(current, &readyQ);
	dispatch(dequeue(&readyQ));
	ENABLE();
}

void lock(mutex *m) {
 5f6:	cf 93       	push	r28
 5f8:	df 93       	push	r29
 5fa:	dc 01       	movw	r26, r24
	DISABLE();
 5fc:	f8 94       	cli
	
	// If it's unlocked, lock it
	if(m->locked == 0){
 5fe:	8d 91       	ld	r24, X+
 600:	9c 91       	ld	r25, X
 602:	11 97       	sbiw	r26, 0x01	; 1
 604:	89 2b       	or	r24, r25
 606:	41 f1       	breq	.+80     	; 0x658 <lock+0x62>
	}
	
	// Else - put the current thread in the back of the line of the waitQ
	// and run the first thread in the readyQ
	else{
		enqueue(current, &(m->waitQ));
 608:	c0 91 00 01 	lds	r28, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 60c:	d0 91 01 01 	lds	r29, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
	OCR1A = 8000000/(1024 * 20);
	TCNT1 = 0x0;
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 610:	1d 82       	std	Y+5, r1	; 0x05
 612:	1c 82       	std	Y+4, r1	; 0x04
    if (*queue == NULL) {
 614:	12 96       	adiw	r26, 0x02	; 2
 616:	ed 91       	ld	r30, X+
 618:	fc 91       	ld	r31, X
 61a:	13 97       	sbiw	r26, 0x03	; 3
 61c:	30 97       	sbiw	r30, 0x00	; 0
 61e:	11 f4       	brne	.+4      	; 0x624 <lock+0x2e>
 620:	23 c0       	rjmp	.+70     	; 0x668 <lock+0x72>
        *queue = p;
    } else {
        thread q = *queue;
        while (q->next)
 622:	fc 01       	movw	r30, r24
 624:	84 81       	ldd	r24, Z+4	; 0x04
 626:	95 81       	ldd	r25, Z+5	; 0x05
 628:	00 97       	sbiw	r24, 0x00	; 0
 62a:	d9 f7       	brne	.-10     	; 0x622 <lock+0x2c>
            q = q->next;
        q->next = p;
 62c:	d5 83       	std	Z+5, r29	; 0x05
 62e:	c4 83       	std	Z+4, r28	; 0x04
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 630:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <readyQ>
 634:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <readyQ+0x1>
    if (*queue) {
 638:	00 97       	sbiw	r24, 0x00	; 0
 63a:	69 f0       	breq	.+26     	; 0x656 <lock+0x60>
        *queue = (*queue)->next;
 63c:	fc 01       	movw	r30, r24
 63e:	24 81       	ldd	r18, Z+4	; 0x04
 640:	35 81       	ldd	r19, Z+5	; 0x05
 642:	30 93 1f 01 	sts	0x011F, r19	; 0x80011f <readyQ+0x1>
 646:	20 93 1e 01 	sts	0x011E, r18	; 0x80011e <readyQ>
	
	// Else - put the current thread in the back of the line of the waitQ
	// and run the first thread in the readyQ
	else{
		enqueue(current, &(m->waitQ));
		dispatch(dequeue(&readyQ));
 64a:	0e 94 81 01 	call	0x302	; 0x302 <dispatch>
	}
	ENABLE();
 64e:	78 94       	sei
}
 650:	df 91       	pop	r29
 652:	cf 91       	pop	r28
 654:	08 95       	ret
 656:	ff cf       	rjmp	.-2      	; 0x656 <lock+0x60>
void lock(mutex *m) {
	DISABLE();
	
	// If it's unlocked, lock it
	if(m->locked == 0){
		m->locked = 1;
 658:	81 e0       	ldi	r24, 0x01	; 1
 65a:	90 e0       	ldi	r25, 0x00	; 0
 65c:	8d 93       	st	X+, r24
 65e:	9c 93       	st	X, r25
	// and run the first thread in the readyQ
	else{
		enqueue(current, &(m->waitQ));
		dispatch(dequeue(&readyQ));
	}
	ENABLE();
 660:	78 94       	sei
}
 662:	df 91       	pop	r29
 664:	cf 91       	pop	r28
 666:	08 95       	ret
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
    if (*queue == NULL) {
        *queue = p;
 668:	13 96       	adiw	r26, 0x03	; 3
 66a:	dc 93       	st	X, r29
 66c:	ce 93       	st	-X, r28
 66e:	12 97       	sbiw	r26, 0x02	; 2
 670:	df cf       	rjmp	.-66     	; 0x630 <lock+0x3a>

00000672 <unlock>:
		dispatch(dequeue(&readyQ));
	}
	ENABLE();
}

void unlock(mutex *m) {
 672:	cf 93       	push	r28
 674:	df 93       	push	r29
 676:	fc 01       	movw	r30, r24
	
	DISABLE();
 678:	f8 94       	cli
	
	// If threads are available in the waitQ, put the current thread in the last position of the readyQ
	// and run the first thread in the waitQ
	if(m->waitQ != NULL){
 67a:	82 81       	ldd	r24, Z+2	; 0x02
 67c:	93 81       	ldd	r25, Z+3	; 0x03
 67e:	89 2b       	or	r24, r25
 680:	51 f1       	breq	.+84     	; 0x6d6 <unlock+0x64>
		enqueue(current, &readyQ);
 682:	c0 91 00 01 	lds	r28, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 686:	d0 91 01 01 	lds	r29, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
	OCR1A = 8000000/(1024 * 20);
	TCNT1 = 0x0;
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
 68a:	1d 82       	std	Y+5, r1	; 0x05
 68c:	1c 82       	std	Y+4, r1	; 0x04
    if (*queue == NULL) {
 68e:	a0 91 1e 01 	lds	r26, 0x011E	; 0x80011e <readyQ>
 692:	b0 91 1f 01 	lds	r27, 0x011F	; 0x80011f <readyQ+0x1>
 696:	10 97       	sbiw	r26, 0x00	; 0
 698:	11 f4       	brne	.+4      	; 0x69e <unlock+0x2c>
 69a:	23 c0       	rjmp	.+70     	; 0x6e2 <unlock+0x70>
        *queue = p;
    } else {
        thread q = *queue;
        while (q->next)
 69c:	dc 01       	movw	r26, r24
 69e:	14 96       	adiw	r26, 0x04	; 4
 6a0:	8d 91       	ld	r24, X+
 6a2:	9c 91       	ld	r25, X
 6a4:	15 97       	sbiw	r26, 0x05	; 5
 6a6:	00 97       	sbiw	r24, 0x00	; 0
 6a8:	c9 f7       	brne	.-14     	; 0x69c <unlock+0x2a>
            q = q->next;
        q->next = p;
 6aa:	15 96       	adiw	r26, 0x05	; 5
 6ac:	dc 93       	st	X, r29
 6ae:	ce 93       	st	-X, r28
 6b0:	14 97       	sbiw	r26, 0x04	; 4
    }
}

static thread dequeue(thread *queue) {
    thread p = *queue;
 6b2:	82 81       	ldd	r24, Z+2	; 0x02
 6b4:	93 81       	ldd	r25, Z+3	; 0x03
    if (*queue) {
 6b6:	00 97       	sbiw	r24, 0x00	; 0
 6b8:	69 f0       	breq	.+26     	; 0x6d4 <unlock+0x62>
        *queue = (*queue)->next;
 6ba:	dc 01       	movw	r26, r24
 6bc:	14 96       	adiw	r26, 0x04	; 4
 6be:	2d 91       	ld	r18, X+
 6c0:	3c 91       	ld	r19, X
 6c2:	15 97       	sbiw	r26, 0x05	; 5
 6c4:	33 83       	std	Z+3, r19	; 0x03
 6c6:	22 83       	std	Z+2, r18	; 0x02
	
	// If threads are available in the waitQ, put the current thread in the last position of the readyQ
	// and run the first thread in the waitQ
	if(m->waitQ != NULL){
		enqueue(current, &readyQ);
		dispatch(dequeue(&(m->waitQ)));
 6c8:	0e 94 81 01 	call	0x302	; 0x302 <dispatch>
	// Else - unlock (put the locked flag to 0)
	else{
		m->locked = 0;
	}
	
	ENABLE();
 6cc:	78 94       	sei
}
 6ce:	df 91       	pop	r29
 6d0:	cf 91       	pop	r28
 6d2:	08 95       	ret
 6d4:	ff cf       	rjmp	.-2      	; 0x6d4 <unlock+0x62>
		dispatch(dequeue(&(m->waitQ)));
	}
	
	// Else - unlock (put the locked flag to 0)
	else{
		m->locked = 0;
 6d6:	11 82       	std	Z+1, r1	; 0x01
 6d8:	10 82       	st	Z, r1
	}
	
	ENABLE();
 6da:	78 94       	sei
}
 6dc:	df 91       	pop	r29
 6de:	cf 91       	pop	r28
 6e0:	08 95       	ret
}

static void enqueue(thread p, thread *queue) {
    p->next = NULL;
    if (*queue == NULL) {
        *queue = p;
 6e2:	d0 93 1f 01 	sts	0x011F, r29	; 0x80011f <readyQ+0x1>
 6e6:	c0 93 1e 01 	sts	0x011E, r28	; 0x80011e <readyQ>
 6ea:	e3 cf       	rjmp	.-58     	; 0x6b2 <unlock+0x40>

000006ec <__divmodsi4>:
 6ec:	05 2e       	mov	r0, r21
 6ee:	97 fb       	bst	r25, 7
 6f0:	1e f4       	brtc	.+6      	; 0x6f8 <__divmodsi4+0xc>
 6f2:	00 94       	com	r0
 6f4:	0e 94 8d 03 	call	0x71a	; 0x71a <__negsi2>
 6f8:	57 fd       	sbrc	r21, 7
 6fa:	07 d0       	rcall	.+14     	; 0x70a <__divmodsi4_neg2>
 6fc:	0e 94 95 03 	call	0x72a	; 0x72a <__udivmodsi4>
 700:	07 fc       	sbrc	r0, 7
 702:	03 d0       	rcall	.+6      	; 0x70a <__divmodsi4_neg2>
 704:	4e f4       	brtc	.+18     	; 0x718 <__divmodsi4_exit>
 706:	0c 94 8d 03 	jmp	0x71a	; 0x71a <__negsi2>

0000070a <__divmodsi4_neg2>:
 70a:	50 95       	com	r21
 70c:	40 95       	com	r20
 70e:	30 95       	com	r19
 710:	21 95       	neg	r18
 712:	3f 4f       	sbci	r19, 0xFF	; 255
 714:	4f 4f       	sbci	r20, 0xFF	; 255
 716:	5f 4f       	sbci	r21, 0xFF	; 255

00000718 <__divmodsi4_exit>:
 718:	08 95       	ret

0000071a <__negsi2>:
 71a:	90 95       	com	r25
 71c:	80 95       	com	r24
 71e:	70 95       	com	r23
 720:	61 95       	neg	r22
 722:	7f 4f       	sbci	r23, 0xFF	; 255
 724:	8f 4f       	sbci	r24, 0xFF	; 255
 726:	9f 4f       	sbci	r25, 0xFF	; 255
 728:	08 95       	ret

0000072a <__udivmodsi4>:
 72a:	a1 e2       	ldi	r26, 0x21	; 33
 72c:	1a 2e       	mov	r1, r26
 72e:	aa 1b       	sub	r26, r26
 730:	bb 1b       	sub	r27, r27
 732:	fd 01       	movw	r30, r26
 734:	0d c0       	rjmp	.+26     	; 0x750 <__udivmodsi4_ep>

00000736 <__udivmodsi4_loop>:
 736:	aa 1f       	adc	r26, r26
 738:	bb 1f       	adc	r27, r27
 73a:	ee 1f       	adc	r30, r30
 73c:	ff 1f       	adc	r31, r31
 73e:	a2 17       	cp	r26, r18
 740:	b3 07       	cpc	r27, r19
 742:	e4 07       	cpc	r30, r20
 744:	f5 07       	cpc	r31, r21
 746:	20 f0       	brcs	.+8      	; 0x750 <__udivmodsi4_ep>
 748:	a2 1b       	sub	r26, r18
 74a:	b3 0b       	sbc	r27, r19
 74c:	e4 0b       	sbc	r30, r20
 74e:	f5 0b       	sbc	r31, r21

00000750 <__udivmodsi4_ep>:
 750:	66 1f       	adc	r22, r22
 752:	77 1f       	adc	r23, r23
 754:	88 1f       	adc	r24, r24
 756:	99 1f       	adc	r25, r25
 758:	1a 94       	dec	r1
 75a:	69 f7       	brne	.-38     	; 0x736 <__udivmodsi4_loop>
 75c:	60 95       	com	r22
 75e:	70 95       	com	r23
 760:	80 95       	com	r24
 762:	90 95       	com	r25
 764:	9b 01       	movw	r18, r22
 766:	ac 01       	movw	r20, r24
 768:	bd 01       	movw	r22, r26
 76a:	cf 01       	movw	r24, r30
 76c:	08 95       	ret

0000076e <setjmp>:
 76e:	dc 01       	movw	r26, r24
 770:	2d 92       	st	X+, r2
 772:	3d 92       	st	X+, r3
 774:	4d 92       	st	X+, r4
 776:	5d 92       	st	X+, r5
 778:	6d 92       	st	X+, r6
 77a:	7d 92       	st	X+, r7
 77c:	8d 92       	st	X+, r8
 77e:	9d 92       	st	X+, r9
 780:	ad 92       	st	X+, r10
 782:	bd 92       	st	X+, r11
 784:	cd 92       	st	X+, r12
 786:	dd 92       	st	X+, r13
 788:	ed 92       	st	X+, r14
 78a:	fd 92       	st	X+, r15
 78c:	0d 93       	st	X+, r16
 78e:	1d 93       	st	X+, r17
 790:	cd 93       	st	X+, r28
 792:	dd 93       	st	X+, r29
 794:	ff 91       	pop	r31
 796:	ef 91       	pop	r30
 798:	8d b7       	in	r24, 0x3d	; 61
 79a:	8d 93       	st	X+, r24
 79c:	8e b7       	in	r24, 0x3e	; 62
 79e:	8d 93       	st	X+, r24
 7a0:	8f b7       	in	r24, 0x3f	; 63
 7a2:	8d 93       	st	X+, r24
 7a4:	ed 93       	st	X+, r30
 7a6:	fd 93       	st	X+, r31
 7a8:	88 27       	eor	r24, r24
 7aa:	99 27       	eor	r25, r25
 7ac:	09 94       	ijmp

000007ae <longjmp>:
 7ae:	dc 01       	movw	r26, r24
 7b0:	cb 01       	movw	r24, r22
 7b2:	81 30       	cpi	r24, 0x01	; 1
 7b4:	91 05       	cpc	r25, r1
 7b6:	81 1d       	adc	r24, r1
 7b8:	2d 90       	ld	r2, X+
 7ba:	3d 90       	ld	r3, X+
 7bc:	4d 90       	ld	r4, X+
 7be:	5d 90       	ld	r5, X+
 7c0:	6d 90       	ld	r6, X+
 7c2:	7d 90       	ld	r7, X+
 7c4:	8d 90       	ld	r8, X+
 7c6:	9d 90       	ld	r9, X+
 7c8:	ad 90       	ld	r10, X+
 7ca:	bd 90       	ld	r11, X+
 7cc:	cd 90       	ld	r12, X+
 7ce:	dd 90       	ld	r13, X+
 7d0:	ed 90       	ld	r14, X+
 7d2:	fd 90       	ld	r15, X+
 7d4:	0d 91       	ld	r16, X+
 7d6:	1d 91       	ld	r17, X+
 7d8:	cd 91       	ld	r28, X+
 7da:	dd 91       	ld	r29, X+
 7dc:	ed 91       	ld	r30, X+
 7de:	fd 91       	ld	r31, X+
 7e0:	0d 90       	ld	r0, X+
 7e2:	f8 94       	cli
 7e4:	fe bf       	out	0x3e, r31	; 62
 7e6:	0f be       	out	0x3f, r0	; 63
 7e8:	ed bf       	out	0x3d, r30	; 61
 7ea:	ed 91       	ld	r30, X+
 7ec:	fd 91       	ld	r31, X+
 7ee:	09 94       	ijmp

000007f0 <_exit>:
 7f0:	f8 94       	cli

000007f2 <__stop_program>:
 7f2:	ff cf       	rjmp	.-2      	; 0x7f2 <__stop_program>
